<?xml version="1.0" encoding="UTF-8"?><PHPStandardSyntax><s f="class_exists" u="bool class_exists(string classname [, bool autoload])">Checks if the class exists</s><s f="create_function" u="string create_function(string args, string code)">Creates an anonymous function, and returns its name (funny, eh?)</s><s f="debug_backtrace" u="array debug_backtrace(void)">Return backtrace as array</s><s f="debug_print_backtrace" u="void debug_print_backtrace(void)"></s><s f="define" u="bool define(string constant_name, mixed value, case_sensitive=true)">Define a new constant</s><s f="defined" u="bool defined(string constant_name)">Check whether a constant exists</s><s f="each" u="array each(array arr)">Return the currently pointed key..value pair in the passed array, and advance the pointer to the next element</s><s f="error_reporting" u="int error_reporting(int new_error_level=null)">Return the current error_reporting level, and if an argument was passed - change to the new level</s><s f="extension_loaded" u="bool extension_loaded(string extension_name)">Returns true if the named extension is loaded</s><s f="func_get_arg" u="mixed func_get_arg(int arg_num)">Get the $arg_num'th argument that was passed to the function</s><s f="func_get_args" u="array func_get_args()">Get an array of the arguments that were passed to the function</s><s f="func_num_args" u="int func_num_args(void)">Get the number of arguments that were passed to the function</s><s f="function_exists" u="bool function_exists(string function_name)">Checks if the function exists</s><s f="get_class" u="string get_class([object object])">Retrieves the class name</s><s f="get_class_methods" u="array get_class_methods(mixed class)">Returns an array of method names for class or class instance.</s><s f="get_class_vars" u="array get_class_vars(string class_name)">Returns an array of default properties of the class</s><s f="get_declared_classes" u="array get_declared_classes()">Returns an array of all declared classes.</s><s f="get_declared_interfaces" u="array get_declared_interfaces()">Returns an array of all declared interfaces.</s><s f="get_defined_constants" u="array get_defined_constants(void)">Return an array containing the names and values of all defined constants</s><s f="get_defined_functions" u="array get_defined_functions(void)">Returns an array of all defined functions</s><s f="get_defined_vars" u="array get_defined_vars(void)">Returns an associative array of names and values of all currently defined variable names (variables in the current scope)</s><s f="get_extension_funcs" u="array get_extension_funcs(string extension_name)">Returns an array with the names of functions belonging to the named extension</s><s f="get_included_files" u="array get_included_files(void)">Returns an array with the file names that were include_once()'d</s><s f="get_loaded_extensions" u="array get_loaded_extensions(void)">Return an array containing names of loaded extensions</s><s f="get_object_vars" u="array get_object_vars(object obj)">Returns an array of object properties</s><s f="get_parent_class" u="string get_parent_class(mixed object)">Retrieves the parent class name for object or class.</s><s f="get_resource_type" u="string get_resource_type(resource res)">Get the resource type name for a given resource</s><s f="is_a" u="bool is_a(object object, string class_name)">Returns true if the object is of this class or has this class as one of its parents</s><s f="is_subclass_of" u="bool is_subclass_of(object object, string class_name)">Returns true if the object has this class as one of its parents</s><s f="leak" u="void leak(int num_bytes=3)">Cause an intentional memory leak, for testing/debugging purposes</s><s f="method_exists" u="bool method_exists(object object, string method)">Checks if the class method exists</s><s f="restore_error_handler" u="void restore_error_handler(void)">Restores the previously defined error handler function</s><s f="restore_exception_handler" u="void restore_exception_handler(void)">Restores the previously defined exception handler function</s><s f="set_error_handler" u="string set_error_handler(string error_handler [, int error_types])">Sets a user-defined error handler function.  Returns the previously defined error handler, or false on error</s><s f="set_exception_handler" u="string set_exception_handler(callable exception_handler)">Sets a user-defined exception handler function.  Returns the previously defined exception handler, or false on error</s><s f="strcasecmp" u="int strcasecmp(string str1, string str2)">Binary safe case-insensitive string comparison</s><s f="strcmp" u="int strcmp(string str1, string str2)">Binary safe string comparison</s><s f="strlen" u="int strlen(string str)">Get string length</s><s f="strncasecmp" u="int strncasecmp(string str1, string str2, int len)">Binary safe string comparison</s><s f="strncmp" u="int strncmp(string str1, string str2, int len)">Binary safe string comparison</s><s f="trigger_error" u="void trigger_error(string messsage [, int error_type])">Generates a user-level error/warning/notice message</s><s f="zend_version" u="string zend_version(void)">Get the version of the Zend Engine</s><s f="bcadd" u="string bcadd(string left_operand, string right_operand [, int scale])">Returns the sum of two arbitrary precision numbers</s><s f="bccomp" u="int bccomp(string left_operand, string right_operand [, int scale])">Compares two arbitrary precision numbers</s><s f="bcdiv" u="string bcdiv(string left_operand, string right_operand [, int scale])">Returns the quotient of two arbitrary precision numbers (division)</s><s f="bcmod" u="string bcmod(string left_operand, string right_operand)">Returns the modulus of the two arbitrary precision operands</s><s f="bcmul" u="string bcmul(string left_operand, string right_operand [, int scale])">Returns the multiplication of two arbitrary precision numbers</s><s f="bcpow" u="string bcpow(string x, string y [, int scale])">Returns the value of an arbitrary precision number raised to the power of another</s><s f="bcpowmod" u="string bcpowmod(string x, string y, string mod [, int scale])">Returns the value of an arbitrary precision number raised to the power of another reduced by a modulous</s><s f="bcscale" u="bool bcscale(int scale)">Sets default scale parameter for all bc math functions</s><s f="bcsqrt" u="string bcsqrt(string operand [, int scale])">Returns the square root of an arbitray precision number</s><s f="bcsub" u="string bcsub(string left_operand, string right_operand [, int scale])">Returns the difference between two arbitrary precision numbers</s><s f="bzcompress" u="string bzcompress(string source [, int blocksize100k [, int workfactor]])">Compresses a string into BZip2 encoded data</s><s f="bzdecompress" u="string bzdecompress(string source [, int small])">Decompresses BZip2 compressed data</s><s f="bzerrno" u="int bzerrno(resource bz)">Returns the error number</s><s f="bzerror" u="array bzerror(resource bz)">Returns the error number and error string in an associative array</s><s f="bzerrstr" u="string bzerrstr(resource bz)">Returns the error string</s><s f="bzopen" u="resource bzopen(string|int file|fp, string mode)">Opens a new BZip2 stream</s><s f="bzread" u="string bzread(int bz[, int length])">Reads up to length bytes from a BZip2 stream, or 1024 bytes if length is not specified</s><s f="jdtounix" u="int jdtounix(int jday)">Convert Julian Day to UNIX timestamp</s><s f="unixtojd" u="int unixtojd([int timestamp])">Convert UNIX timestamp to Julian Day</s><s f="cal_days_in_month" u="int cal_days_in_month(int calendar, int month, int year)">Returns the number of days in a month for a given year and calendar</s><s f="cal_from_jd" u="array cal_from_jd(int jd, int calendar)">Converts from Julian Day Count to a supported calendar and return extended information</s><s f="cal_info" u="array cal_info(int calendar)">Returns information about a particular calendar</s><s f="cal_to_jd" u="int cal_to_jd(int calendar, int month, int day, int year)">Converts from a supported calendar to Julian Day Count</s><s f="frenchtojd" u="int frenchtojd(int month, int day, int year)">Converts a french republic calendar date to julian day count</s><s f="gregoriantojd" u="int gregoriantojd(int month, int day, int year)">Converts a gregorian calendar date to julian day count</s><s f="jddayofweek" u="mixed jddayofweek(int juliandaycount [, int mode])">Returns name or number of day of week from julian day count</s><s f="jdmonthname" u="string jdmonthname(int juliandaycount, int mode)">Returns name of month for julian day count</s><s f="jdtofrench" u="string jdtofrench(int juliandaycount)">Converts a julian day count to a french republic calendar date</s><s f="jdtogregorian" u="string jdtogregorian(int juliandaycount)">Converts a julian day count to a gregorian calendar date</s><s f="jdtojewish" u="string jdtojewish(int juliandaycount [, bool hebrew [, int fl]])">Converts a julian day count to a jewish calendar date</s><s f="jdtojulian" u="string jdtojulian(int juliandaycount)">Convert a julian day count to a julian calendar date</s><s f="jewishtojd" u="int jewishtojd(int month, int day, int year)">Converts a jewish calendar date to a julian day count</s><s f="juliantojd" u="int juliantojd(int month, int day, int year)">Converts a julian calendar date to julian day count</s><s f="easter_date" u="int easter_date([int year])">Return the timestamp of midnight on Easter of a given year (defaults to current year)</s><s f="easter_days" u="int easter_days([int year, [int method]])">Return the number of days after March 21 that Easter falls on for a given year (defaults to current year)</s><s f="com_create_guid" u="string com_create_guid()">Generate a globally unique identifier (GUID)</s><s f="com_event_sink" u="bool com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])">Connect events from a COM object to a PHP object</s><s f="com_load_typelib" u="bool com_load_typelib(string typelib_name [, int case_insensitive])">Loads a Typelibrary and registers its constants</s><s f="com_message_pump" u="bool com_message_pump([int timeoutms])">Process COM messages, sleeping for up to timeoutms milliseconds</s><s f="com_print_typeinfo" u="bool com_print_typeinfo(object comobject | string typelib, string dispinterface, bool wantsink)">Print out a PHP class definition for a dispatchable interface</s><s f="variant_abs" u="mixed variant_abs(mixed left)">Returns the absolute value of a variant</s><s f="variant_add" u="mixed variant_add(mixed left, mixed right)">"Adds" two variant values together and returns the result</s><s f="variant_and" u="mixed variant_and(mixed left, mixed right)">performs a bitwise AND operation between two variants and returns the result</s><s f="variant_cast" u="object variant_cast(object variant, int type)">Convert a variant into a new variant object of another type</s><s f="variant_cat" u="mixed variant_cat(mixed left, mixed right)">concatenates two variant values together and returns the result</s><s f="variant_cmp" u="int variant_cmp(mixed left, mixed right [, int lcid [, int flags]])">Compares two variants</s><s f="variant_date_from_timestamp" u="object variant_date_from_timestamp(int timestamp)">Returns a variant date representation of a unix timestamp</s><s f="variant_date_to_timestamp" u="int variant_date_to_timestamp(object variant)">Converts a variant date/time value to unix timestamp</s><s f="variant_div" u="mixed variant_div(mixed left, mixed right)">Returns the result from dividing two variants</s><s f="variant_eqv" u="mixed variant_eqv(mixed left, mixed right)">Performs a bitwise equivalence on two variants</s><s f="variant_fix" u="mixed variant_fix(mixed left)">Returns the ? of a variant</s><s f="variant_get_type" u="int variant_get_type(object variant)">Returns the VT_XXX type code for a variant</s><s f="variant_idiv" u="mixed variant_idiv(mixed left, mixed right)">Converts variants to operands and then returns the result from dividing them</s><s f="variant_imp" u="mixed variant_imp(mixed left, mixed right)">Performs a bitwise implication on two variants</s><s f="variant_index_get" u="mixed variant_index_get(object variant, mixed index1 [, mixed index2 [, ...]])">Get the value of a multi dimensional array property</s><s f="variant_int" u="mixed variant_int(mixed left)">Returns the integer portion of a variant</s><s f="variant_mod" u="mixed variant_mod(mixed left, mixed right)">Divides two variants and returns only the remainder</s><s f="variant_mul" u="mixed variant_mul(mixed left, mixed right)">multiplies the values of the two variants and returns the result</s><s f="variant_neg" u="mixed variant_neg(mixed left)">Performs logical negation on a variant</s><s f="variant_not" u="mixed variant_not(mixed left)">Performs bitwise not negation on a variant</s><s f="variant_or" u="mixed variant_or(mixed left, mixed right)">Performs a logical disjunction on two variants</s><s f="variant_pow" u="mixed variant_pow(mixed left, mixed right)">Returns the result of performing the power function with two variants</s><s f="variant_round" u="mixed variant_round(mixed left, int decimals)">Rounds a variant to the specified number of decimal places</s><s f="variant_set" u="void variant_set(object variant, mixed value)">Assigns a new value for a variant object (like "set" in VB)</s><s f="variant_set_type" u="void variant_set_type(object variant, int type)">Convert a variant into another type.  Variant is modified "in-place"</s><s f="variant_sub" u="mixed variant_sub(mixed left, mixed right)">subjects the value of the right variant from the left variant value and returns the result</s><s f="variant_xor" u="mixed variant_xor(mixed left, mixed right)">Performs a logical exclusion on two variants</s><s f="cpdf_add_annotation" u="bool cpdf_add_annotation(int pdfdoc, float xll, float yll, float xur, float xur, string title, string text [, int mode])">Sets annotation</s><s f="cpdf_add_outline" u="int cpdf_add_outline(int pdfdoc, int lastoutline, int sublevel, int open, int pagenr, string title)">Adds outline</s><s f="cpdf_arc" u="bool cpdf_arc(int pdfdoc, float x, float y, float radius, float start, float end [, int mode])">Draws an arc</s><s f="cpdf_begin_text" u="bool cpdf_begin_text(int pdfdoc)">Starts text section</s><s f="cpdf_circle" u="bool cpdf_circle(int pdfdoc, float x, float y, float radius [, int mode])">Draws a circle</s><s f="cpdf_clip" u="bool cpdf_clip(int pdfdoc)">Clips to current path</s><s f="cpdf_close" u="bool cpdf_close(int pdfdoc)">Closes the pdf document</s><s f="cpdf_closepath" u="bool cpdf_closepath(int pdfdoc)">Close path</s><s f="cpdf_closepath_fill_stroke" u="bool cpdf_closepath_fill_stroke(int pdfdoc)">Close, fill and stroke current path</s><s f="cpdf_closepath_stroke" u="bool cpdf_closepath_stroke(int pdfdoc)">Close path and draw line along path</s><s f="cpdf_continue_text" u="bool cpdf_continue_text(int pdfdoc, string text)">Outputs text in next line</s><s f="cpdf_curveto" u="bool cpdf_curveto(int pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode])">Draws a curve</s><s f="cpdf_end_text" u="bool cpdf_end_text(int pdfdoc)">Ends text section</s><s f="cpdf_fill" u="bool cpdf_fill(int pdfdoc)">Fills current path</s><s f="cpdf_fill_stroke" u="bool cpdf_fill_stroke(int pdfdoc)">Fills and stroke current path</s><s f="cpdf_finalize" u="bool cpdf_finalize(int pdfdoc)">Creates PDF doc in memory</s><s f="cpdf_finalize_page" u="bool cpdf_finalize_page(int pdfdoc, int pagenr)">Ends the page to save memory</s><s f="cpdf_global_set_document_limits" u="bool cpdf_global_set_document_limits(int maxPages, int maxFonts, int maxImages, int maxAnnots, int maxObjects)">Sets document settings for all documents</s><s f="cpdf_import_jpeg" u="bool cpdf_import_jpeg(int pdfdoc, string filename, float x, float y, float angle, float width, float height, float x_scale, float y_scale, int gsave [, int mode])">Includes JPEG image</s><s f="cpdf_lineto" u="bool cpdf_lineto(int pdfdoc, float x, float y [, int mode])">Draws a line</s><s f="cpdf_moveto" u="bool cpdf_moveto(int pdfdoc, float x, float y [, int mode])">Sets current point</s><s f="cpdf_newpath" u="bool cpdf_newpath(int pdfdoc)">Starts new path</s><s f="cpdf_open" u="int cpdf_open(int compression [, string filename [, array doc_limits]])">Opens a new pdf document</s><s f="cpdf_output_buffer" u="bool cpdf_output_buffer(int pdfdoc)">Returns the internal memory stream as string</s><s f="cpdf_page_init" u="bool cpdf_page_init(int pdfdoc, int pagenr, int orientation, int height, int width [, float unit])">Starts page</s><s f="cpdf_place_inline_image" u="bool cpdf_place_inline_image(int pdfdoc, int gdimage, float x, float y, float angle, fload width, float height, int gsave [, int mode])">Includes image</s><s f="cpdf_rect" u="bool cpdf_rect(int pdfdoc, float x, float y, float width, float height [, int mode])">Draws a rectangle</s><s f="cpdf_restore" u="bool cpdf_restore(int pdfdoc)">Restores formerly saved enviroment</s><s f="cpdf_rlineto" u="bool cpdf_rlineto(int pdfdoc, float x, float y [, int mode])">Draws a line relative to current point</s><s f="cpdf_rmoveto" u="bool cpdf_rmoveto(int pdfdoc, float x, float y [, int mode])">Sets current point</s><s f="cpdf_rotate" u="bool cpdf_rotate(int pdfdoc, float angle)">Sets rotation</s><s f="cpdf_rotate_text" u="bool cpdf_rotate_text(int pdfdoc, float angle)">Sets text rotation angle</s><s f="cpdf_save" u="bool cpdf_save(int pdfdoc)">Saves current enviroment</s><s f="cpdf_save_to_file" u="bool cpdf_save_to_file(int pdfdoc, string filename)">Saves the internal memory stream to a file</s><s f="cpdf_scale" u="bool cpdf_scale(int pdfdoc, float x_scale, float y_scale)">Sets scaling</s><s f="cpdf_set_action_url" u="bool cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])">Sets hyperlink</s><s f="cpdf_set_char_spacing" u="bool cpdf_set_char_spacing(int pdfdoc, float space)">Sets character spacing</s><s f="cpdf_set_creator" u="bool cpdf_set_creator(int pdfdoc, string creator)">Sets the creator field</s><s f="cpdf_set_current_page" u="bool cpdf_set_current_page(int pdfdoc, int pagenr)">Sets page for output</s><s f="cpdf_set_font" u="bool cpdf_set_font(int pdfdoc, string font, float size, string encoding)">Selects the current font face, size and encoding</s><s f="cpdf_set_font_directories" u="bool cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)">Sets directories to search when using external fonts</s><s f="cpdf_set_font_map_file" u="bool cpdf_set_font_map_file(int pdfdoc, string filename)">Sets fontname to filename translation map when using external fonts</s><s f="cpdf_set_horiz_scaling" u="bool cpdf_set_horiz_scaling(int pdfdoc, float scale)">Sets horizontal scaling of text</s><s f="cpdf_set_keywords" u="bool cpdf_set_keywords(int pdfptr, string keywords)">Fills the keywords field of the info structure</s><s f="cpdf_set_leading" u="bool cpdf_set_leading(int pdfdoc, float distance)">Sets distance between text lines</s><s f="cpdf_set_page_animation" u="bool cpdf_set_page_animation(int pdfdoc, int transition, float duration, float direction, int orientation, int inout)">Sets transition between pages</s><s f="cpdf_set_subject" u="bool cpdf_set_subject(int pdfptr, string subject)">Fills the subject field of the info structure</s><s f="cpdf_set_text_matrix" u="bool cpdf_set_text_matrix(int pdfdoc, arry matrix)">Sets the text matrix</s><s f="cpdf_set_text_pos" u="bool cpdf_set_text_pos(int pdfdoc, float x, float y [, int mode])">Sets the position of text for the next cpdf_show call</s><s f="cpdf_set_text_rendering" u="bool cpdf_set_text_rendering(int pdfdoc, int rendermode)">Determines how text is rendered</s><s f="cpdf_set_text_rise" u="bool cpdf_set_text_rise(int pdfdoc, float value)">Sets the text rise</s><s f="cpdf_set_title" u="bool cpdf_set_title(int pdfptr, string title)">Fills the title field of the info structure</s><s f="cpdf_set_viewer_preferences" u="bool cpdf_set_viewer_preferences(int pdfdoc, array preferences)">How to show the document in the viewer</s><s f="cpdf_set_word_spacing" u="bool cpdf_set_word_spacing(int pdfdoc, float space)">Sets spacing between words</s><s f="cpdf_setdash" u="bool cpdf_setdash(int pdfdoc, long white, long black)">Sets dash pattern</s><s f="cpdf_setflat" u="bool cpdf_setflat(int pdfdoc, float value)">Sets flatness</s><s f="cpdf_setgray" u="bool cpdf_setgray(int pdfdoc, float value)">Sets drawing and filling color to gray value</s><s f="cpdf_setgray_fill" u="bool cpdf_setgray_fill(int pdfdoc, float value)">Sets filling color to gray value</s><s f="cpdf_setgray_stroke" u="bool cpdf_setgray_stroke(int pdfdoc, float value)">Sets drawing color to gray value</s><s f="cpdf_setlinecap" u="bool cpdf_setlinecap(int pdfdoc, int value)">Sets linecap parameter</s><s f="cpdf_setlinejoin" u="bool cpdf_setlinejoin(int pdfdoc, int value)">Sets linejoin parameter</s><s f="cpdf_setlinewidth" u="bool cpdf_setlinewidth(int pdfdoc, float width)">Sets line width</s><s f="cpdf_setmiterlimit" u="bool cpdf_setmiterlimit(int pdfdoc, float value)">Sets miter limit</s><s f="cpdf_setrgbcolor" u="bool cpdf_setrgbcolor(int pdfdoc, float red, float green, float blue)">Sets drawing and filling color to RGB color value</s><s f="cpdf_setrgbcolor_fill" u="bool cpdf_setrgbcolor_fill(int pdfdoc, float red, float green, float blue)">Sets filling color to rgb color value</s><s f="cpdf_setrgbcolor_stroke" u="bool cpdf_setrgbcolor_stroke(int pdfdoc, float red, float green, float blue)">Sets drawing color to RGB color value</s><s f="cpdf_show" u="bool cpdf_show(int pdfdoc, string text)">Output text at current position</s><s f="cpdf_show_xy" u="bool cpdf_show_xy(int pdfdoc, string text, float x-koor, float y-koor [, int mode])">Output text at position</s><s f="cpdf_stringwidth" u="float cpdf_stringwidth(int pdfdoc, string text)">Returns width of text in current font</s><s f="cpdf_stroke" u="bool cpdf_stroke(int pdfdoc)">Draws line along path path</s><s f="cpdf_text" u="bool cpdf_text(int pdfdoc, string text [, float x-koor, float y-koor [, int mode [, float orientation [, int alignmode]]]])">Outputs text</s><s f="cpdf_translate" u="bool cpdf_translate(int pdfdoc, float x, float y)">Sets origin of coordinate system</s><s f="ctype_alnum" u="bool ctype_alnum(mixed c)">Checks for alphanumeric character(s)</s><s f="ctype_alpha" u="bool ctype_alpha(mixed c)">Checks for alphabetic character(s)</s><s f="ctype_cntrl" u="bool ctype_cntrl(mixed c)">Checks for control character(s)</s><s f="ctype_digit" u="bool ctype_digit(mixed c)">Checks for numeric character(s)</s><s f="ctype_graph" u="bool ctype_graph(mixed c)">Checks for any printable character(s) except space</s><s f="ctype_lower" u="bool ctype_lower(mixed c)">Checks for lowercase character(s)</s><s f="ctype_print" u="bool ctype_print(mixed c)">Checks for printable character(s)</s><s f="ctype_punct" u="bool ctype_punct(mixed c)">Checks for any printable character which is not whitespace or an alphanumeric character</s><s f="ctype_space" u="bool ctype_space(mixed c)">Checks for whitespace character(s)</s><s f="ctype_upper" u="bool ctype_upper(mixed c)">Checks for uppercase character(s)</s><s f="ctype_xdigit" u="bool ctype_xdigit(mixed c)">Checks for character(s) representing a hexadecimal digit</s><s f="curl_close" u="void curl_close(resource ch)">Close a CURL session</s><s f="curl_copy_handle" u="resource curl_copy_handle(resource ch)">Copy a cURL handle along with all of it's preferences</s><s f="curl_errno" u="int curl_errno(resource ch)">Return an integer containing the last error number</s><s f="curl_error" u="string curl_error(resource ch)">Return a string contain the last error for the current session</s><s f="curl_exec" u="bool curl_exec(resource ch)">Perform a CURL session</s><s f="curl_getinfo" u="mixed curl_getinfo(resource ch, int opt)">Get information regarding a specific transfer</s><s f="curl_init" u="resource curl_init([string url])">Initialize a CURL session</s><s f="curl_setopt" u="bool curl_setopt(resource ch, string option, mixed value)">Set an option for a CURL transfer</s><s f="curl_version" u="array curl_version([int version])">Return cURL version information.</s><s f="curl_multi_add_handle" u="int curl_multi_add_handle(resource multi, resource ch)">Add a normal cURL handle to a cURL multi handle</s><s f="curl_multi_close" u="void curl_multi_close(resource mh)">Close a set of cURL handles</s><s f="curl_multi_exec" u="int curl_multi_exec(resource mh, int &amp;still_running)">Run the sub-connections of the current cURL handle</s><s f="curl_multi_getcontent" u="string curl_multi_getcontent(resource ch)">Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set</s><s f="curl_multi_info_read" u="array curl_multi_info_read(resource mh)">Get information about the current transfers</s><s f="curl_multi_init" u="resource curl_multi_init(void)">Returns a new cURL multi handle</s><s f="curl_multi_remove_handle" u="int curl_multi_remove_handle(resource mh, resource ch)">Remove a multi handle from a set of cURL handles</s><s f="curl_multi_select" u="int curl_multi_select(resource mh[, double timeout])">Get all the sockets associated with the cURL extension, which can then be "selected"</s><s f="dba_close" u="void dba_close(resource handle)">Closes database</s><s f="dba_delete" u="bool dba_delete(string key, resource handle)">Deletes the entry associated with key     If inifile: remove all other key lines</s><s f="dba_exists" u="bool dba_exists(string key, resource handle)">Checks, if the specified key exists</s><s f="dba_fetch" u="string dba_fetch(string key, [int skip ,] resource handle)">Fetches the data associated with key</s><s f="dba_firstkey" u="string dba_firstkey(resource handle)">Resets the internal key pointer and returns the first key</s><s f="dba_handlers" u="array dba_handlers([bool full_info])">List configured database handlers</s><s f="dba_insert" u="bool dba_insert(string key, string value, resource handle)">If not inifile: Insert value as key, return false, if key exists already      If inifile: Add vakue as key (next instance of key)</s><s f="dba_list" u="array dba_list()">List opened databases</s><s f="dba_nextkey" u="string dba_nextkey(resource handle)">Returns the next key</s><s f="dba_open" u="resource dba_open(string path, string mode [, string handlername, string ...])">Opens path using the specified handler in mode</s><s f="dba_optimize" u="bool dba_optimize(resource handle)">Optimizes (e.g. clean up, vacuum) database</s><s f="dba_popen" u="resource dba_popen(string path, string mode [, string handlername, string ...])">Opens path using the specified handler in mode persistently</s><s f="dba_replace" u="bool dba_replace(string key, string value, resource handle)">Inserts value as key, replaces key, if key exists already     If inifile: remove all other key lines</s><s f="dba_sync" u="bool dba_sync(resource handle)">Synchronizes database</s><s f="dbase_add_record" u="bool dbase_add_record(int identifier, array data)">Adds a record to the database</s><s f="dbase_close" u="bool dbase_close(int identifier)">Closes an open dBase-format database file</s><s f="dbase_create" u="bool dbase_create(string filename, array fields)">Creates a new dBase-format database file</s><s f="dbase_delete_record" u="bool dbase_delete_record(int identifier, int record)">Marks a record to be deleted</s><s f="dbase_get_header_info" u="array dbase_get_header_info(int database_handle)"></s><s f="dbase_get_record" u="array dbase_get_record(int identifier, int record)">Returns an array representing a record from the database</s><s f="dbase_get_record_with_names" u="array dbase_get_record_with_names(int identifier, int record)">Returns an associative array representing a record from the database</s><s f="dbase_numfields" u="int dbase_numfields(int identifier)">Returns the number of fields (columns) in the database</s><s f="dbase_numrecords" u="int dbase_numrecords(int identifier)">Returns the number of records in the database</s><s f="dbase_open" u="int dbase_open(string name, int mode)">Opens a dBase-format database file</s><s f="dbase_pack" u="bool dbase_pack(int identifier)">Packs the database (deletes records marked for deletion)</s><s f="dbase_replace_record" u="bool dbase_replace_record(int identifier, array data, int recnum)">Replaces a record to the database</s><s f="dbx_close" u="int dbx_close(dbx_link_object dbx_link)">Returns success or failure</s><s f="dbx_compare" u="int dbx_compare(array row_x, array row_y, string columnname [, int flags])">Returns row_y[columnname] - row_x[columnname], converted to -1, 0 or 1</s><s f="dbx_connect" u="dbx_link_object dbx_connect(string module_name, string host, string db, string username, string password [, bool persistent])">Returns a dbx_link_object on success and returns 0 on failure</s><s f="dbx_error" u="string dbx_error(dbx_link_object dbx_link)">Returns success or failure</s><s f="dbx_escape_string" u="string dbx_escape_string(dbx_link_object dbx_link, string sz)">Returns escaped string or NULL on error</s><s f="dbx_fetch_row" u="dbx_row dbx_fetch_row(dbx_query_object dbx_q)">Returns a row (index and assoc based on query) on success and returns 0 on failure or no more rows</s><s f="dbx_query" u="dbx_result_object dbx_query(dbx_link_object dbx_link, string sql_statement [, int flags])">Returns a dbx_link_object on success and returns 0 on failure</s><s f="dbx_sort" u="int dbx_sort(object dbx_result, string compare_function_name)">Returns 0 on failure, 1 on success</s><s f="dio_close" u="void dio_close(resource fd)">Close the file descriptor given by fd</s><s f="dio_fcntl" u="mixed dio_fcntl(resource fd, int cmd[, mixed arg])">Perform a c library fcntl on fd</s><s f="dio_open" u="resource dio_open(string filename, int flags[, int mode])">Open a new filename with specified permissions of flags and creation permissions of mode</s><s f="dio_read" u="string dio_read(resource fd[, int n])">Read n bytes from fd and return them, if n is not specified, read 1k</s><s f="dio_seek" u="int dio_seek(resource fd, int pos, int whence)">Seek to pos on fd from whence</s><s f="dio_stat" u="array dio_stat(resource fd)">Get stat information about the file descriptor fd</s><s f="dio_tcsetattr" u="mixed dio_tcsetattr(resource fd,  array args )">Perform a c library tcsetattr on fd</s><s f="dio_truncate" u="bool dio_truncate(resource fd, int offset)">Truncate file descriptor fd to offset bytes</s><s f="dio_write" u="int dio_write(resource fd, string data[, int len])">Write data to fd with optional truncation at length</s><s f="dom_document_xinclude" u="int dom_document_xinclude()">Substitutues xincludes in a DomDocument</s><s f="dom_import_simplexml" u="somNode dom_import_simplexml(sxeobject node)">Get a simplexml_element object from dom to allow for processing</s><s f="exif_imagetype" u="int exif_imagetype(string imagefile)">Get the type of an image</s><s f="exif_read_data" u="array exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])">Reads header data from the JPEG/TIFF image filename and optionally reads the internal thumbnails</s><s f="exif_tagname" u="string exif_tagname(index)">Get headername for index or false if not defined</s><s f="exif_thumbnail" u="string exif_thumbnail(string filename [, &amp;width, &amp;height [, &amp;imagetype]])">Reads the embedded thumbnail</s><s f="fam_cancel_monitor" u="bool fam_cancel_monitor(resource id, resource monitor_id)">Terminate monitoring</s><s f="fam_close" u="void fam_close(resource id)">Close FAM connection</s><s f="fam_monitor_collection" u="resource fam_monitor_collection(resource id, string dirname, int depth, string mask)">Monitor a collection of files in a directory for changes</s><s f="fam_monitor_directory" u="resource fam_monitor_directory(resource id, string dirname)">Monitor a directory for changes</s><s f="fam_monitor_file" u="resource fam_monitor_file(resource id, string filename)">Monitor a regular file for changes</s><s f="fam_next_event" u="array fam_next_event(resource id)">Get next pending FAM event</s><s f="fam_open" u="resource fam_open([string appname])">Open FAM connection</s><s f="fam_pending" u="int fam_pending(resource id)">Check for pending FAM events</s><s f="fam_resume_monitor" u="bool fam_resume_monitor(resource id, resource monitor_id)">Resume suspended monitoring</s><s f="fam_suspend_monitor" u="bool fam_suspend_monitor(resource id, resource monitor_id)">Temporary suspend monitoring</s><s f="fbsql_affected_rows" u="int fbsql_affected_rows([resource link_identifier])">Get the number of rows affected by the last statement</s><s f="fbsql_autocommit" u="bool fbsql_autocommit(resource link_identifier [, bool OnOff])">Turns on auto-commit</s><s f="fbsql_blob_size" u="int fbsql_blob_size(string blob_handle [, resource link_identifier])">Get the size of a BLOB identified by blob_handle</s><s f="fbsql_change_user" u="int fbsql_change_user(string user, string password [, string database [, resource link_identifier]])">Change the user for a session</s><s f="fbsql_clob_size" u="int fbsql_clob_size(string clob_handle [, resource link_identifier])">Get the size of a CLOB identified by clob_handle</s><s f="fbsql_close" u="bool fbsql_close([resource link_identifier])">Close a connection to a database server</s><s f="fbsql_commit" u="bool fbsql_commit([resource link_identifier])">Commit the transaction</s><s f="fbsql_connect" u="resource fbsql_connect([string hostname [, string username [, string password]]])">Create a connection to a database server</s><s f="fbsql_create_blob" u="string fbsql_create_blob(string blob_data [, resource link_identifier])">Create a BLOB in the database for use with an insert or update statement</s><s f="fbsql_create_clob" u="string fbsql_create_clob(string clob_data [, resource link_identifier])">Create a CLOB in the database for use with an insert or update statement</s><s f="fbsql_create_db" u="bool fbsql_create_db(string database_name [, resource link_identifier])">Create a new database on the server</s><s f="fbsql_data_seek" u="bool fbsql_data_seek(int result, int row_number)">Move the internal row counter to the specified row_number</s><s f="fbsql_database" u="string fbsql_database(resource link_identifier [, string database])">Get or set the database name used with a connection</s><s f="fbsql_database_password" u="string fbsql_database_password(resource link_identifier [, string database_password])">Get or set the databsae password used with a connection</s><s f="fbsql_db_query" u="resource fbsql_db_query(string database_name, string query [, resource link_identifier])">Send one or more SQL statements to a specified database on the server</s><s f="fbsql_db_status" u="int fbsql_db_status(string database_name [, resource link_identifier])">Gets the status (Stopped, Starting, Running, Stopping) for a given database</s><s f="fbsql_drop_db" u="int fbsql_drop_db(string database_name [, resource link_identifier])">Drop a database on the server</s><s f="fbsql_errno" u="int fbsql_errno([resource link_identifier])">Returns the last error code</s><s f="fbsql_error" u="string fbsql_error([resource link_identifier])">Returns the last error string</s><s f="fbsql_fetch_array" u="array fbsql_fetch_array(resource result [, int result_type])">Fetches a result row as an array (associative, numeric or both)</s><s f="fbsql_fetch_assoc" u="object fbsql_fetch_assoc(resource result)">Detch a row of data. Returns an assoc array</s><s f="fbsql_fetch_field" u="object fbsql_fetch_field(int result [, int field_index])">Get the field properties for a specified field_index</s><s f="fbsql_fetch_lengths" u="array fbsql_fetch_lengths(int result)">Returns an array of the lengths of each column in the result set</s><s f="fbsql_fetch_object" u="object fbsql_fetch_object(resource result [, int result_type])">Fetch a row of data. Returns an object</s><s f="fbsql_fetch_row" u="array fbsql_fetch_row(resource result)">Fetch a row of data. Returns an indexed array</s><s f="fbsql_field_flags" u="string fbsql_field_flags(int result [, int field_index])">???</s><s f="fbsql_field_len" u="mixed fbsql_field_len(int result [, int field_index])">Get the column length for a specified field_index</s><s f="fbsql_field_name" u="string fbsql_field_name(int result [, int field_index])">Get the column name for a specified field_index</s><s f="fbsql_field_seek" u="bool fbsql_field_seek(int result [, int field_index])">???</s><s f="fbsql_field_table" u="string fbsql_field_table(int result [, int field_index])">Get the table name for a specified field_index</s><s f="fbsql_field_type" u="string fbsql_field_type(int result [, int field_index])">Get the field type for a specified field_index</s><s f="fbsql_free_result" u="bool fbsql_free_result(resource result)">free the memory used to store a result</s><s f="fbsql_get_autostart_info" u="array fbsql_get_autostart_info([resource link_identifier])">???</s><s f="fbsql_hostname" u="string fbsql_hostname(resource link_identifier [, string host_name])">Get or set the host name used with a connection</s><s f="fbsql_insert_id" u="int fbsql_insert_id([resource link_identifier])">Get the internal index for the last insert statement</s><s f="fbsql_list_dbs" u="resource fbsql_list_dbs([resource link_identifier])">Retreive a list of all databases on the server</s><s f="fbsql_list_fields" u="resource fbsql_list_fields(string database_name, string table_name [, resource link_identifier])">Retrieve a list of all fields for the specified database.table</s><s f="fbsql_list_tables" u="resource fbsql_list_tables(string database [, int link_identifier])">Retreive a list of all tables from the specifoied database</s><s f="fbsql_next_result" u="bool fbsql_next_result(int result)">Switch to the next result if multiple results are available</s><s f="fbsql_num_fields" u="int fbsql_num_fields(int result)">Get number of fields in the result set</s><s f="fbsql_num_rows" u="int fbsql_num_rows(int result)">Get number of rows</s><s f="fbsql_password" u="string fbsql_password(resource link_identifier [, string password])">Get or set the user password used with a connection</s><s f="fbsql_pconnect" u="resource fbsql_pconnect([string hostname [, string username [, string password]]])">Create a persistant connection to a database server</s><s f="fbsql_query" u="resource fbsql_query(string query [, resource link_identifier])">Send one or more SQL statements to the server and execute them</s><s f="fbsql_read_blob" u="string fbsql_read_blob(string blob_handle [, resource link_identifier])">Read the BLOB data identified by blob_handle</s><s f="fbsql_read_clob" u="string fbsql_read_clob(string clob_handle [, resource link_identifier])">Read the CLOB data identified by clob_handle</s><s f="fbsql_result" u="mixed fbsql_result(int result [, int row [, mixed field]])">???</s><s f="fbsql_rollback" u="bool fbsql_rollback([resource link_identifier])">Rollback all statments since last commit</s><s f="fbsql_select_db" u="bool fbsql_select_db([string database_name [, resource link_identifier]])">Select the database to open</s><s f="fbsql_set_lob_mode" u="bool fbsql_set_lob_mode(resource result, int lob_mode)">Sets the mode for how LOB data re retreived (actual data or a handle)</s><s f="fbsql_set_password" u="bool fbsql_set_password(resource link_identifier, string user, string password, string old_password)">Change the password for a given user</s><s f="fbsql_set_transaction" u="void fbsql_set_transaction(resource link_identifier, int locking, int isolation)">Sets the transaction locking and isolation</s><s f="fbsql_start_db" u="bool fbsql_start_db(string database_name [, resource link_identifier])">Start a database on the server</s><s f="fbsql_stop_db" u="bool fbsql_stop_db(string database_name [, resource link_identifier])">Stop a database on the server</s><s f="fbsql_table_name" u="string fbsql_table_name(resource result, int index)">Retreive the table name for index after a call to fbsql_list_tables()</s><s f="fbsql_username" u="string fbsql_username(resource link_identifier [, string username])">Get or set the host user used with a connection</s><s f="fbsql_warnings" u="bool fbsql_warnings([int flag])">Enable or disable FrontBase warnings</s><s f="fdf_add_doc_javascript" u="bool fdf_add_doc_javascript(resource fdfdoc, string scriptname, string script)">Add javascript code to the fdf file</s><s f="fdf_add_template" u="bool fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)">Adds a template into the FDF document</s><s f="fdf_close" u="void fdf_close(resource fdfdoc)">Closes the FDF document</s><s f="fdf_create" u="resource fdf_create(void)">Creates a new FDF document</s><s f="fdf_enum_values" u="bool fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])">Call a user defined function for each document value</s><s f="fdf_errno" u="int fdf_errno(void)">Gets error code for last operation</s><s f="fdf_error" u="string fdf_error([int errno])">Gets error description for error code</s><s f="fdf_get_ap" u="bool fdf_get_ap(resource fdfdoc, string fieldname, int face, string filename)">Gets the appearance of a field and creates a PDF document out of it.</s><s f="fdf_get_attachment" u="array fdf_get_attachment(resource fdfdoc, string fieldname, string savepath)">Get attached uploaded file</s><s f="fdf_get_encoding" u="string fdf_get_encoding(resource fdf)">Gets FDF file encoding scheme</s><s f="fdf_get_file" u="string fdf_get_file(resource fdfdoc)">Gets the value of /F key</s><s f="fdf_get_flags" u="int fdf_get_flags(resorce fdfdoc, string fieldname, int whichflags)">Gets the flags of a field</s><s f="fdf_get_opt" u="mixed fdf_get_opt(resource fdfdof, string fieldname [, int element])">Gets a value from the opt array of a field</s><s f="fdf_get_status" u="string fdf_get_status(resource fdfdoc)">Gets the value of /Status key</s><s f="fdf_get_value" u="string fdf_get_value(resource fdfdoc, string fieldname [, int which])">Gets the value of a field as string</s><s f="fdf_get_version" u="string fdf_get_version([resource fdfdoc])">Gets version number for FDF api or file</s><s f="fdf_header" u="void fdf_header(void)">Set FDF specific HTTP headers</s><s f="fdf_next_field_name" u="string fdf_next_field_name(resource fdfdoc [, string fieldname])">Gets the name of the next field name or the first field name</s><s f="fdf_open" u="resource fdf_open(string filename)">Opens a new FDF document</s><s f="fdf_open_string" u="resource fdf_open_string(string fdf_data)">Opens a new FDF document from string</s><s f="fdf_remove_item" u="bool fdf_remove_item(resource fdfdoc, string fieldname, int item)">Sets target frame for form</s><s f="fdf_save" u="bool fdf_save(resource fdfdoc [, string filename])">Writes out the FDF file</s><s f="fdf_save_string" u="string fdf_save_string(resource fdfdoc)">Returns the FDF file as a string</s><s f="fdf_set_ap" u="bool fdf_set_ap(resource fdfdoc, string fieldname, int face, string filename, int pagenr)">Sets the appearence of a field</s><s f="fdf_set_encoding" u="bool fdf_set_encoding(resource fdf_document, string encoding)">Sets FDF encoding (either "Shift-JIS" or "Unicode")</s><s f="fdf_set_file" u="bool fdf_set_file(resource fdfdoc, string filename [, string target_frame])">Sets the value of /F key</s><s f="fdf_set_flags" u="bool fdf_set_flags(resource fdfdoc, string fieldname, int whichflags, int newflags)">Sets flags for a field in the FDF document</s><s f="fdf_set_javascript_action" u="bool fdf_set_javascript_action(resource fdfdoc, string fieldname, int whichtrigger, string script)">Sets the javascript action for a field</s><s f="fdf_set_on_import_javascript" u="bool fdf_set_on_import_javascript(resource fdfdoc, string script [, bool before_data_import])">Adds javascript code to be executed when Acrobat opens the FDF</s><s f="fdf_set_opt" u="bool fdf_set_opt(resource fdfdoc, string fieldname, int element, string value, string name)">Sets a value in the opt array for a field</s><s f="fdf_set_status" u="bool fdf_set_status(resource fdfdoc, string status)">Sets the value of /Status key</s><s f="fdf_set_submit_form_action" u="bool fdf_set_submit_form_action(resource fdfdoc, string fieldname, int whichtrigger, string url, int flags)">Sets the submit form action for a field</s><s f="fdf_set_target_frame" u="bool fdf_set_target_frame(resource fdfdoc, string target)">Sets target frame for form</s><s f="fdf_set_value" u="bool fdf_set_value(resource fdfdoc, string fieldname, mixed value [, int isname])">Sets the value of a field</s><s f="fdf_set_version" u="bool fdf_set_version(resourece fdfdoc, string version)">Sets FDF version for a file</s><s f="filepro" u="bool filepro(string directory)">Read and verify the map file</s><s f="filepro_fieldcount" u="int filepro_fieldcount(void)">Find out how many fields are in a filePro database</s><s f="filepro_fieldname" u="string filepro_fieldname(int fieldnumber)">Gets the name of a field</s><s f="filepro_fieldtype" u="string filepro_fieldtype(int field_number)">Gets the type of a field</s><s f="filepro_fieldwidth" u="int filepro_fieldwidth(int field_number)">Gets the width of a field</s><s f="filepro_retrieve" u="string filepro_retrieve(int row_number, int field_number)">Retrieves data from a filePro database</s><s f="filepro_rowcount" u="int filepro_rowcount(void)">Find out how many rows are in a filePro database</s><s f="ftp_alloc" u="bool ftp_alloc(resource stream, int size[, &amp;response])">Attempt to allocate space on the remote FTP server</s><s f="ftp_cdup" u="bool ftp_cdup(resource stream)">Changes to the parent directory</s><s f="ftp_chdir" u="bool ftp_chdir(resource stream, string directory)">Changes directories</s><s f="ftp_chmod" u="int ftp_chmod(resource stream, int mode, string filename)">Sets permissions on a file</s><s f="ftp_close" u="bool ftp_close(resource stream)">Closes the FTP stream</s><s f="ftp_connect" u="resource ftp_connect(string host [, int port [, int timeout]])">Opens a FTP stream</s><s f="ftp_delete" u="bool ftp_delete(resource stream, string file)">Deletes a file</s><s f="ftp_exec" u="bool ftp_exec(resource stream, string command)">Requests execution of a program on the FTP server</s><s f="ftp_fget" u="bool ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])">Retrieves a file from the FTP server and writes it to an open file</s><s f="ftp_fput" u="bool ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])">Stores a file from an open file to the FTP server</s><s f="ftp_get" u="bool ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])">Retrieves a file from the FTP server and writes it to a local file</s><s f="ftp_get_option" u="mixed ftp_get_option(resource stream, int option)">Gets an FTP option</s><s f="ftp_login" u="bool ftp_login(resource stream, string username, string password)">Logs into the FTP server</s><s f="ftp_mdtm" u="int ftp_mdtm(resource stream, string filename)">Returns the last modification time of the file, or -1 on error</s><s f="ftp_mkdir" u="string ftp_mkdir(resource stream, string directory)">Creates a directory and returns the absolute path for the new directory or false on error</s><s f="ftp_nb_continue" u="int ftp_nb_continue(resource stream)">Continues retrieving/sending a file nbronously</s><s f="ftp_nb_fget" u="int ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])">Retrieves a file from the FTP server asynchronly and writes it to an open file</s><s f="ftp_nb_fput" u="int ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])">Stores a file from an open file to the FTP server nbronly</s><s f="ftp_nb_get" u="int ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])">Retrieves a file from the FTP server nbhronly and writes it to a local file</s><s f="ftp_nb_put" u="int ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])">Stores a file on the FTP server</s><s f="ftp_nlist" u="array ftp_nlist(resource stream, string directory)">Returns an array of filenames in the given directory</s><s f="ftp_pasv" u="bool ftp_pasv(resource stream, bool pasv)">Turns passive mode on or off</s><s f="ftp_put" u="bool ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])">Stores a file on the FTP server</s><s f="ftp_pwd" u="string ftp_pwd(resource stream)">Returns the present working directory</s><s f="ftp_raw" u="array ftp_raw(resource stream, string command)">Sends a literal command to the FTP server</s><s f="ftp_rawlist" u="array ftp_rawlist(resource stream, string directory [, bool recursive])">Returns a detailed listing of a directory as an array of output lines</s><s f="ftp_rename" u="bool ftp_rename(resource stream, string src, string dest)">Renames the given file to a new path</s><s f="ftp_rmdir" u="bool ftp_rmdir(resource stream, string directory)">Removes a directory</s><s f="ftp_set_option" u="bool ftp_set_option(resource stream, int option, mixed value)">Sets an FTP option</s><s f="ftp_site" u="bool ftp_site(resource stream, string cmd)">Sends a SITE command to the server</s><s f="ftp_size" u="int ftp_size(resource stream, string filename)">Returns the size of the file, or -1 on error</s><s f="ftp_ssl_connect" u="resource ftp_ssl_connect(string host [, int port [, int timeout]])">Opens a FTP-SSL stream</s><s f="ftp_systype" u="string ftp_systype(resource stream)">Returns the system type identifier</s><s f="gd_info" u="array gd_info()"></s><s f="imagealphablending" u="bool imagealphablending(resource im, bool on)">Turn alpha blending mode on or off for the given image</s><s f="imageantialias" u="bool imageantialias(resource im, bool on)">Should antialiased functions used or not</s><s f="imagearc" u="bool imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)">Draw a partial ellipse</s><s f="imagechar" u="bool imagechar(resource im, int font, int x, int y, string c, int col)">Draw a character</s><s f="imagecharup" u="bool imagecharup(resource im, int font, int x, int y, string c, int col)">Draw a character rotated 90 degrees counter-clockwise</s><s f="imagecolorallocate" u="int imagecolorallocate(resource im, int red, int green, int blue)">Allocate a color for an image</s><s f="imagecolorallocatealpha" u="int imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)">Allocate a color with an alpha level.  Works for true color and palette based images</s><s f="imagecolorat" u="int imagecolorat(resource im, int x, int y)">Get the index of the color of a pixel</s><s f="imagecolorclosest" u="int imagecolorclosest(resource im, int red, int green, int blue)">Get the index of the closest color to the specified color</s><s f="imagecolorclosestalpha" u="int imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)">Find the closest matching colour with alpha transparency</s><s f="imagecolorclosesthwb" u="int imagecolorclosesthwb(resource im, int red, int green, int blue)">Get the index of the color which has the hue, white and blackness nearest to the given color</s><s f="imagecolordeallocate" u="bool imagecolordeallocate(resource im, int index)">De-allocate a color for an image</s><s f="imagecolorexact" u="int imagecolorexact(resource im, int red, int green, int blue)">Get the index of the specified color</s><s f="imagecolorexactalpha" u="int imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)">Find exact match for colour with transparency</s><s f="imagecolormatch" u="bool imagecolormatch(resource im1, resource im2)">Makes the colors of the palette version of an image more closely match the true color version</s><s f="imagecolorresolve" u="int imagecolorresolve(resource im, int red, int green, int blue)">Get the index of the specified color or its closest possible alternative</s><s f="imagecolorresolvealpha" u="int imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)">Resolve/Allocate a colour with an alpha level.  Works for true colour and palette based images</s><s f="imagecolorset" u="void imagecolorset(resource im, int col, int red, int green, int blue)">Set the color for the specified palette index</s><s f="imagecolorsforindex" u="array imagecolorsforindex(resource im, int col)">Get the colors for an index</s><s f="imagecolorstotal" u="int imagecolorstotal(resource im)">Find out the number of colors in an image's palette</s><s f="imagecolortransparent" u="int imagecolortransparent(resource im [, int col])">Define a color as transparent</s><s f="imagecopy" u="bool imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)">Copy part of an image</s><s f="imagecopymerge" u="bool imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)">Merge one part of an image with another</s><s f="imagecopymergegray" u="bool imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)">Merge one part of an image with another</s><s f="imagecopyresampled" u="bool imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)">Copy and resize part of an image using resampling to help ensure clarity</s><s f="imagecopyresized" u="bool imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)">Copy and resize part of an image</s><s f="imagecreate" u="resource imagecreate(int x_size, int y_size)">Create a new image</s><s f="imagecreatefromgd" u="resource imagecreatefromgd(string filename)">Create a new image from GD file or URL</s><s f="imagecreatefromgif" u="resource imagecreatefromgif(string filename)">Create a new image from GIF file or URL</s><s f="imagecreatefromjpeg" u="resource imagecreatefromjpeg(string filename)">Create a new image from JPEG file or URL</s><s f="imagecreatefrompng" u="resource imagecreatefrompng(string filename)">Create a new image from PNG file or URL</s><s f="imagecreatefromstring" u="resource imagecreatefromstring(string image)">Create a new image from the image stream in the string</s><s f="imagecreatefromwbmp" u="resource imagecreatefromwbmp(string filename)">Create a new image from WBMP file or URL</s><s f="imagecreatefromxbm" u="resource imagecreatefromxbm(string filename)">Create a new image from XBM file or URL</s><s f="imagecreatefromxpm" u="resource imagecreatefromxpm(string filename)">Create a new image from XPM file or URL</s><s f="imagecreatetruecolor" u="resource imagecreatetruecolor(int x_size, int y_size)">Create a new true color image</s><s f="imagedashedline" u="bool imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)">Draw a dashed line</s><s f="imagedestroy" u="bool imagedestroy(resource im)">Destroy an image</s><s f="imageellipse" u="bool imageellipse(resource im, int cx, int cy, int w, int h, int color)">Draw an ellipse</s><s f="imagefill" u="bool imagefill(resource im, int x, int y, int col)">Flood fill</s><s f="imagefilledarc" u="bool imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)">Draw a filled partial ellipse</s><s f="imagefilledellipse" u="bool imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)">Draw an ellipse</s><s f="imagefilledpolygon" u="bool imagefilledpolygon(resource im, array point, int num_points, int col)">Draw a filled polygon</s><s f="imagefilledrectangle" u="bool imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)">Draw a filled rectangle</s><s f="imagefilltoborder" u="bool imagefilltoborder(resource im, int x, int y, int border, int col)">Flood fill to specific color</s><s f="imagefilter" u="bool imagefilter(resource src_im, int filtertype, [args] )">Applies Filter an image using a custom angle</s><s f="imagefontheight" u="int imagefontheight(int font)">Get font height</s><s f="imagefontwidth" u="int imagefontwidth(int font)">Get font width</s><s f="imageftbbox" u="array imageftbbox(int size, int angle, string font_file, string text[, array extrainfo])">Give the bounding box of a text using fonts via freetype2</s><s f="imagefttext" u="array imagefttext(resource im, int size, int angle, int x, int y, int col, string font_file, string text, [array extrainfo])">Write text to the image using fonts via freetype2</s><s f="imagegammacorrect" u="bool imagegammacorrect(resource im, float inputgamma, float outputgamma)">Apply a gamma correction to a GD image</s><s f="imagegd" u="bool imagegd(resource im [, string filename])">Output GD image to browser or file</s><s f="imagegif" u="bool imagegif(resource im [, string filename])">Output GIF image to browser or file</s><s f="imageinterlace" u="int imageinterlace(resource im [, int interlace])">Enable or disable interlace</s><s f="imageistruecolor" u="bool imageistruecolor(resource im)">return true if the image uses truecolor</s><s f="imagejpeg" u="bool imagejpeg(resource im [, string filename [, int quality]])">Output JPEG image to browser or file</s><s f="imagelayereffect" u="bool imagelayereffect(resource im, int effect)">Set the alpha blending flag to use the bundled libgd layering effects</s><s f="imageline" u="bool imageline(resource im, int x1, int y1, int x2, int y2, int col)">Draw a line</s><s f="imageloadfont" u="int imageloadfont(string filename)">Load a new font</s><s f="imagepalettecopy" u="void imagepalettecopy(resource dst, resource src)">Copy the palette from the src image onto the dst image</s><s f="imagepng" u="bool imagepng(resource im [, string filename])">Output PNG image to browser or file</s><s f="imagepolygon" u="bool imagepolygon(resource im, array point, int num_points, int col)">Draw a polygon</s><s f="imagepsbbox" u="array imagepsbbox(string text, resource font, int size [, int space, int tightness, int angle])">Return the bounding box needed by a string if rasterized</s><s f="imagepscopyfont" u="int imagepscopyfont(int font_index)">Make a copy of a font for purposes like extending or reenconding</s><s f="imagepsencodefont" u="bool imagepsencodefont(resource font_index, string filename)">To change a fonts character encoding vector</s><s f="imagepsextendfont" u="bool imagepsextendfont(resource font_index, float extend)">Extend or or condense (if extend &lt; 1) a font</s><s f="imagepsfreefont" u="bool imagepsfreefont(resource font_index)">Free memory used by a font</s><s f="imagepsloadfont" u="resource imagepsloadfont(string pathname)">Load a new font from specified file</s><s f="imagepsslantfont" u="bool imagepsslantfont(resource font_index, float slant)">Slant a font</s><s f="imagepstext" u="array imagepstext(resource image, string text, resource font, int size, int xcoord, int ycoord [, int space, int tightness, float angle, int antialias])">Rasterize a string over an image</s><s f="imagerectangle" u="bool imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)">Draw a rectangle</s><s f="imagerotate" u="resource imagerotate(resource src_im, float angle, int bgdcolor)">Rotate an image using a custom angle</s><s f="imagesavealpha" u="bool imagesavealpha(resource im, bool on)">Include alpha channel to a saved image</s><s f="imagesetbrush" u="bool imagesetbrush(resource image, resource brush)">Set the brush image to $brush when filling $image with the "IMG_COLOR_BRUSHED" color</s><s f="imagesetpixel" u="bool imagesetpixel(resource im, int x, int y, int col)">Set a single pixel</s><s f="imagesetstyle" u="bool imagesetstyle(resource im, array styles)">Set the line drawing styles for use with imageline and IMG_COLOR_STYLED.</s><s f="imagesetthickness" u="bool imagesetthickness(resource im, int thickness)">Set line thickness for drawing lines, ellipses, rectangles, polygons etc.</s><s f="imagesettile" u="bool imagesettile(resource image, resource tile)">Set the tile image to $tile when filling $image with the "IMG_COLOR_TILED" color</s><s f="imagestring" u="bool imagestring(resource im, int font, int x, int y, string str, int col)">Draw a string horizontally</s><s f="imagestringup" u="bool imagestringup(resource im, int font, int x, int y, string str, int col)">Draw a string vertically - rotated 90 degrees counter-clockwise</s><s f="imagesx" u="int imagesx(resource im)">Get image width</s><s f="imagesy" u="int imagesy(resource im)">Get image height</s><s f="imagetruecolortopalette" u="void imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)">Convert a true colour image to a palette based image with a number of colours, optionally using dithering.</s><s f="imagettfbbox" u="array imagettfbbox(int size, int angle, string font_file, string text)">Give the bounding box of a text using TrueType fonts</s><s f="imagettftext" u="array imagettftext(resource im, int size, int angle, int x, int y, int col, string font_file, string text)">Write text to the image using a TrueType font</s><s f="imagetypes" u="int imagetypes(void)">Return the types of images supported in a bitfield - 1=GIF, 2=JPEG, 4=PNG, 8=WBMP, 16=XPM</s><s f="imagewbmp" u="bool imagewbmp(resource im [, string filename, [, int foreground]])">Output WBMP image to browser or file</s><s f="imagexbm" u="int imagexbm(int im, string filename [, int foreground])">Output XBM image to browser or file</s><s f="bindtextdomain" u="string bindtextdomain(string domain_name, string dir)">Bind to the text domain domain_name, looking for translations in dir. Returns the current domain</s><s f="dcgettext" u="string dcgettext(string domain_name, string msgid, long category)">Return the translation of msgid for domain_name and category, or msgid unaltered if a translation does not exist</s><s f="dgettext" u="string dgettext(string domain_name, string msgid)">Return the translation of msgid for domain_name, or msgid unaltered if a translation does not exist</s><s f="gettext" u="string gettext(string msgid)">Return the translation of msgid for the current domain, or msgid unaltered if a translation does not exist</s><s f="ngettext" u="string ngettext(string MSGID1, string MSGID2, int N)">Plural version of gettext()</s><s f="textdomain" u="string textdomain(string domain)">Set the textdomain to "domain". Returns the current domain</s><s f="gmp_abs" u="resource gmp_abs(resource a)">Calculates absolute value</s><s f="gmp_add" u="resource gmp_add(resource a, resource b)">Add a and b</s><s f="gmp_and" u="resource gmp_and(resource a, resource b)">Calculates logical AND of a and b</s><s f="gmp_clrbit" u="void gmp_clrbit(resource &amp;a, int index)">Clears bit in a</s><s f="gmp_cmp" u="int gmp_cmp(resource a, resource b)">Compares two numbers</s><s f="gmp_com" u="resource gmp_com(resource a)">Calculates one's complement of a</s><s f="gmp_div_q" u="resource gmp_div_q(resource a, resource b [, int round])">Divide a by b, returns quotient only</s><s f="gmp_div_qr" u="array gmp_div_qr(resource a, resource b [, int round])">Divide a by b, returns quotient and reminder</s><s f="gmp_div_r" u="resource gmp_div_r(resource a, resource b [, int round])">Divide a by b, returns reminder only</s><s f="gmp_divexact" u="resource gmp_divexact(resource a, resource b)">Divide a by b using exact division algorithm</s><s f="gmp_fact" u="resource gmp_fact(int a)">Calculates factorial function</s><s f="gmp_gcd" u="resource gmp_gcd(resource a, resource b)">Computes greatest common denominator (gcd) of a and b</s><s f="gmp_gcdext" u="array gmp_gcdext(resource a, resource b)">Computes G, S, and T, such that AS      BT = G = `gcd' (A, B)</s><s f="gmp_hamdist" u="int gmp_hamdist(resource a, resource b)">Calculates hamming distance between a and b</s><s f="gmp_init" u="resource gmp_init(mixed number [, int base])">Initializes GMP number</s><s f="gmp_intval" u="int gmp_intval(resource gmpnumber)">Gets signed long value of GMP number</s><s f="gmp_invert" u="resource gmp_invert(resource a, resource b)">Computes the inverse of a modulo b</s><s f="gmp_jacobi" u="int gmp_jacobi(resource a, resource b)">Computes Jacobi symbol</s><s f="gmp_legendre" u="int gmp_legendre(resource a, resource b)">Computes Legendre symbol</s><s f="gmp_mod" u="resource gmp_mod(resource a, resource b)">Computes a modulo b</s><s f="gmp_mul" u="resource gmp_mul(resource a, resource b)">Multiply a and b</s><s f="gmp_neg" u="resource gmp_neg(resource a)">Negates a number</s><s f="gmp_or" u="resource gmp_or(resource a, resource b)">Calculates logical OR of a and b</s><s f="gmp_perfect_square" u="bool gmp_perfect_square(resource a)">Checks if a is an exact square</s><s f="gmp_popcount" u="int gmp_popcount(resource a)">Calculates the population count of a</s><s f="gmp_pow" u="resource gmp_pow(resource base, int exp)">Raise base to power exp</s><s f="gmp_powm" u="resource gmp_powm(resource base, resource exp, resource mod)">Raise base to power exp and take result modulo mod</s><s f="gmp_prob_prime" u="int gmp_prob_prime(resource a[, int reps])">Checks if a is "probably prime"</s><s f="gmp_random" u="resource gmp_random([int limiter])">Gets random number</s><s f="gmp_setbit" u="void gmp_setbit(resource &amp;a, int index[, bool set_clear])">Sets or clear bit in a</s><s f="gmp_sign" u="int gmp_sign(resource a)">Gets the sign of the number</s><s f="gmp_sqrt" u="resource gmp_sqrt(resource a)">Takes integer part of square root of a</s><s f="gmp_sqrtrem" u="array gmp_sqrtrem(resource a)">Square root with remainder</s><s f="gmp_strval" u="string gmp_strval(resource gmpnumber [, int base])">Gets string representation of GMP number</s><s f="gmp_sub" u="resource gmp_sub(resource a, resource b)">Subtract b from a</s><s f="gmp_xor" u="resource gmp_xor(resource a, resource b)">Calculates logical exclusive OR of a and b</s><s f="iconv" u="string iconv(string in_charset, string out_charset, string str)">Returns str converted to the out_charset character set</s><s f="iconv_get_encoding" u="mixed iconv_get_encoding([string type])">Get internal encoding and output encoding for ob_iconv_handler()</s><s f="iconv_mime_decode" u="string iconv_mime_decode(string encoded_string [, int mode, string charset])">Decodes a mime header field</s><s f="iconv_mime_decode_headers" u="array iconv_mime_decode_headers(string headers [, int mode, string charset])">Decodes multiple mime header fields</s><s f="iconv_mime_encode" u="string iconv_mime_encode(string field_name, string field_value, [, array preference])">Composes a mime header field with field_name and field_value in a specified scheme</s><s f="iconv_set_encoding" u="bool iconv_set_encoding(string type, string charset)">Sets internal encoding and output encoding for ob_iconv_handler()</s><s f="iconv_strlen" u="int iconv_strlen(string str [, string charset])">Returns the character count of str</s><s f="iconv_strpos" u="int iconv_strpos(string haystack, string needle, int offset [, string charset])">Finds position of first occurrence of needle within part of haystack beginning with offset</s><s f="iconv_strrpos" u="int iconv_strrpos(string haystack, string needle [, string charset])">Finds position of last occurrence of needle within part of haystack beginning with offset</s><s f="iconv_substr" u="string iconv_substr(string str, int offset, [int length, string charset])">Returns specified part of a string</s><s f="ob_iconv_handler" u="string ob_iconv_handler(string contents, int status)">Returns str in output buffer converted to the iconv.output_encoding character set</s><s f="imap_alerts" u="array imap_alerts(void)">Returns an array of all IMAP alerts that have been generated since the last page load or since the last imap_alerts() call, whichever came last. The alert stack is cleared after imap_alerts() is called.</s><s f="imap_append" u="bool imap_append(resource stream_id, string folder, string message [, string options])">Append a new message to a specified mailbox</s><s f="imap_binary" u="string imap_binary(string text)">Convert an 8bit string to a base64 string</s><s f="imap_body" u="string imap_body(resource stream_id, int msg_no [, int options])">Read the message body</s><s f="imap_bodystruct" u="object imap_bodystruct(resource stream_id, int msg_no, int section)">Read the structure of a specified body section of a specific message</s><s f="imap_check" u="object imap_check(resource stream_id)">Get mailbox properties</s><s f="imap_clearflag_full" u="bool imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])">Clears flags on messages</s><s f="imap_close" u="bool imap_close(resource stream_id [, int options])">Close an IMAP stream</s><s f="imap_createmailbox" u="bool imap_createmailbox(resource stream_id, string mailbox)">Create a new mailbox</s><s f="imap_delete" u="bool imap_delete(resource stream_id, int msg_no [, int options])">Mark a message for deletion</s><s f="imap_deletemailbox" u="bool imap_deletemailbox(resource stream_id, string mailbox)">Delete a mailbox</s><s f="imap_errors" u="array imap_errors(void)">Returns an array of all IMAP errors generated since the last page load, or since the last imap_errors() call, whichever came last. The error stack is cleared after imap_errors() is called.</s><s f="imap_expunge" u="bool imap_expunge(resource stream_id)">Permanently delete all messages marked for deletion</s><s f="imap_fetch_overview" u="array imap_fetch_overview(resource stream_id, int msg_no [, int options])">Read an overview of the information in the headers of the given message sequence</s><s f="imap_fetchbody" u="string imap_fetchbody(resource stream_id, int msg_no, int section [, int options])">Get a specific body section</s><s f="imap_fetchheader" u="string imap_fetchheader(resource stream_id, int msg_no [, int options])">Get the full unfiltered header for a message</s><s f="imap_fetchstructure" u="object imap_fetchstructure(resource stream_id, int msg_no [, int options])">Read the full structure of a message</s><s f="imap_get_quota" u="array imap_get_quota(resource stream_id, string qroot)">Returns the quota set to the mailbox account qroot</s><s f="imap_get_quotaroot" u="array imap_get_quotaroot(resource stream_id, string mbox)">Returns the quota set to the mailbox account mbox</s><s f="imap_getacl" u="array imap_getacl(resource stream_id, string mailbox)">Gets the ACL for a given mailbox</s><s f="imap_getmailboxes" u="array imap_getmailboxes(resource stream_id, string ref, string pattern)">Reads the list of mailboxes and returns a full array of objects containing name, attributes, and delimiter</s><s f="imap_getsubscribed" u="array imap_getsubscribed(resource stream_id, string ref, string pattern)">Return a list of subscribed mailboxes, in the same format as imap_getmailboxes()</s><s f="imap_headerinfo" u="object imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])">Read the headers of the message</s><s f="imap_headers" u="array imap_headers(resource stream_id)">Returns headers for all messages in a mailbox</s><s f="imap_last_error" u="string imap_last_error(void)">Returns the last error that was generated by an IMAP function. The error stack is NOT cleared after this call.</s><s f="imap_list" u="array imap_list(resource stream_id, string ref, string pattern)">Read the list of mailboxes</s><s f="imap_lsub" u="array imap_lsub(resource stream_id, string ref, string pattern)">Return a list of subscribed mailboxes</s><s f="imap_mail" u="bool imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])">Send an email message</s><s f="imap_mail_compose" u="string imap_mail_compose(array envelope, array body)">Create a MIME message based on given envelope and body sections</s><s f="imap_mail_copy" u="bool imap_mail_copy(resource stream_id, int msg_no, string mailbox [, int options])">Copy specified message to a mailbox</s><s f="imap_mail_move" u="bool imap_mail_move(resource stream_id, int msg_no, string mailbox [, int options])">Move specified message to a mailbox</s><s f="imap_mailboxmsginfo" u="object imap_mailboxmsginfo(resource stream_id)">Returns info about the current mailbox</s><s f="imap_mime_header_decode" u="array imap_mime_header_decode(string str)">Decode mime header element in accordance with RFC 2047 and return array of objects containing 'charset' encoding and decoded 'text'</s><s f="imap_msgno" u="int imap_msgno(resource stream_id, int unique_msg_id)">Get the sequence number associated with a UID</s><s f="imap_num_msg" u="int imap_num_msg(resource stream_id)">Gives the number of messages in the current mailbox</s><s f="imap_num_recent" u="int imap_num_recent(resource stream_id)">Gives the number of recent messages in current mailbox</s><s f="imap_open" u="resource imap_open(string mailbox, string user, string password [, int options])">Open an IMAP stream to a mailbox</s><s f="imap_ping" u="bool imap_ping(resource stream_id)">Check if the IMAP stream is still active</s><s f="imap_qprint" u="string imap_qprint(string text)">Convert a quoted-printable string to an 8-bit string</s><s f="imap_renamemailbox" u="bool imap_renamemailbox(resource stream_id, string old_name, string new_name)">Rename a mailbox</s><s f="imap_reopen" u="bool imap_reopen(resource stream_id, string mailbox [, int options])">Reopen an IMAP stream to a new mailbox</s><s f="imap_scan" u="array imap_scan(resource stream_id, string ref, string pattern, string content)">Read list of mailboxes containing a certain string</s><s f="imap_search" u="array imap_search(resource stream_id, string criteria [, int options [, string charset]])">Return a list of messages matching the given criteria</s><s f="imap_set_quota" u="bool imap_set_quota(resource stream_id, string qroot, int mailbox_size)">Will set the quota for qroot mailbox</s><s f="imap_setacl" u="bool imap_setacl(resource stream_id, string mailbox, string id, string rights)">Sets the ACL for a given mailbox</s><s f="imap_setflag_full" u="bool imap_setflag_full(resource stream_id, string sequence, string flag [, int options])">Sets flags on messages</s><s f="imap_sort" u="array imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])">Sort an array of message headers, optionally including only messages that meet specified criteria.</s><s f="imap_status" u="object imap_status(resource stream_id, string mailbox, int options)">Get status info from a mailbox</s><s f="imap_subscribe" u="bool imap_subscribe(resource stream_id, string mailbox)">Subscribe to a mailbox</s><s f="imap_thread" u="array imap_thread(resource stream_id [, int options])">Return threaded by REFERENCES tree</s><s f="imap_timeout" u="mixed imap_timeout(int timeout_type [, int timeout])">Set or fetch imap timeout</s><s f="imap_uid" u="int imap_uid(resource stream_id, int msg_no)">Get the unique message id associated with a standard sequential message number</s><s f="imap_undelete" u="bool imap_undelete(resource stream_id, int msg_no)">Remove the delete flag from a message</s><s f="imap_unsubscribe" u="bool imap_unsubscribe(resource stream_id, string mailbox)">Unsubscribe from a mailbox</s><s f="ifx_affected_rows" u="int ifx_affected_rows(resource resultid)">Returns the number of rows affected by query identified by resultid</s><s f="ifx_blobinfile_mode" u="bool ifx_blobinfile_mode(int mode)">Sets the default blob-mode for all select-queries</s><s f="ifx_byteasvarchar" u="bool ifx_byteasvarchar(int mode)">Sets the default byte-mode for all select-queries</s><s f="ifx_close" u="bool ifx_close([resource connid])">Close informix connection</s><s f="ifx_connect" u="resource ifx_connect([string database [, string userid [, string password]]])">Connects to database using userid/password, returns connection id</s><s f="ifx_copy_blob" u="int ifx_copy_blob(int bid)">Duplicates the given blob-object</s><s f="ifx_create_blob" u="int ifx_create_blob(int type, int mode, string param)">Creates a blob-object</s><s f="ifx_create_char" u="int ifx_create_char(string param)">Creates a char-object</s><s f="ifx_do" u="bool ifx_do(resource resultid)">Executes a previously prepared query or opens a cursor for it</s><s f="ifx_error" u="string ifx_error([resource connection_id])">Returns the Informix error codes (SQLSTATE &amp; SQLCODE)</s><s f="ifx_errormsg" u="string ifx_errormsg([int errorcode])">Returns the Informix errormessage associated with</s><s f="ifx_fetch_row" u="array ifx_fetch_row(resource resultid [, mixed position])">Fetches the next row or &lt;position&gt; row if using a scroll cursor</s><s f="ifx_fieldproperties" u="array ifx_fieldproperties(resource resultid)">Returns an associative for query &lt;resultid&gt; array with fieldnames as key</s><s f="ifx_fieldtypes" u="array ifx_fieldtypes(resource resultid)">Returns an associative array with fieldnames as key for query &lt;resultid&gt;</s><s f="ifx_free_blob" u="int ifx_free_blob(int bid)">Deletes the blob-object</s><s f="ifx_free_char" u="bool ifx_free_char(int bid)">Deletes the char-object</s><s f="ifx_free_result" u="bool ifx_free_result(resource resultid)">Releases resources for query associated with resultid</s><s f="ifx_get_blob" u="string ifx_get_blob(int bid)">Returns the content of the blob-object</s><s f="ifx_get_char" u="string ifx_get_char(int bid)">Returns the content of the char-object</s><s f="ifx_getsqlca" u="array ifx_getsqlca(resource resultid)">Returns the sqlerrd[] fields of the sqlca struct for query resultid</s><s f="ifx_htmltbl_result" u="int ifx_htmltbl_result(resource resultid [, string htmltableoptions])">Formats all rows of the resultid query into a html table</s><s f="ifx_nullformat" u="bool ifx_nullformat(int mode)">Sets the default return value of a NULL-value on a fetch-row</s><s f="ifx_num_fields" u="int ifx_num_fields(resource resultid)">Returns the number of columns in query resultid</s><s f="ifx_num_rows" u="int ifx_num_rows(resource resultid)">Returns the number of rows already fetched for query identified by resultid</s><s f="ifx_pconnect" u="resource ifx_pconnect([string database [, string userid [, string password]]])">Connects to database using userid/password, returns connection id</s><s f="ifx_prepare" u="resource ifx_prepare(string query, resource connid [, int cursortype] [, array idarray])">Prepare a query on a given connection</s><s f="ifx_query" u="resource ifx_query(string query, resource connid [, int cursortype] [, array idarray])">Perform a query on a given connection</s><s f="ifx_textasvarchar" u="bool ifx_textasvarchar(int mode)">Sets the default text-mode for all select-queries</s><s f="ifx_update_blob" u="int ifx_update_blob(int bid, string content)">Updates the content of the blob-object</s><s f="ifx_update_char" u="bool ifx_update_char(int bid, string content)">Updates the content of the char-object</s><s f="ifxus_close_slob" u="bool ifxus_close_slob(int bid)">Deletes the slob-object</s><s f="ifxus_create_slob" u="int ifxus_create_slob(int mode)">Creates a slob-object and opens it</s><s f="ifxus_free_slob" u="bool ifxus_free_slob(int bid)">Deletes the slob-object</s><s f="ifxus_open_slob" u="int ifxus_open_slob(int bid, int mode)">Opens an slob-object</s><s f="ifxus_read_slob" u="string ifxus_read_slob(int bid, int nbytes)">Reads nbytes of the slob-object</s><s f="ifxus_seek_slob" u="int ifxus_seek_slob(int bid, int mode, long offset)">Sets the current file or seek position of an open slob-object</s><s f="ifxus_tell_slob" u="int ifxus_tell_slob(int bid)">Returns the current file or seek position of an open slob-object</s><s f="ifxus_write_slob" u="int ifxus_write_slob(int bid, string content)">Writes a string into the slob-object</s><s f="ingres_autocommit" u="bool ingres_autocommit([resource link])">Switch autocommit on or off</s><s f="ingres_close" u="bool ingres_close([resource link])">Close an Ingres II database connection</s><s f="ingres_commit" u="bool ingres_commit([resource link])">Commit a transaction</s><s f="ingres_connect" u="resource ingres_connect([string database [, string username [, string password]]])">Open a connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]</s><s f="ingres_fetch_array" u="array ingres_fetch_array([int result_type [, resource link]])">Fetch a row of result into an array result_type can be II_NUM for enumerated array, II_ASSOC for associative array, or II_BOTH (default)</s><s f="ingres_fetch_object" u="array ingres_fetch_object([int result_type [, resource link]])">Fetch a row of result into an object result_type can be II_NUM for enumerated object, II_ASSOC for associative object, or II_BOTH (default)</s><s f="ingres_fetch_row" u="array ingres_fetch_row([resource link])">Fetch a row of result into an enumerated array</s><s f="ingres_field_length" u="string ingres_field_length(int index [, resource link])">Return the length of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</s><s f="ingres_field_name" u="string ingres_field_name(int index [, resource link])">Return the name of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</s><s f="ingres_field_nullable" u="string ingres_field_nullable(int index [, resource link])">Return true if the field is nullable and false otherwise index must be &gt;0 and &lt;= ingres_num_fields()</s><s f="ingres_field_precision" u="string ingres_field_precision(int index [, resource link])">Return the precision of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</s><s f="ingres_field_scale" u="string ingres_field_scale(int index [, resource link])">Return the scale of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</s><s f="ingres_field_type" u="string ingres_field_type(int index [, resource link])">Return the type of a field in a query result index must be &gt;0 and &lt;= ingres_num_fields()</s><s f="ingres_num_fields" u="int ingres_num_fields([resource link])">Return the number of fields returned by the last query</s><s f="ingres_num_rows" u="int ingres_num_rows([resource link])">Return the number of rows affected/returned by the last query</s><s f="ingres_pconnect" u="resource ingres_pconnect([string database [, string username [, string password]]])">Open a persistent connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]</s><s f="ingres_query" u="bool ingres_query(string query [, resource link])">Send a SQL query to Ingres II</s><s f="ingres_rollback" u="bool ingres_rollback([resource link])">Roll back a transaction</s><s f="ibase_blob_add" u="bool ibase_blob_add(resource blob_handle, string data)">Add data into created blob</s><s f="ibase_blob_cancel" u="bool ibase_blob_cancel(resource blob_handle)">Cancel creating blob</s><s f="ibase_blob_close" u="string ibase_blob_close(resource blob_handle)">Close blob</s><s f="ibase_blob_create" u="resource ibase_blob_create([resource link_identifier])">Create blob for adding data</s><s f="ibase_blob_echo" u="bool ibase_blob_echo([ resource link_identifier, ] string blob_id)">Output blob contents to browser</s><s f="ibase_blob_get" u="string ibase_blob_get(resource blob_handle, int len)">Get len bytes data from open blob</s><s f="ibase_blob_import" u="string ibase_blob_import([ resource link_identifier, ] resource file)">Create blob, copy file in it, and close it</s><s f="ibase_blob_info" u="array ibase_blob_info([ resource link_identifier, ] string blob_id)">Return blob length and other useful info</s><s f="ibase_blob_open" u="resource ibase_blob_open([ resource link_identifier, ] string blob_id)">Open blob for retrieving data parts</s><s f="ibase_free_event_handler" u="bool ibase_free_event_handler(resource event)">Frees the event handler set by ibase_set_event_handler()</s><s f="ibase_set_event_handler" u="resource ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])">Register the callback for handling each of the named events</s><s f="ibase_wait_event" u="string ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])">Waits for any one of the passed Interbase events to be posted by the database, and returns its name</s><s f="ibase_affected_rows" u="int ibase_affected_rows( [ resource link_identifier ] )">Returns the number of rows affected by the previous INSERT, UPDATE or DELETE statement</s><s f="ibase_execute" u="mixed ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])">Execute a previously prepared query</s><s f="ibase_fetch_assoc" u="array ibase_fetch_assoc(resource result [, int fetch_flags])">Fetch a row  from the results of a query</s><s f="ibase_fetch_object" u="object ibase_fetch_object(resource result [, int fetch_flags])">Fetch a object from the results of a query</s><s f="ibase_fetch_row" u="array ibase_fetch_row(resource result [, int fetch_flags])">Fetch a row  from the results of a query</s><s f="ibase_field_info" u="array ibase_field_info(resource query_result, int field_number)">Get information about a field</s><s f="ibase_free_query" u="bool ibase_free_query(resource query)">Free memory used by a query</s><s f="ibase_free_result" u="bool ibase_free_result(resource result)">Free the memory used by a result</s><s f="ibase_name_result" u="bool ibase_name_result(resource result, string name)">Assign a name to a result for use with ... WHERE CURRENT OF &lt;name&gt; statements</s><s f="ibase_num_fields" u="int ibase_num_fields(resource query_result)">Get the number of fields in result</s><s f="ibase_num_params" u="int ibase_num_params(resource query)">Get the number of params in a prepared query</s><s f="ibase_num_rows" u="int ibase_num_rows( resource result_identifier )">Return the number of rows that are available in a result</s><s f="ibase_param_info" u="array ibase_param_info(resource query, int field_number)">Get information about a parameter</s><s f="ibase_prepare" u="resource ibase_prepare([resource link_identifier, ] string query)">Prepare a query for later execution</s><s f="ibase_query" u="mixed ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])">Execute a query</s><s f="ibase_add_user" u="bool ibase_add_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])">Add a user to security database</s><s f="ibase_backup" u="mixed ibase_backup(resource service_handle, string source_db, string dest_file [, int options [, bool verbose]])">Initiates a backup task in the service manager and returns immediately</s><s f="ibase_db_info" u="string ibase_db_info(resource service_handle, string db, int action [, int argument])">Request statistics about a database</s><s f="ibase_delete_user" u="bool ibase_delete_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])">Delete a user from security database</s><s f="ibase_maintain_db" u="bool ibase_maintain_db(resource service_handle, string db, int action [, int argument])">Execute a maintenance command on the database server</s><s f="ibase_modify_user" u="bool ibase_modify_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])">Modify a user in security database</s><s f="ibase_restore" u="mixed ibase_restore(resource service_handle, string source_file, string dest_db [, int options [, bool verbose]])">Initiates a restore task in the service manager and returns immediately</s><s f="ibase_server_info" u="string ibase_server_info(resource service_handle, int action)">Request information about a database server</s><s f="ibase_service_attach" u="resource ibase_service_attach(string host, string dba_username, string dba_password)">Connect to the service manager</s><s f="ibase_service_detach" u="bool ibase_service_detach(resource service_handle)">Disconnect from the service manager</s><s f="ibase_close" u="bool ibase_close([resource link_identifier])">Close an InterBase connection</s><s f="ibase_commit" u="bool ibase_commit( resource link_identifier )">Commit transaction</s><s f="ibase_commit_ret" u="bool ibase_commit_ret( resource link_identifier )">Commit transaction and retain the transaction context</s><s f="ibase_connect" u="resource ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])">Open a connection to an InterBase database</s><s f="ibase_drop_db" u="bool ibase_drop_db([resource link_identifier])">Drop an InterBase database</s><s f="ibase_errcode" u="int ibase_errcode(void)">Return error code</s><s f="ibase_errmsg" u="string ibase_errmsg(void)">Return error message</s><s f="ibase_gen_id" u="int ibase_gen_id(string generator [, int increment [, resource link_identifier ]])">Increments the named generator and returns its new value</s><s f="ibase_pconnect" u="resource ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])">Open a persistent connection to an InterBase database</s><s f="ibase_rollback" u="bool ibase_rollback( resource link_identifier )">Rollback transaction</s><s f="ibase_rollback_ret" u="bool ibase_rollback_ret( resource link_identifier )">Rollback transaction and retain the transaction context</s><s f="ibase_timefmt" u="bool ibase_timefmt(string format [, int type ])">Sets the format of timestamp, date and time columns returned from queries</s><s f="ibase_trans" u="resource ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])">Start a transaction over one or several databases</s><s f="ircg_channel_mode" u="bool ircg_channel_mode(int connection, string channel, string mode_spec, string nick)">Sets channel mode flags for user</s><s f="ircg_disconnect" u="bool ircg_disconnect(int connection, string reason)">Terminate IRC connection</s><s f="ircg_eval_ecmascript_params" u="array ircg_eval_ecmascript_params(string params)">Decodes a list of JS-encoded parameters into a native array</s><s f="ircg_fetch_error_msg" u="array ircg_fetch_error_msg(int connection)">Returns the error from previous ircg operation</s><s f="ircg_get_username" u="string ircg_get_username(int connection)">Gets username for connection</s><s f="ircg_html_encode" u="string ircg_html_encode(string html_text)">Encodes HTML preserving output</s><s f="ircg_ignore_add" u="bool ircg_ignore_add(resource connection, string nick)">Adds a user to your ignore list on a server</s><s f="ircg_ignore_del" u="bool ircg_ignore_del(int connection, string nick)">Removes a user from your ignore list</s><s f="ircg_invite" u="bool ircg_invite(int connection, string channel, string nickname)">INVITEs nickname to channel</s><s f="ircg_is_conn_alive" u="bool ircg_is_conn_alive(int connection)">Checks connection status</s><s f="ircg_join" u="bool ircg_join(int connection, string channel [, string chan-key])">Joins a channel on a connected server</s><s f="ircg_kick" u="bool ircg_kick(int connection, string channel, string nick, string reason)">Kicks user from channel</s><s f="ircg_list" u="bool ircg_list(int connection, string channel)">List topic/user count of channel(s)</s><s f="ircg_lookup_format_messages" u="bool ircg_lookup_format_messages(string name)">Selects a set of format strings for display of IRC messages</s><s f="ircg_lusers" u="bool ircg_lusers(int connection)">IRC network statistics</s><s f="ircg_msg" u="bool ircg_msg(int connection, string recipient, string message [,bool loop-suppress])">Delivers a message to the IRC network</s><s f="ircg_names" u="bool ircg_names( int connection, string channel [, string target])">Queries visible usernames</s><s f="ircg_nick" u="bool ircg_nick(int connection, string newnick)">Changes the nickname</s><s f="ircg_nickname_escape" u="string ircg_nickname_escape(string nick)">Escapes special characters in nickname to be IRC-compliant</s><s f="ircg_nickname_unescape" u="string ircg_nickname_unescape(string nick)">Decodes encoded nickname</s><s f="ircg_notice" u="bool ircg_notice(int connection, string recipient, string message)">Sends a one-way communication NOTICE to a target</s><s f="ircg_oper" u="bool ircg_oper(int connection, string name, string password)">Elevates privileges to IRC OPER</s><s f="ircg_part" u="bool ircg_part(int connection, string channel)">Leaves a channel</s><s f="ircg_pconnect" u="int ircg_pconnect(string username [, string server [, int port [, string format-msg-set-name [, array ctcp-set [, array user-details [, bool bailout-on-trivial]]]]]])">Create a persistent IRC connection</s><s f="ircg_register_format_messages" u="bool ircg_register_format_messages(string name, array messages)">Registers a set of format strings for display of IRC messages</s><s f="ircg_set_current" u="bool ircg_set_current(int connection)">Sets current connection for output</s><s f="ircg_set_file" u="bool ircg_set_file(int connection, string path)">Sets logfile for connection</s><s f="ircg_set_on_die" u="bool ircg_set_on_die(int connection, string host, int port, string data)">Sets hostaction to be executed when connection dies</s><s f="ircg_set_on_read_data" u="bool ircg_set_on_read_data(int connection, string host, int port, string data)">Set action to be executed when data is received from a HTTP client</s><s f="ircg_topic" u="bool ircg_topic(int connection, string channel, string topic)">Sets topic for channel</s><s f="ircg_who" u="bool ircg_who(int connection, string mask [, bool ops_only])">Queries server for WHO information</s><s f="ircg_whois" u="bool ircg_whois( int connection, string nick)">Queries user information for nick on server</s><s f="ldap_add" u="bool ldap_add(resource link, string dn, array entry)">Add entries to LDAP directory</s><s f="ldap_bind" u="bool ldap_bind(resource link [, string dn, string password])">Bind to LDAP directory</s><s f="ldap_compare" u="bool ldap_compare(resource link, string dn, string attr, string value)">Determine if an entry has a specific value for one of its attributes</s><s f="ldap_connect" u="resource ldap_connect([string host [, int port]])">Connect to an LDAP server</s><s f="ldap_count_entries" u="int ldap_count_entries(resource link, resource result)">Count the number of entries in a search result</s><s f="ldap_delete" u="bool ldap_delete(resource link, string dn)">Delete an entry from a directory</s><s f="ldap_errno" u="int ldap_errno(resource link)">Get the current ldap error number</s><s f="ldap_error" u="string ldap_error(resource link)">Get the current ldap error string</s><s f="ldap_explode_dn" u="array ldap_explode_dn(string dn, int with_attrib)">Splits DN into its component parts</s><s f="ldap_first_attribute" u="string ldap_first_attribute(resource link, resource result_entry, int ber)">Return first attribute</s><s f="ldap_first_entry" u="resource ldap_first_entry(resource link, resource result)">Return first result id</s><s f="ldap_first_reference" u="resource ldap_first_reference(resource link, resource result)">Return first reference</s><s f="ldap_free_result" u="bool ldap_free_result(resource result)">Free result memory</s><s f="ldap_get_attributes" u="array ldap_get_attributes(resource link, resource result_entry)">Get attributes from a search result entry</s><s f="ldap_get_dn" u="string ldap_get_dn(resource link, resource result_entry)">Get the DN of a result entry</s><s f="ldap_get_entries" u="array ldap_get_entries(resource link, resource result)">Get all result entries</s><s f="ldap_get_option" u="bool ldap_get_option(resource link, int option, mixed retval)">Get the current value of various session-wide parameters</s><s f="ldap_get_values" u="array ldap_get_values(resource link, resource result_entry, string attribute)">Get all values from a result entry</s><s f="ldap_get_values_len" u="array ldap_get_values_len(resource link, resource result_entry, string attribute)">Get all values with lengths from a result entry</s><s f="ldap_list" u="resource ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])">Single-level search</s><s f="ldap_mod_add" u="bool ldap_mod_add(resource link, string dn, array entry)">Add attribute values to current</s><s f="ldap_mod_del" u="bool ldap_mod_del(resource link, string dn, array entry)">Delete attribute values</s><s f="ldap_mod_replace" u="bool ldap_mod_replace(resource link, string dn, array entry)">Replace attribute values with new ones</s><s f="ldap_next_attribute" u="string ldap_next_attribute(resource link, resource result_entry, resource ber)">Get the next attribute in result</s><s f="ldap_next_entry" u="resource ldap_next_entry(resource link, resource result_entry)">Get next result entry</s><s f="ldap_next_reference" u="resource ldap_next_reference(resource link, resource reference_entry)">Get next reference</s><s f="ldap_parse_reference" u="bool ldap_parse_reference(resource link, resource reference_entry, array referrals)">Extract information from reference entry</s><s f="ldap_parse_result" u="bool ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)">Extract information from result</s><s f="ldap_read" u="resource ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])">Read an entry</s><s f="ldap_sasl_bind" u="bool ldap_sasl_bind(resource link)">Bind to LDAP directory using SASL</s><s f="ldap_search" u="resource ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])">Search LDAP tree under base_dn</s><s f="ldap_set_option" u="bool ldap_set_option(resource link, int option, mixed newval)">Set the value of various session-wide parameters</s><s f="ldap_set_rebind_proc" u="bool ldap_set_rebind_proc(resource link, string callback)">Set a callback function to do re-binds on referral chasing.</s><s f="ldap_sort" u="bool ldap_sort(resource link, resource result, string sortfilter)">Sort LDAP result entries</s><s f="ldap_start_tls" u="bool ldap_start_tls(resource link)">Start TLS</s><s f="ldap_unbind" u="bool ldap_unbind(resource link)">Unbind from LDAP directory</s><s f="libxml_set_streams_context" u="void libxml_set_streams_context(resource streams_context)">Set the streams context for the next libxml document load or write</s><s f="mb_convert_case" u="string mb_convert_case(string sourcestring, int mode [, string encoding])">Returns a case-folded version of sourcestring</s><s f="mb_convert_encoding" u="string mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])">Returns converted string in desired encoding</s><s f="mb_convert_kana" u="string mb_convert_kana(string str [, string option] [, string encoding])">Conversion between full-width character and half-width character (Japanese)</s><s f="mb_convert_variables" u="string mb_convert_variables(string to-encoding, mixed from-encoding [, mixed ...])">Converts the string resource in variables to desired encoding</s><s f="mb_decode_mimeheader" u="string mb_decode_mimeheader(string string)">Decodes the MIME "encoded-word" in the string</s><s f="mb_decode_numericentity" u="string mb_decode_numericentity(string string, array convmap [, string encoding])">Converts HTML numeric entities to character code</s><s f="mb_detect_encoding" u="string mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])">Encodings of the given string is returned (as a string)</s><s f="mb_encode_mimeheader" u="string mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]])">Converts the string to MIME "encoded-word" in the format of =?charset?(B|Q)?encoded_string?=</s><s f="mb_encode_numericentity" u="string mb_encode_numericentity(string string, array convmap [, string encoding])">Converts specified characters to HTML numeric entities</s><s f="mb_get_info" u="string mb_get_info([string type])">Returns the current settings of mbstring</s><s f="mb_http_input" u="mixed mb_http_input([string type])">Returns the input encoding</s><s f="mb_http_output" u="string mb_http_output([string encoding])">Sets the current output_encoding or returns the current output_encoding as a string</s><s f="mb_internal_encoding" u="string mb_internal_encoding([string encoding])">Sets the current internal encoding or Returns the current internal encoding as a string</s><s f="mb_language" u="string mb_language([string language])">Sets the current language or Returns the current language as a string</s><s f="mb_list_encodings" u="array mb_list_encodings()">Returns an array of all supported encodings</s><s f="mb_output_handler" u="string mb_output_handler(string contents, int status)">Returns string in output buffer converted to the http_output encoding</s><s f="mb_parse_str" u="bool mb_parse_str(string encoded_string [, array result])">Parses GET/POST/COOKIE data and sets global variables</s><s f="mb_preferred_mime_name" u="string mb_preferred_mime_name(string encoding)">Return the preferred MIME name (charset) as a string</s><s f="mb_send_mail" u="int mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])">*  Sends an email message with MIME scheme</s><s f="mb_strcut" u="string mb_strcut(string str, int start [, int length [, string encoding]])">Returns part of a string</s><s f="mb_strimwidth" u="string mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])">Trim the string in terminal width</s><s f="mb_strlen" u="int mb_strlen(string str [, string encoding])">Get character numbers of a string</s><s f="mb_strpos" u="int mb_strpos(string haystack, string needle [, int offset [, string encoding]])">Find position of first occurrence of a string within another</s><s f="mb_strrpos" u="int mb_strrpos(string haystack, string needle [, string encoding])">Find the last occurrence of a character in a string within another</s><s f="mb_strtolower" u="string mb_strtolower(string sourcestring [, string encoding])">*  Returns a lowercased version of sourcestring</s><s f="mb_strtoupper" u="string mb_strtoupper(string sourcestring [, string encoding])">*  Returns a uppercased version of sourcestring</s><s f="mb_strwidth" u="int mb_strwidth(string str [, string encoding])">Gets terminal width of a string</s><s f="mb_substitute_character" u="mixed mb_substitute_character([mixed substchar])">Sets the current substitute_character or returns the current substitute_character</s><s f="mb_substr" u="string mb_substr(string str, int start [, int length [, string encoding]])">Returns part of a string</s><s f="mb_substr_count" u="int mb_substr_count(string haystack, string needle [, string encoding])">Count the number of substring occurrences</s><s f="mb_ereg" u="int mb_ereg(string pattern, string string [, array registers])">Regular expression match for multibyte string</s><s f="mb_ereg_match" u="bool mb_ereg_match(string pattern, string string [,string option])">Regular expression match for multibyte string</s><s f="mb_ereg_replace" u="string mb_ereg_replace(string pattern, string replacement, string string [, string option])">Replace regular expression for multibyte string</s><s f="mb_ereg_search" u="bool mb_ereg_search([string pattern[, string option]])">Regular expression search for multibyte string</s><s f="mb_ereg_search_getpos" u="int mb_ereg_search_getpos(void)">Get search start position</s><s f="mb_ereg_search_getregs" u="array mb_ereg_search_getregs(void)">Get matched substring of the last time</s><s f="mb_ereg_search_init" u="bool mb_ereg_search_init(string string [, string pattern[, string option]])">Initialize string and regular expression for search.</s><s f="mb_ereg_search_pos" u="array mb_ereg_search_pos([string pattern[, string option]])">Regular expression search for multibyte string</s><s f="mb_ereg_search_regs" u="array mb_ereg_search_regs([string pattern[, string option]])">Regular expression search for multibyte string</s><s f="mb_ereg_search_setpos" u="bool mb_ereg_search_setpos(int position)">Set search start position</s><s f="mb_eregi" u="int mb_eregi(string pattern, string string [, array registers])">Case-insensitive regular expression match for multibyte string</s><s f="mb_eregi_replace" u="string mb_eregi_replace(string pattern, string replacement, string string)">Case insensitive replace regular expression for multibyte string</s><s f="mb_regex_encoding" u="string mb_regex_encoding([string encoding])">Returns the current encoding for regex as a string.</s><s f="mb_regex_set_options" u="string mb_regex_set_options([string options])">Set or get the default options for mbregex functions</s><s f="mb_split" u="array mb_split(string pattern, string string [, int limit])">split multibyte string into array by regular expression</s><s f="mcrypt_cbc" u="string mcrypt_cbc(int cipher, string key, string data, int mode, string iv)">CBC crypt/decrypt data using key key with cipher cipher starting with iv</s><s f="mcrypt_cfb" u="string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)">CFB crypt/decrypt data using key key with cipher cipher starting with iv</s><s f="mcrypt_create_iv" u="string mcrypt_create_iv(int size, int source)">Create an initialization vector (IV)</s><s f="mcrypt_decrypt" u="string mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)">OFB crypt/decrypt data using key key with cipher cipher starting with iv</s><s f="mcrypt_ecb" u="string mcrypt_ecb(int cipher, string key, string data, int mode, string iv)">ECB crypt/decrypt data using key key with cipher cipher starting with iv</s><s f="mcrypt_enc_get_algorithms_name" u="string mcrypt_enc_get_algorithms_name(resource td)">Returns the name of the algorithm specified by the descriptor td</s><s f="mcrypt_enc_get_block_size" u="int mcrypt_enc_get_block_size(resource td)">Returns the block size of the cipher specified by the descriptor td</s><s f="mcrypt_enc_get_iv_size" u="int mcrypt_enc_get_iv_size(resource td)">Returns the size of the IV in bytes of the algorithm specified by the descriptor td</s><s f="mcrypt_enc_get_key_size" u="int mcrypt_enc_get_key_size(resource td)">Returns the maximum supported key size in bytes of the algorithm specified by the descriptor td</s><s f="mcrypt_enc_get_modes_name" u="string mcrypt_enc_get_modes_name(resource td)">Returns the name of the mode specified by the descriptor td</s><s f="mcrypt_enc_get_supported_key_sizes" u="array mcrypt_enc_get_supported_key_sizes(resource td)">This function decrypts the crypttext</s><s f="mcrypt_enc_is_block_algorithm" u="bool mcrypt_enc_is_block_algorithm(resource td)">Returns TRUE if the alrogithm is a block algorithms</s><s f="mcrypt_enc_is_block_algorithm_mode" u="bool mcrypt_enc_is_block_algorithm_mode(resource td)">Returns TRUE if the mode is for use with block algorithms</s><s f="mcrypt_enc_is_block_mode" u="bool mcrypt_enc_is_block_mode(resource td)">Returns TRUE if the mode outputs blocks</s><s f="mcrypt_enc_self_test" u="int mcrypt_enc_self_test(resource td)">This function runs the self test on the algorithm specified by the descriptor td</s><s f="mcrypt_encrypt" u="string mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)">OFB crypt/decrypt data using key key with cipher cipher starting with iv</s><s f="mcrypt_generic" u="string mcrypt_generic(resource td, string data)">This function encrypts the plaintext</s><s f="mcrypt_generic_deinit" u="bool mcrypt_generic_deinit(resource td)">This function terminates encrypt specified by the descriptor td</s><s f="mcrypt_generic_end" u="bool mcrypt_generic_end(resource td)">This function terminates encrypt specified by the descriptor td</s><s f="mcrypt_generic_init" u="int mcrypt_generic_init(resource td, string key, string iv)">This function initializes all buffers for the specific module</s><s f="mcrypt_get_block_size" u="int mcrypt_get_block_size(string cipher, string module)">Get the key size of cipher</s><s f="mcrypt_get_cipher_name" u="string mcrypt_get_cipher_name(string cipher)">Get the key size of cipher</s><s f="mcrypt_get_iv_size" u="int mcrypt_get_iv_size(string cipher, string module)">Get the IV size of cipher (Usually the same as the blocksize)</s><s f="mcrypt_get_key_size" u="int mcrypt_get_key_size(string cipher, string module)">Get the key size of cipher</s><s f="mcrypt_list_algorithms" u="array mcrypt_list_algorithms([string lib_dir])">List all algorithms in "module_dir"</s><s f="mcrypt_list_modes" u="array mcrypt_list_modes([string lib_dir])">List all modes "module_dir"</s><s f="mcrypt_module_close" u="bool mcrypt_module_close(resource td)">Free the descriptor td</s><s f="mcrypt_module_get_algo_block_size" u="int mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])">Returns the block size of the algorithm</s><s f="mcrypt_module_get_algo_key_size" u="int mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])">Returns the maximum supported key size of the algorithm</s><s f="mcrypt_module_get_supported_key_sizes" u="array mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])">This function decrypts the crypttext</s><s f="mcrypt_module_is_block_algorithm" u="bool mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])">Returns TRUE if the algorithm is a block algorithm</s><s f="mcrypt_module_is_block_algorithm_mode" u="bool mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])">Returns TRUE if the mode is for use with block algorithms</s><s f="mcrypt_module_is_block_mode" u="bool mcrypt_module_is_block_mode(string mode [, string lib_dir])">Returns TRUE if the mode outputs blocks of bytes</s><s f="mcrypt_module_open" u="resource mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)">Opens the module of the algorithm and the mode to be used</s><s f="mcrypt_module_self_test" u="bool mcrypt_module_self_test(string algorithm [, string lib_dir])">Does a self test of the module "module"</s><s f="mcrypt_ofb" u="string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)">OFB crypt/decrypt data using key key with cipher cipher starting with iv</s><s f="mdecrypt_generic" u="string mdecrypt_generic(resource td, string data)">This function decrypts the plaintext</s><s f="mcve_adduser" u="int mcve_adduser(resource conn, string admin_password, int usersetup)">Add an MCVE user using usersetup structure</s><s f="mcve_adduserarg" u="int mcve_adduserarg(resource usersetup, int argtype, string argval)">Add a value to user configuration structure</s><s f="mcve_bt" u="int mcve_bt(resource conn, string username, string password)">Get unsettled batch totals</s><s f="mcve_checkstatus" u="int mcve_checkstatus(resource conn, int identifier)">Check to see if a transaction has completed</s><s f="mcve_chkpwd" u="int mcve_chkpwd(resource conn, string username, string password)">Verify Password</s><s f="mcve_chngpwd" u="int mcve_chngpwd(resource conn, string admin_password, string new_password)">Change the system administrator's password</s><s f="mcve_completeauthorizations" u="int mcve_completeauthorizations(resource conn, int &amp;array)">Number of complete authorizations in queue, returning an array of their identifiers</s><s f="mcve_connect" u="int mcve_connect(resource conn)">Establish the connection to MCVE</s><s f="mcve_connectionerror" u="string mcve_connectionerror(resource conn)">Get a textual representation of why a connection failed</s><s f="mcve_deleteresponse" u="bool mcve_deleteresponse(resource conn, int identifier)">Delete specified transaction from MCVE_CONN structure</s><s f="mcve_deletetrans" u="bool mcve_deletetrans(resource conn, int identifier)">Delete specified transaction from MCVE_CONN structure</s><s f="mcve_deleteusersetup" u="void mcve_deleteusersetup(resource usersetup)">Deallocate data associated with usersetup structure</s><s f="mcve_deluser" u="int mcve_deluser(resource conn, string admin_password, string username)">Delete an MCVE user account</s><s f="mcve_destroyconn" u="void mcve_destroyconn(resource conn)">Destroy the connection and MCVE_CONN structure</s><s f="mcve_destroyengine" u="void mcve_destroyengine(void)">Free memory associated with IP/SSL connectivity</s><s f="mcve_disableuser" u="int mcve_disableuser(resource conn, string admin_password, string username)">Disable an active MCVE user account</s><s f="mcve_edituser" u="int mcve_edituser(resource conn, string admin_password, int usersetup)">Edit MCVE user using usersetup structure</s><s f="mcve_enableuser" u="int mcve_enableuser(resource conn, string admin_password, string username)">Enable an inactive MCVE user account</s><s f="mcve_force" u="int mcve_force(resiurce conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)">Send a FORCE to MCVE.  (typically, a phone-authorization)</s><s f="mcve_getcell" u="string mcve_getcell(resource conn, int identifier, string column, int row)">Get a specific cell from a comma delimited response by column name</s><s f="mcve_getcellbynum" u="string mcve_getcellbynum(resource conn, int identifier, int column, int row)">Get a specific cell from a comma delimited response by column number</s><s f="mcve_getcommadelimited" u="string mcve_getcommadelimited(resource conn, int identifier)">Get the RAW comma delimited data returned from MCVE</s><s f="mcve_getheader" u="string mcve_getheader(resource conn, int identifier, int column_num)">Get the name of the column in a comma-delimited response</s><s f="mcve_getuserarg" u="string mcve_getuserarg(resource usersetup, int argtype)">Grab a value from usersetup structure</s><s f="mcve_getuserparam" u="string mcve_getuserparam(resource conn, long identifier, int key)">Get a user response parameter</s><s f="mcve_gft" u="int mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)">Audit MCVE for Failed transactions</s><s f="mcve_gl" u="int mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)">Audit MCVE for settled transactions</s><s f="mcve_gut" u="int mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)">Audit MCVE for Unsettled Transactions</s><s f="mcve_initconn" u="resource mcve_initconn(void)">Create and initialize an MCVE_CONN structure</s><s f="mcve_initengine" u="int mcve_initengine(string location)">Ready the client for IP/SSL Communication</s><s f="mcve_initusersetup" u="resource mcve_initusersetup(void)">Initialize structure to store user data</s><s f="mcve_iscommadelimited" u="int mcve_iscommadelimited(resource conn, int identifier)">Checks to see if response is comma delimited</s><s f="mcve_liststats" u="int mcve_liststats(resource conn, string admin_password)">List statistics for all users on MCVE system</s><s f="mcve_listusers" u="int mcve_listusers(resource conn, string admin_password)">List all users on MCVE system</s><s f="mcve_maxconntimeout" u="bool mcve_maxconntimeout(resource conn, int secs)">The maximum amount of time the API will attempt a connection to MCVE</s><s f="mcve_monitor" u="int mcve_monitor(resource conn)">Perform communication with MCVE (send/receive data)   Non-blocking</s><s f="mcve_numcolumns" u="int mcve_numcolumns(resource conn, int identifier)">Number of columns returned in a comma delimited response</s><s f="mcve_numrows" u="int mcve_numrows(resource conn, int identifier)">Number of rows returned in a comma delimited response</s><s f="mcve_override" u="int mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)">Send an OVERRIDE to MCVE</s><s f="mcve_parsecommadelimited" u="int mcve_parsecommadelimited(resource conn, int identifier)">Parse the comma delimited response so mcve_getcell, etc will work</s><s f="mcve_ping" u="int mcve_ping(resource conn)">Send a ping request to MCVE</s><s f="mcve_preauth" u="int mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)">Send a PREAUTHORIZATION to MCVE</s><s f="mcve_preauthcompletion" u="int mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)">Complete a PREAUTHORIZATION... Ready it for settlement</s><s f="mcve_qc" u="int mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)">Audit MCVE for a list of transactions in the outgoing queue</s><s f="mcve_responseparam" u="string mcve_responseparam(resource conn, long identifier, string key)">Get a custom response parameter</s><s f="mcve_return" u="int mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)">Issue a RETURN or CREDIT to MCVE</s><s f="mcve_returncode" u="int mcve_returncode(resource conn, int identifier)">Grab the exact return code from the transaction</s><s f="mcve_returnstatus" u="int mcve_returnstatus(resource conn, int identifier)">Check to see if the transaction was successful</s><s f="mcve_sale" u="int mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)">Send a SALE to MCVE</s><s f="mcve_setblocking" u="int mcve_setblocking(resource conn, int tf)">Set blocking/non-blocking mode for connection</s><s f="mcve_setdropfile" u="int mcve_setdropfile(resource conn, string directory)">Set the connection method to Drop-File</s><s f="mcve_setip" u="int mcve_setip(resource conn, string host, int port)">Set the connection method to IP</s><s f="mcve_setssl" u="int mcve_setssl(resource conn, string host, int port)">Set the connection method to SSL</s><s f="mcve_setssl_files" u="int mcve_setssl_files(string sslkeyfile, string sslcertfile)">Set certificate key files and certificates if server requires client certificate     verification</s><s f="mcve_settimeout" u="int mcve_settimeout(resource conn, int seconds)">Set maximum transaction time (per trans)</s><s f="mcve_settle" u="int mcve_settle(resource conn, string username, string password, string batch)">Issue a settlement command to do a batch deposit</s><s f="mcve_text_avs" u="string mcve_text_avs(string code)">Get a textual representation of the return_avs</s><s f="mcve_text_code" u="string mcve_text_code(string code)">Get a textual representation of the return_code</s><s f="mcve_text_cv" u="string mcve_text_cv(int code)">Get a textual representation of the return_cv</s><s f="mcve_transactionauth" u="string mcve_transactionauth(resource conn, int identifier)">Get the authorization number returned for the transaction (alpha-numeric)</s><s f="mcve_transactionavs" u="int mcve_transactionavs(resource conn, int identifier)">Get the Address Verification return status</s><s f="mcve_transactionbatch" u="int mcve_transactionbatch(resource conn, int identifier)">Get the batch number associated with the transaction</s><s f="mcve_transactioncv" u="int mcve_transactioncv(resource conn, int identifier)">Get the CVC2/CVV2/CID return status</s><s f="mcve_transactionid" u="int mcve_transactionid(resource conn, int identifier)">Get the unique system id for the transaction</s><s f="mcve_transactionitem" u="int mcve_transactionitem(resource conn, int identifier)">Get the ITEM number in the associated batch for this transaction</s><s f="mcve_transactionssent" u="int mcve_transactionssent(resource conn)">Check to see if outgoing buffer is clear</s><s f="mcve_transactiontext" u="string mcve_transactiontext(resource conn, int identifier)">Get verbiage (text) return from MCVE or processing institution</s><s f="mcve_transinqueue" u="int mcve_transinqueue(resource conn)">Number of transactions in client-queue</s><s f="mcve_transnew" u="int mcve_transnew(resource conn)">Start a new transaction</s><s f="mcve_transparam" u="int mcve_transparam(resource conn, long identifier, int key, ...)">Add a parameter to a transaction</s><s f="mcve_transsend" u="int mcve_transsend(resource conn, long identifier)">Finalize and send the transaction</s><s f="mcve_ub" u="int mcve_ub(resource conn, string username, string password)">Get a list of all Unsettled batches</s><s f="mcve_uwait" u="int mcve_uwait(long microsecs)">Wait x microsecs</s><s f="mcve_verifyconnection" u="bool mcve_verifyconnection(resource conn, int tf)">Set whether or not to PING upon connect to verify connection</s><s f="mcve_verifysslcert" u="bool mcve_verifysslcert(resource conn, int tf)">Set whether or not to verify the server ssl certificate</s><s f="mcve_void" u="int mcve_void(resource conn, string username, string password, int sid, int ptrannum)">VOID a transaction in the settlement queue</s><s f="mhash" u="string mhash(int hash, string data [, string key])">Hash data with hash</s><s f="mhash_count" u="int mhash_count(void)">Gets the number of available hashes</s><s f="mhash_get_block_size" u="int mhash_get_block_size(int hash)">Gets the block size of hash</s><s f="mhash_get_hash_name" u="string mhash_get_hash_name(int hash)">Gets the name of hash</s><s f="mime_content_type" u="string mime_content_type(string filename|resource stream)">Return content-type for file</s><s f="ming_keypress" u="int ming_keypress(string str)">Returns the action flag for keyPress(char)</s><s f="ming_setscale" u="void ming_setscale(int scale)">Set scale (?)</s><s f="ming_useconstants" u="void ming_useconstants(int use)">Use constant pool (?)</s><s f="ming_useswfversion" u="void ming_useswfversion(int version)">Use SWF version (?)</s><s f="swfaction_init" u="object swfaction_init(string)">Returns a new SWFAction object, compiling the given script</s><s f="swfbitmap_init" u="class swfbitmap_init(mixed file [, mixed maskfile])">Returns a new SWFBitmap object from jpg (with optional mask) or dbl file</s><s f="swfbutton_init" u="object swfbutton_init(void)">Returns a new SWFButton object</s><s f="swfdisplayitem_move" u="void swfdisplayitem_move(float dx, float dy)">Displaces this SWFDisplayItem by (dx, dy) in movie coordinates</s><s f="swfdisplayitem_rotate" u="void swfdisplayitem_rotate(float degrees)">Rotates this SWFDisplayItem the given (clockwise) degrees from its current orientation</s><s f="swfdisplayitem_scale" u="void swfdisplayitem_scale(float xScale, float yScale)">Multiplies this SWFDisplayItem's current x scale by xScale, its y scale by yScale</s><s f="swffill_init" u="class swffill_init(void)">Returns a new SWFFill object</s><s f="swffont_init" u="object swffont_init(string filename)">Returns a new SWFFont object from given file</s><s f="swfgradient_init" u="class swfgradient_init(void)">Returns a new SWFGradient object</s><s f="swfmorph_init" u="object swfmorph_init(void)">Returns a new SWFMorph object</s><s f="swfmovie_add" u="object swfmovie_add(object SWFBlock)"></s><s f="swfmovie_init" u="object swfmovie_init(int version)">Creates swfmovie object according to the passed version</s><s f="swfmovie_labelframe" u="void swfmovie_labelframe(object SWFBlock)"></s><s f="swfmovie_labelframe" u="void swfmovie_labelframe(string label)">Labels frame</s><s f="swfmovie_nextframe" u="void swfmovie_nextframe(void)"></s><s f="swfmovie_output" u="int swfmovie_output([int compression])"></s><s f="swfmovie_save" u="int swfmovie_save(mixed where [, int compression])">Saves the movie. 'where' can be stream and the movie will be saved there otherwise it is treated as string and written in file with that name</s><s f="swfshape_addfill" u="object swfshape_addfill(mixed arg1, int arg2, [int b [, int a]])">Returns a fill object, for use with swfshape_setleftfill and swfshape_setrightfill. If 1 or 2 parameter(s) is (are) passed first should be object (from gradient class) and the second int (flags). Gradient fill is performed. If 3 or 4 parameters are passed : r, g, b [, a]. Solid fill is performed.</s><s f="swfshape_drawarc" u="void swfshape_drawarc(float r, float startAngle, float endAngle)">Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured counterclockwise from 12 o'clock</s><s f="swfshape_drawcircle" u="void swfshape_drawcircle(float r)">Draws a circle of radius r centered at the current location, in a counter-clockwise fashion</s><s f="swfshape_drawcubic" u="void swfshape_drawcubic(float bx, float by, float cx, float cy, float dx, float dy)">Draws a cubic bezier curve using the current position and the three given points as control points</s><s f="swfshape_drawcubic" u="void swfshape_drawcubic(float bx, float by, float cx, float cy, float dx, float dy)">Draws a cubic bezier curve using the current position and the three given points as control points</s><s f="swfshape_drawcurve" u="void swfshape_drawcurve(float adx, float ady, float bdx, float bdy [, float cdx, float cdy])">Draws a curve from the current pen position (x, y) to the point (x+bdx, y+bdy) in the current line style, using point (x+adx, y+ady) as a control point or draws a cubic bezier to point (x+cdx, x+cdy) with control points (x+adx, y+ady) and (x+bdx, y+bdy)</s><s f="swfshape_drawcurveto" u="void swfshape_drawcurveto(float ax, float ay, float bx, float by [, float dx, float dy])">Draws a curve from the current pen position (x,y) to the point (bx, by) in the current line style, using point (ax, ay) as a control point. Or draws a cubic bezier to point (dx, dy) with control points (ax, ay) and (bx, by)</s><s f="swfshape_drawglyph" u="void swfshape_drawglyph(SWFFont font, string character [, int size])">Draws the first character in the given string into the shape using the glyph definition from the given font</s><s f="swfshape_drawline" u="void swfshape_drawline(float dx, float dy)">Draws a line from the current pen position (x, y) to the point (x+dx, y+dy) in the current line style</s><s f="swfshape_drawlineto" u="void swfshape_drawlineto(float x, float y)">Draws a line from the current pen position to shape coordinates (x, y) in the current line style</s><s f="swfshape_init" u="object swfshape_init(void)">Returns a new SWFShape object</s><s f="swfshape_movepen" u="void swfshape_movepen(float x, float y)">Moves the pen from its current location by vector (x, y)</s><s f="swfshape_movepento" u="void swfshape_movepento(float x, float y)">Moves the pen to shape coordinates (x, y)</s><s f="swfshape_setleftfill" u="void swfshape_setleftfill(int arg1 [, int g ,int b [,int a]])">Sets the left side fill style to fill in case only one parameter is passed. When 3 or 4 parameters are passed they are treated as : int r, int g, int b, int a . Solid fill is performed in this case before setting left side fill type.</s><s f="swfshape_setleftfill" u="void swfshape_setleftfill(int arg1 [, int g ,int b [,int a]])">Sets the right side fill style to fill in case only one parameter is passed. When 3 or 4 parameters are passed they are treated as : int r, int g, int b, int a . Solid fill is performed in this case before setting right side fill type.</s><s f="swfshape_setline" u="void swfshape_setline(int width, int r, int g, int b [, int a])">Sets the current line style for this SWFShape</s><s f="swfsound_init" u="class swfsound_init(string filename, int flags)">Returns a new SWFSound object from given file</s><s f="swfsprite_add" u="object swfsprite_add(object SWFCharacter)">Adds the character to the sprite, returns a displayitem object</s><s f="swfsprite_init" u="class swfsprite_init(void)">Returns a new SWFSprite object</s><s f="swfsprite_remove" u="void swfsprite_remove(object SWFDisplayItem)">Remove the named character from the sprite's display list</s><s f="swftext_init" u="class swftext_init(void)">Returns new SWFText object</s><s f="swftextfield_align" u="void swftextfield_align(int alignment)">Sets the alignment of this textfield</s><s f="swftextfield_init" u="object swftextfield_init([int flags])">Returns a new SWFTextField object</s><s f="udm_add_search_limit" u="int udm_add_search_limit(int agent, int var, string val)">Add mnoGoSearch search restrictions</s><s f="udm_alloc_agent" u="int udm_alloc_agent(string dbaddr [, string dbmode])">Allocate mnoGoSearch session</s><s f="udm_alloc_agent_array" u="int udm_alloc_agent_array(array dbaddr)">Allocate mnoGoSearch session</s><s f="udm_api_version" u="int udm_api_version()">Get mnoGoSearch API version</s><s f="udm_cat_list" u="array udm_cat_list(int agent, string category)">Get mnoGoSearch categories list with the same root</s><s f="udm_cat_path" u="array udm_cat_path(int agent, string category)">Get mnoGoSearch categories path from the root to the given catgory</s><s f="udm_check_charset" u="int udm_check_charset(int agent, string charset)">Check if the given charset is known to mnogosearch</s><s f="udm_check_stored" u="int udm_check_stored(int agent, int link, string doc_id)">Open connection to stored</s><s f="udm_clear_search_limits" u="int udm_clear_search_limits(int agent)">Clear all mnoGoSearch search restrictions</s><s f="udm_close_stored" u="int udm_close_stored(int agent, int link)">Open connection to stored</s><s f="udm_errno" u="int udm_errno(int agent)">Get mnoGoSearch error number</s><s f="udm_error" u="string udm_error(int agent)">Get mnoGoSearch error message</s><s f="udm_find" u="int udm_find(int agent, string query)">Perform search</s><s f="udm_free_agent" u="int udm_free_agent(int agent)">Free mnoGoSearch session</s><s f="udm_free_ispell_data" u="int udm_free_ispell_data(int agent)">Free memory allocated for ispell data</s><s f="udm_free_res" u="int udm_free_res(int res)">mnoGoSearch free result</s><s f="udm_get_doc_count" u="int udm_get_doc_count(int agent)">Get total number of documents in database</s><s f="udm_get_res_field" u="string udm_get_res_field(int res, int row, int field)">Fetch mnoGoSearch result field</s><s f="udm_get_res_field_ex" u="string udm_get_res_field_ex(int res, int row, string field)">Fetch mnoGoSearch result field</s><s f="udm_get_res_param" u="string udm_get_res_param(int res, int param)">Get mnoGoSearch result parameters</s><s f="udm_load_ispell_data" u="int udm_load_ispell_data(int agent, int var, string val1, [string charset], string val2, int flag)">Load ispell data</s><s f="udm_make_excerpt" u="int udm_make_excerpt(int agent, int res, int row)">Perform search</s><s f="udm_open_stored" u="int udm_open_stored(int agent, string storedaddr)">Open connection to stored</s><s f="udm_parse_query_string" u="int udm_parse_query_string(int agent, string str)">Parses query string, initialises variables and search limits taken from it</s><s f="udm_set_agent_param" u="int udm_set_agent_param(int agent, int var, string val)">Set mnoGoSearch agent session parameters</s><s f="udm_set_agent_param_ex" u="int udm_set_agent_param_ex(int agent, string var, string val)">Set mnoGoSearch agent session parameters extended</s><s f="msession_call" u="string msession_call(string fn_name, [, string param1 ], ... [,string param4])">Call the plugin function named fn_name</s><s f="msession_connect" u="bool msession_connect(string host, string port)">Connect to msession sever</s><s f="msession_count" u="int msession_count(void)">Get session count</s><s f="msession_create" u="bool msession_create(string session)">Create a session</s><s f="msession_ctl" u="int msession_ctl(string name)">Lock a session</s><s f="msession_destroy" u="bool msession_destroy(string name)">Destroy a session</s><s f="msession_disconnect" u="void msession_disconnect(void)">Disconnect from msession server</s><s f="msession_exec" u="string msession_exec(string cmdline)">executes a program on msession system</s><s f="msession_find" u="array msession_find(string name, string value)">Find all sessions with name and value</s><s f="msession_get" u="string msession_get(string session, string name, string default_value)">Get value from session</s><s f="msession_get_array" u="array msession_get_array(string session)">Get array of msession variables</s><s f="msession_get_data" u="string msession_get_data(string session)">Get data session unstructured data. (PHP sessions use this)</s><s f="msession_inc" u="string msession_inc(string session, string name)">Increment value in session</s><s f="msession_list" u="array msession_list(void)">List all sessions</s><s f="msession_listvar" u="array msession_listvar(string name)">return associative array of value:session for all sessions with a variable named 'name'</s><s f="msession_lock" u="int msession_lock(string name)">Lock a session</s><s f="msession_ping" u="bool msession_ping(void)">returns non-zero if msession is alive</s><s f="msession_plugin" u="string msession_plugin(string session, string val [, string param ])">Call the personality plugin escape function</s><s f="msession_randstr" u="string msession_randstr(int num_chars)">Get random string</s><s f="msession_set" u="bool msession_set(string session, string name, string value)">Set value in session</s><s f="msession_set_array" u="bool msession_set_array(string session, array tuples)">Set msession variables from an array</s><s f="msession_set_data" u="bool msession_set_data(string session, string value)">Set data session unstructured data. (PHP sessions use this)</s><s f="msession_timeout" u="int msession_timeout(string session [, int param ])">Set/get session timeout</s><s f="msession_uniq" u="string msession_uniq(int num_chars)">Get uniq id</s><s f="msession_unlock" u="int msession_unlock(string session, int key)">Unlock a session</s><s f="msql_affected_rows" u="int msql_affected_rows(resource query)">Return number of affected rows</s><s f="msql_close" u="bool msql_close([resource link_identifier])">Close an mSQL connection</s><s f="msql_connect" u="int msql_connect([string hostname[:port]] [, string username] [, string password])">Open a connection to an mSQL Server</s><s f="msql_create_db" u="bool msql_create_db(string database_name [, resource link_identifier])">Create an mSQL database</s><s f="msql_data_seek" u="bool msql_data_seek(resource query, int row_number)">Move internal result pointer</s><s f="msql_db_query" u="resource msql_db_query(string database_name, string query [, resource link_identifier])">Send an SQL query to mSQL</s><s f="msql_drop_db" u="bool msql_drop_db(string database_name [, resource link_identifier])">Drop (delete) an mSQL database</s><s f="msql_error" u="string msql_error(void)">Returns the text of the error message from previous mSQL operation</s><s f="msql_fetch_array" u="array msql_fetch_array(resource query [, int result_type])">Fetch a result row as an associative array</s><s f="msql_fetch_field" u="object msql_fetch_field(resource query [, int field_offset])">Get column information from a result and return as an object</s><s f="msql_fetch_object" u="object msql_fetch_object(resource query [, resource result_type])">Fetch a result row as an object</s><s f="msql_fetch_row" u="array msql_fetch_row(resource query)">Get a result row as an enumerated array</s><s f="msql_field_flags" u="string msql_field_flags(resource query, int field_offset)">Get the flags associated with the specified field in a result</s><s f="msql_field_len" u="int msql_field_len(int query, int field_offet)">Returns the length of the specified field</s><s f="msql_field_name" u="string msql_field_name(resource query, int field_index)">Get the name of the specified field in a result</s><s f="msql_field_seek" u="bool msql_field_seek(resource query, int field_offset)">Set result pointer to a specific field offset</s><s f="msql_field_table" u="string msql_field_table(resource query, int field_offset)">Get name of the table the specified field is in</s><s f="msql_field_type" u="string msql_field_type(resource query, int field_offset)">Get the type of the specified field in a result</s><s f="msql_free_result" u="bool msql_free_result(resource query)">Free result memory</s><s f="msql_list_dbs" u="resource msql_list_dbs([resource link_identifier])">List databases available on an mSQL server</s><s f="msql_list_fields" u="resource msql_list_fields(string database_name, string table_name [, resource link_identifier])">List mSQL result fields</s><s f="msql_list_tables" u="resource msql_list_tables(string database_name [, resource link_identifier])">List tables in an mSQL database</s><s f="msql_num_fields" u="int msql_num_fields(resource query)">Get number of fields in a result</s><s f="msql_num_rows" u="int msql_num_rows(resource query)">Get number of rows in a result</s><s f="msql_pconnect" u="int msql_pconnect([string hostname[:port]] [, string username] [, string password])">Open a persistent connection to an mSQL Server</s><s f="msql_query" u="resource msql_query(string query [, resource link_identifier])">Send an SQL query to mSQL</s><s f="msql_result" u="string msql_result(int query, int row [, mixed field])">Get result data</s><s f="msql_select_db" u="bool msql_select_db(string database_name [, resource link_identifier])">Select an mSQL database</s><s f="mssql_bind" u="bool mssql_bind(resource stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])">Adds a parameter to a stored procedure or a remote stored procedure</s><s f="mssql_close" u="bool mssql_close([resource conn_id])">Closes a connection to a MS-SQL server</s><s f="mssql_connect" u="int mssql_connect([string servername [, string username [, string password]]])">Establishes a connection to a MS-SQL server</s><s f="mssql_data_seek" u="bool mssql_data_seek(resource result_id, int offset)">Moves the internal row pointer of the MS-SQL result associated with the specified result identifier to pointer to the specified row number</s><s f="mssql_execute" u="mixed mssql_execute(resource stmt [, bool skip_results = false])">Executes a stored procedure on a MS-SQL server database</s><s f="mssql_fetch_array" u="array mssql_fetch_array(resource result_id [, int result_type])">Returns an associative array of the current row in the result set specified by result_id</s><s f="mssql_fetch_assoc" u="array mssql_fetch_assoc(resource result_id)">Returns an associative array of the current row in the result set specified by result_id</s><s f="mssql_fetch_batch" u="int mssql_fetch_batch(resource result_index)">Returns the next batch of records</s><s f="mssql_fetch_field" u="object mssql_fetch_field(resource result_id [, int offset])">Gets information about certain fields in a query result</s><s f="mssql_fetch_object" u="object mssql_fetch_object(resource result_id [, int result_type])">Returns a psuedo-object of the current row in the result set specified by result_id</s><s f="mssql_fetch_row" u="array mssql_fetch_row(resource result_id)">Returns an array of the current row in the result set specified by result_id</s><s f="mssql_field_length" u="int mssql_field_length(resource result_id [, int offset])">Get the length of a MS-SQL field</s><s f="mssql_field_name" u="string mssql_field_name(resource result_id [, int offset])">Returns the name of the field given by offset in the result set given by result_id</s><s f="mssql_field_seek" u="bool mssql_field_seek(int result_id, int offset)">Seeks to the specified field offset</s><s f="mssql_field_type" u="string mssql_field_type(resource result_id [, int offset])">Returns the type of a field</s><s f="mssql_free_result" u="bool mssql_free_result(resource result_index)">Free a MS-SQL result index</s><s f="mssql_free_statement" u="bool mssql_free_statement(resource result_index)">Free a MS-SQL statement index</s><s f="mssql_get_last_message" u="string mssql_get_last_message(void)">Gets the last message from the MS-SQL server</s><s f="mssql_guid_string" u="string mssql_guid_string(string binary [,int short_format])">Converts a 16 byte binary GUID to a string</s><s f="mssql_init" u="int mssql_init(string sp_name [, resource conn_id])">Initializes a stored procedure or a remote stored procedure</s><s f="mssql_min_error_severity" u="void mssql_min_error_severity(int severity)">Sets the lower error severity</s><s f="mssql_min_message_severity" u="void mssql_min_message_severity(int severity)">Sets the lower message severity</s><s f="mssql_next_result" u="bool mssql_next_result(resource result_id)">Move the internal result pointer to the next result</s><s f="mssql_num_fields" u="int mssql_num_fields(resource mssql_result_index)">Returns the number of fields fetched in from the result id specified</s><s f="mssql_num_rows" u="int mssql_num_rows(resource mssql_result_index)">Returns the number of rows fetched in from the result id specified</s><s f="mssql_pconnect" u="int mssql_pconnect([string servername [, string username [, string password]]])">Establishes a persistent connection to a MS-SQL server</s><s f="mssql_query" u="resource mssql_query(string query [, resource conn_id [, int batch_size]])">Perform an SQL query on a MS-SQL server database</s><s f="mssql_result" u="string mssql_result(resource result_id, int row, mixed field)">Returns the contents of one cell from a MS-SQL result set</s><s f="mssql_rows_affected" u="int mssql_rows_affected(resource conn_id)">Returns the number of records affected by the query</s><s f="mssql_select_db" u="bool mssql_select_db(string database_name [, resource conn_id])">Select a MS-SQL database</s><s f="mysql_affected_rows" u="int mysql_affected_rows([int link_identifier])">Gets number of affected rows in previous MySQL operation</s><s f="mysql_client_encoding" u="string mysql_client_encoding([int link_identifier])">Returns the default character set for the current connection</s><s f="mysql_close" u="bool mysql_close([int link_identifier])">Close a MySQL connection</s><s f="mysql_connect" u="resource mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])">Opens a connection to a MySQL Server</s><s f="mysql_create_db" u="bool mysql_create_db(string database_name [, int link_identifier])">Create a MySQL database</s><s f="mysql_data_seek" u="bool mysql_data_seek(resource result, int row_number)">Move internal result pointer</s><s f="mysql_db_query" u="resource mysql_db_query(string database_name, string query [, int link_identifier])">Sends an SQL query to MySQL</s><s f="mysql_drop_db" u="bool mysql_drop_db(string database_name [, int link_identifier])">Drops (delete) a MySQL database</s><s f="mysql_errno" u="int mysql_errno([int link_identifier])">Returns the number of the error message from previous MySQL operation</s><s f="mysql_error" u="string mysql_error([int link_identifier])">Returns the text of the error message from previous MySQL operation</s><s f="mysql_escape_string" u="string mysql_escape_string(string to_be_escaped)">Escape string for mysql query</s><s f="mysql_fetch_array" u="array mysql_fetch_array(resource result [, int result_type])">Fetch a result row as an array (associative, numeric or both)</s><s f="mysql_fetch_assoc" u="array mysql_fetch_assoc(resource result)">Fetch a result row as an associative array</s><s f="mysql_fetch_field" u="object mysql_fetch_field(resource result [, int field_offset])">Gets column information from a result and return as an object</s><s f="mysql_fetch_lengths" u="array mysql_fetch_lengths(resource result)">Gets max data size of each column in a result</s><s f="mysql_fetch_object" u="object mysql_fetch_object(resource result [, string class_name [, NULL|array ctor_params]])">Fetch a result row as an object</s><s f="mysql_fetch_row" u="array mysql_fetch_row(resource result)">Gets a result row as an enumerated array</s><s f="mysql_field_flags" u="string mysql_field_flags(resource result, int field_offset)">Gets the flags associated with the specified field in a result</s><s f="mysql_field_len" u="int mysql_field_len(resource result, int field_offset)">Returns the length of the specified field</s><s f="mysql_field_name" u="string mysql_field_name(resource result, int field_index)">Gets the name of the specified field in a result</s><s f="mysql_field_seek" u="bool mysql_field_seek(resource result, int field_offset)">Sets result pointer to a specific field offset</s><s f="mysql_field_table" u="string mysql_field_table(resource result, int field_offset)">Gets name of the table the specified field is in</s><s f="mysql_field_type" u="string mysql_field_type(resource result, int field_offset)">Gets the type of the specified field in a result</s><s f="mysql_free_result" u="bool mysql_free_result(resource result)">Free result memory</s><s f="mysql_get_client_info" u="string mysql_get_client_info(void)">Returns a string that represents the client library version</s><s f="mysql_get_host_info" u="string mysql_get_host_info([int link_identifier])">Returns a string describing the type of connection in use, including the server host name</s><s f="mysql_get_proto_info" u="int mysql_get_proto_info([int link_identifier])">Returns the protocol version used by current connection</s><s f="mysql_get_server_info" u="string mysql_get_server_info([int link_identifier])">Returns a string that represents the server version number</s><s f="mysql_info" u="string mysql_info([int link_identifier])">Returns a string containing information about the most recent query</s><s f="mysql_insert_id" u="int mysql_insert_id([int link_identifier])">Gets the ID generated from the previous INSERT operation</s><s f="mysql_list_dbs" u="resource mysql_list_dbs([int link_identifier])">List databases available on a MySQL server</s><s f="mysql_list_fields" u="resource mysql_list_fields(string database_name, string table_name [, int link_identifier])">List MySQL result fields</s><s f="mysql_list_processes" u="resource mysql_list_processes([int link_identifier])">Returns a result set describing the current server threads</s><s f="mysql_list_tables" u="resource mysql_list_tables(string database_name [, int link_identifier])">List tables in a MySQL database</s><s f="mysql_num_fields" u="int mysql_num_fields(resource result)">Gets number of fields in a result</s><s f="mysql_num_rows" u="int mysql_num_rows(resource result)">Gets number of rows in a result</s><s f="mysql_pconnect" u="resource mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])">Opens a persistent connection to a MySQL Server</s><s f="mysql_ping" u="bool mysql_ping([int link_identifier])">Ping a server connection. If no connection then reconnect.</s><s f="mysql_query" u="resource mysql_query(string query [, int link_identifier])">Sends an SQL query to MySQL</s><s f="mysql_real_escape_string" u="string mysql_real_escape_string(string to_be_escaped [, int link_identifier])">Escape special characters in a string for use in a SQL statement, taking into account the current charset of the connection</s><s f="mysql_result" u="mixed mysql_result(resource result, int row [, mixed field])">Gets result data</s><s f="mysql_select_db" u="bool mysql_select_db(string database_name [, int link_identifier])">Selects a MySQL database</s><s f="mysql_stat" u="string mysql_stat([int link_identifier])">Returns a string containing status information</s><s f="mysql_thread_id" u="int mysql_thread_id([int link_identifier])">Returns the thread id of current connection</s><s f="mysql_unbuffered_query" u="resource mysql_unbuffered_query(string query [, int link_identifier])">Sends an SQL query to MySQL, without fetching and buffering the result rows</s><s f="mysqli_affected_rows" u="mixed mysqli_affected_rows(object link)">Get number of affected rows in previous MySQL operation</s><s f="mysqli_autocommit" u="bool mysqli_autocommit(object link, bool mode)">Turn auto commit on or of</s><s f="mysqli_change_user" u="bool mysqli_change_user(object link, string user, string password, string database)">Change logged-in user of the active connection</s><s f="mysqli_character_set_name" u="string mysqli_character_set_name(object link)">Returns the name of the character set used for this connection</s><s f="mysqli_close" u="bool mysqli_close(object link)">Close connection</s><s f="mysqli_commit" u="bool mysqli_commit(object link)">Commit outstanding actions and close transaction</s><s f="mysqli_data_seek" u="bool mysqli_data_seek(object result, int offset)">Move internal result pointer</s><s f="mysqli_debug" u="void mysqli_debug(string debug)"></s><s f="mysqli_dump_debug_info" u="bool mysqli_dump_debug_info(object link)"></s><s f="mysqli_errno" u="int mysqli_errno(object link)">Returns the numerical value of the error message from previous MySQL operation</s><s f="mysqli_error" u="string mysqli_error(object link)">Returns the text of the error message from previous MySQL operation</s><s f="mysqli_field_count" u="int mysqli_field_count(object link)">Fetch the number of fields returned by the last query for the given link</s><s f="mysqli_field_seek" u="int mysqli_field_seek(object result, int fieldnr)">Set result pointer to a specified field offset</s><s f="mysqli_field_tell" u="int mysqli_field_tell(object result)">Get current field offset of result pointer</s><s f="mysqli_free_result" u="void mysqli_free_result(object result)">Free query result memory for the given result handle</s><s f="mysqli_get_client_info" u="string mysqli_get_client_info(void)">Get MySQL client info</s><s f="mysqli_get_client_version" u="int mysqli_get_client_version(void)">Get MySQL client info</s><s f="mysqli_get_proto_info" u="int mysqli_get_proto_info(object link)">Get MySQL protocol information</s><s f="mysqli_get_server_info" u="string mysqli_get_server_info(object link)">Get MySQL server info</s><s f="mysqli_get_server_version" u="int mysqli_get_server_version(object link)">Return the MySQL version for the server referenced by the given link</s><s f="mysqli_info" u="string mysqli_info(object link)">Get information about the most recent query</s><s f="mysqli_init" u="resource mysqli_init(void)">Initialize mysqli and return a resource for use with mysql_real_connect</s><s f="mysqli_insert_id" u="mixed mysqli_insert_id(object link)">Get the ID generated from the previous INSERT operation</s><s f="mysqli_kill" u="bool mysqli_kill(object link, int processid)">Kill a mysql process on the server</s><s f="mysqli_more_results" u="bool mysqli_more_results(object link)">check if there any more query results from a multi query</s><s f="mysqli_next_result" u="bool mysqli_next_result(object link)">read next result from multi_query</s><s f="mysqli_num_fields" u="int mysqli_num_fields(object result)">Get number of fields in result</s><s f="mysqli_num_rows" u="mixed mysqli_num_rows(object result)">Get number of rows in result</s><s f="mysqli_options" u="bool mysqli_options(object link, int flags, mixed values)">Set options</s><s f="mysqli_ping" u="bool mysqli_ping(object link)">Ping a server connection or reconnect if there is no connection</s><s f="mysqli_prepare" u="mixed mysqli_prepare(object link, string query)">Prepare a SQL statement for execution</s><s f="mysqli_real_connect" u="bool mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])">Open a connection to a mysql server</s><s f="mysqli_real_escape_string" u="string mysqli_real_escape_string(object link, string escapestr)">Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection</s><s f="mysqli_real_query" u="bool mysqli_real_query(object link, string query)">Binary-safe version of mysql_query()</s><s f="mysqli_rollback" u="bool mysqli_rollback(object link)">Undo actions from current transaction</s><s f="mysqli_select_db" u="string mysqli_select_db(object link, string dbname)">Select a MySQL database</s><s f="mysqli_send_long_data" u="bool mysqli_send_long_data(object stmt, int param_nr, string data)"></s><s f="mysqli_server_end" u="void mysqli_server_end(void)"></s><s f="mysqli_server_init" u="bool mysqli_server_init(void)">initialize embedded server</s><s f="mysqli_sqlstate" u="string mysqli_sqlstate(object link)">Returns the SQLSTATE error from previous MySQL operation</s><s f="mysqli_ssl_set" u="bool mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])"></s><s f="mysqli_stat" u="mixed mysqli_stat(object link)">Get current system status</s><s f="mysqli_stmt_affected_rows" u="mixed mysqli_stmt_affected_rows(object stmt)">Return the number of rows affected in the last query for the given link</s><s f="mysqli_stmt_bind_param" u="bool mysqli_stmt_bind_param(object stmt, string types, mixed variable [,mixed,....])">Bind variables to a prepared statement as parameters</s><s f="mysqli_stmt_bind_result" u="bool mysqli_stmt_bind_result(object stmt, mixed var, [,mixed, ...])">Bind variables to a prepared statement for result storage</s><s f="mysqli_stmt_close" u="bool mysqli_stmt_close(object stmt)">Close statement</s><s f="mysqli_stmt_data_seek" u="void mysqli_stmt_data_seek(object stmt, int offset)">Move internal result pointer</s><s f="mysqli_stmt_errno" u="int mysqli_stmt_errno(object stmt)"></s><s f="mysqli_stmt_error" u="string mysqli_stmt_error(object stmt)"></s><s f="mysqli_stmt_execute" u="bool mysqli_stmt_execute(object stmt)">Execute a prepared statement</s><s f="mysqli_stmt_fetch" u="mixed mysqli_stmt_fetch(object stmt)">Fetch results from a prepared statement into the bound variables</s><s f="mysqli_stmt_free_result" u="void mysqli_stmt_free_result(object stmt)">Free stored result memory for the given statement handle</s><s f="mysqli_stmt_init" u="object mysqli_stmt_init(object link)">Initialize statement object</s><s f="mysqli_stmt_num_rows" u="mixed mysqli_stmt_num_rows(object stmt)">Return the number of rows in statements result set</s><s f="mysqli_stmt_prepare" u="bool mysqli_stmt_prepare(object link, string query)">prepare server side statement with query</s><s f="mysqli_stmt_reset" u="void mysqli_stmt_reset(object stmt)">reset a prepared statement</s><s f="mysqli_stmt_result_metadata" u="mixed mysqli_stmt_result_metadata(object stmt)">return result set from statement</s><s f="mysqli_stmt_sqlstate" u="string mysqli_stmt_sqlstate(object stmt)"></s><s f="mysqli_stmt_store_result" u="bool mysqli_stmt_store_result(stmt)"></s><s f="mysqli_store_result" u="object mysqli_store_result(object link)">Buffer result set on client</s><s f="mysqli_thread_id" u="int mysqli_thread_id(object link)">Return the current thread ID</s><s f="mysqli_thread_safe" u="bool mysqli_thread_safe(void)">Return whether thread safety is given or not</s><s f="mysqli_use_result" u="mixed mysqli_use_result(object link)">Directly retrieve query results - do not buffer results on client side</s><s f="mysqli_connect" u="object mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])">Open a connection to a mysql server</s><s f="mysqli_connect_errno" u="int mysqli_connect_errno(void)">Returns the numerical value of the error message from last connect command</s><s f="mysqli_connect_error" u="string mysqli_connect_error(void)">Returns the text of the error message from previous MySQL operation</s><s f="mysqli_embedded_connect" u="object mysqli_embedded_connect(void)">Open a connection to a embedded mysql server</s><s f="mysqli_multi_query" u="bool mysqli_multi_query(object link, string query)">Binary-safe version of mysql_query()</s><s f="mysqli_query" u="mixed mysqli_query(object link, string query [,int resultmode])"></s><s f="mysqli_disable_reads_from_master" u="void mysqli_disable_reads_from_master(object link)"></s><s f="mysqli_disable_rpl_parse" u="void mysqli_disable_rpl_parse(object link)"></s><s f="mysqli_enable_reads_from_master" u="void mysqli_enable_reads_from_master(object link)"></s><s f="mysqli_enable_rpl_parse" u="void mysqli_enable_rpl_parse(object link)"></s><s f="mysqli_master_query" u="bool mysqli_master_query(object link, string query)">Enforce execution of a query on the master in a master/slave setup</s><s f="mysqli_rpl_parse_enabled" u="int mysqli_rpl_parse_enabled(object link)"></s><s f="mysqli_rpl_probe" u="bool mysqli_rpl_probe(object link)"></s><s f="mysqli_rpl_query_type" u="int mysqli_rpl_query_type(string query)"></s><s f="mysqli_send_query" u="bool mysqli_send_query(object link, string query)"></s><s f="mysqli_slave_query" u="bool mysqli_slave_query(object link, string query)">Enforce execution of a query on a slave in a master/slave setup</s><s f="ncurses_addch" u="int ncurses_addch(int ch)">Adds character at current position and advance cursor</s><s f="ncurses_addchnstr" u="int ncurses_addchnstr(string s, int n)">Adds attributed string with specified length at current position</s><s f="ncurses_addchstr" u="int ncurses_addchstr(string s)">Adds attributed string at current position</s><s f="ncurses_addnstr" u="int ncurses_addnstr(string s, int n)">Adds string with specified length at current position</s><s f="ncurses_addstr" u="int ncurses_addstr(string text)">Outputs text at current position</s><s f="ncurses_assume_default_colors" u="int ncurses_assume_default_colors(int fg, int bg)">Defines default colors for color 0</s><s f="ncurses_attroff" u="int ncurses_attroff(int attributes)">Turns off the given attributes</s><s f="ncurses_attron" u="int ncurses_attron(int attributes)">Turns on the given attributes</s><s f="ncurses_attrset" u="int ncurses_attrset(int attributes)">Sets given attributes</s><s f="ncurses_baudrate" u="int ncurses_baudrate(void)">Returns baudrate of terminal</s><s f="ncurses_beep" u="int ncurses_beep(void)">Let the terminal beep</s><s f="ncurses_bkgd" u="int ncurses_bkgd(int attrchar)">Sets background property for terminal screen</s><s f="ncurses_bkgdset" u="void ncurses_bkgdset(int attrchar)">Controls screen background</s><s f="ncurses_border" u="int ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)">Draws a border around the screen using attributed characters</s><s f="ncurses_bottom_panel" u="int ncurses_bottom_panel(resource panel)">Moves a visible panel to the bottom of the stack</s><s f="ncurses_can_change_color" u="bool ncurses_can_change_color(void)">Checks if we can change terminals colors</s><s f="ncurses_cbreak" u="bool ncurses_cbreak(void)">Switches of input buffering</s><s f="ncurses_clear" u="bool ncurses_clear(void)">Clears screen</s><s f="ncurses_clrtobot" u="bool ncurses_clrtobot(void)">Clears screen from current position to bottom</s><s f="ncurses_clrtoeol" u="bool ncurses_clrtoeol(void)">Clears screen from current position to end of line</s><s f="ncurses_color_content" u="int ncurses_color_content(int color, int &amp;r, int &amp;g, int &amp;b)">Gets the RGB value for color</s><s f="ncurses_color_set" u="int ncurses_color_set(int pair)">Sets fore- and background color</s><s f="ncurses_curs_set" u="int ncurses_curs_set(int visibility)">Sets cursor state</s><s f="ncurses_def_prog_mode" u="int ncurses_def_prog_mode(void)">Saves terminals (program) mode</s><s f="ncurses_def_shell_mode" u="int ncurses_def_shell_mode(void)">Saves terminal (shell) mode</s><s f="ncurses_define_key" u="int ncurses_define_key(string definition, int keycode)">Defines a keycode</s><s f="ncurses_del_panel" u="bool ncurses_del_panel(resource panel)">Remove panel from the stack and delete it (but not the associated window)</s><s f="ncurses_delay_output" u="int ncurses_delay_output(int milliseconds)">Delays output on terminal using padding characters</s><s f="ncurses_delch" u="int ncurses_delch(void)">Deletes character at current position, move rest of line left</s><s f="ncurses_deleteln" u="int ncurses_deleteln(void)">Deletes line at current position, move rest of screen up</s><s f="ncurses_delwin" u="int ncurses_delwin(resource window)">Deletes a ncurses window</s><s f="ncurses_doupdate" u="int ncurses_doupdate(void)">Writes all prepared refreshes to terminal</s><s f="ncurses_echo" u="int ncurses_echo(void)">Activates keyboard input echo</s><s f="ncurses_echochar" u="int ncurses_echochar(int character)">Single character output including refresh</s><s f="ncurses_end" u="int ncurses_end(void)">Stops using ncurses, clean up the screen</s><s f="ncurses_erase" u="int ncurses_erase(void)">Erases terminal screen</s><s f="ncurses_erasechar" u="string ncurses_erasechar(void)">Returns current erase character</s><s f="ncurses_filter" u="void ncurses_filter(void)"></s><s f="ncurses_flash" u="int ncurses_flash(void)">Flashes terminal screen (visual bell)</s><s f="ncurses_flushinp" u="int ncurses_flushinp(void)">Flushes keyboard input buffer</s><s f="ncurses_getch" u="int ncurses_getch(void)">Reads a character from keyboard</s><s f="ncurses_getmaxyx" u="void ncurses_getmaxyx(resource window, int &amp;y, int &amp;x)">Returns the size of a window</s><s f="ncurses_getmouse" u="bool ncurses_getmouse(array &amp;mevent)">Reads mouse event from queue. The content of mevent is cleared before new data is added.</s><s f="ncurses_getyx" u="void ncurses_getyx(resource window, int &amp;y, int &amp;x)">Returns the current cursor position for a window</s><s f="ncurses_halfdelay" u="int ncurses_halfdelay(int tenth)">Puts terminal into halfdelay mode</s><s f="ncurses_has_colors" u="bool ncurses_has_colors(void)">Checks if terminal has colors</s><s f="ncurses_has_ic" u="int ncurses_has_ic(void)">Checks for insert- and delete-capabilities</s><s f="ncurses_has_il" u="int ncurses_has_il(void)">Checks for line insert- and delete-capabilities</s><s f="ncurses_has_key" u="int ncurses_has_key(int keycode)">Checks for presence of a function key on terminal keyboard</s><s f="ncurses_hide_panel" u="int ncurses_hide_panel(resource panel)">Remove panel from the stack, making it invisible</s><s f="ncurses_hline" u="int ncurses_hline(int charattr, int n)">Draws a horizontal line at current position using an attributed character and max. n characters long</s><s f="ncurses_inch" u="string ncurses_inch(void)">Gets character and attribute at current position</s><s f="ncurses_init" u="int ncurses_init(void)">Initializes ncurses</s><s f="ncurses_init_color" u="int ncurses_init_color(int color, int r, int g, int b)">Sets new RGB value for color</s><s f="ncurses_init_pair" u="int ncurses_init_pair(int pair, int fg, int bg)">Allocates a color pair</s><s f="ncurses_insch" u="int ncurses_insch(int character)">Inserts character moving rest of line including character at current position</s><s f="ncurses_insdelln" u="int ncurses_insdelln(int count)">Inserts lines before current line scrolling down (negative numbers delete and scroll up)</s><s f="ncurses_insertln" u="int ncurses_insertln(void)">Inserts a line, move rest of screen down</s><s f="ncurses_insstr" u="int ncurses_insstr(string text)">Inserts string at current position, moving rest of line right</s><s f="ncurses_instr" u="int ncurses_instr(string &amp;buffer)">Reads string from terminal screen</s><s f="ncurses_isendwin" u="int ncurses_isendwin(void)">Ncurses is in endwin mode, normal screen output may be performed</s><s f="ncurses_keyok" u="int ncurses_keyok(int keycode, int enable)">Enables or disable a keycode</s><s f="ncurses_keypad" u="int ncurses_keypad(resource window, bool bf)">Turns keypad on or off</s><s f="ncurses_killchar" u="string ncurses_killchar(void)">Returns current line kill character</s><s f="ncurses_longname" u="string ncurses_longname(void)">Returns terminal description</s><s f="ncurses_meta" u="int ncurses_meta(resource window, bool 8bit)">Enables/Disable 8-bit meta key information</s><s f="ncurses_mouse_trafo" u="bool ncurses_mouse_trafo(int &amp;y, int &amp;x, bool toscreen)">Transforms coordinates</s><s f="ncurses_mouseinterval" u="int ncurses_mouseinterval(int milliseconds)">Sets timeout for mouse button clicks</s><s f="ncurses_mousemask" u="int ncurses_mousemask(int newmask, int &amp;oldmask)">Returns and sets mouse options</s><s f="ncurses_move" u="int ncurses_move(int y, int x)">Moves output position</s><s f="ncurses_move_panel" u="int ncurses_move_panel(resource panel, int startx, int starty)">Moves a panel so that it's upper-left corner is at [startx, starty]</s><s f="ncurses_mvaddch" u="int ncurses_mvaddch(int y, int x, int c)">Moves current position and add character</s><s f="ncurses_mvaddchnstr" u="int ncurses_mvaddchnstr(int y, int x, string s, int n)">Moves position and add attrributed string with specified length</s><s f="ncurses_mvaddchstr" u="int ncurses_mvaddchstr(int y, int x, string s)">Moves position and add attributed string</s><s f="ncurses_mvaddnstr" u="int ncurses_mvaddnstr(int y, int x, string s, int n)">Moves position and add string with specified length</s><s f="ncurses_mvaddstr" u="int ncurses_mvaddstr(int y, int x, string s)">Moves position and add string</s><s f="ncurses_mvcur" u="int ncurses_mvcur(int old_y,int old_x, int new_y, int new_x)">Moves cursor immediately</s><s f="ncurses_mvdelch" u="int ncurses_mvdelch(int y, int x)">Moves position and delete character, shift rest of line left</s><s f="ncurses_mvgetch" u="int ncurses_mvgetch(int y, int x)">Moves position and get character at new position</s><s f="ncurses_mvhline" u="int ncurses_mvhline(int y, int x, int attrchar, int n)">Sets new position and draw a horizontal line using an attributed character and max. n characters long</s><s f="ncurses_mvinch" u="int ncurses_mvinch(int y, int x)">Moves position and get attributed character at new position</s><s f="ncurses_mvvline" u="int ncurses_mvvline(int y, int x, int attrchar, int n)">Sets new position and draw a vertical line using an attributed character and max. n characters long</s><s f="ncurses_mvwaddstr" u="int ncurses_mvwaddstr(resource window, int y, int x, string text)">Adds string at new position in window</s><s f="ncurses_napms" u="int ncurses_napms(int milliseconds)">Sleep</s><s f="ncurses_new_panel" u="resource ncurses_new_panel(resource window)">Create a new panel and associate it with window</s><s f="ncurses_newpad" u="resource ncurses_newpad(int rows, int cols)">Creates a new pad (window)</s><s f="ncurses_newwin" u="int ncurses_newwin(int rows, int cols, int y, int x)">Creates a new window</s><s f="ncurses_nl" u="int ncurses_nl(void)">Translates newline and carriage return / line feed</s><s f="ncurses_nocbreak" u="int ncurses_nocbreak(void)">Switches terminal to cooked mode</s><s f="ncurses_noecho" u="int ncurses_noecho(void)">Switches off keyboard input echo</s><s f="ncurses_nonl" u="int ncurses_nonl(void)">Do not ranslate newline and carriage return / line feed</s><s f="ncurses_noqiflush" u="int ncurses_noqiflush(void)">Do not flush on signal characters</s><s f="ncurses_noraw" u="bool ncurses_noraw(void)">Switches terminal out of raw mode</s><s f="ncurses_pair_content" u="int ncurses_pair_content(int pair, int &amp;f, int &amp;b)">Gets the RGB value for color</s><s f="ncurses_panel_above" u="resource ncurses_panel_above(resource panel)">Returns the panel above panel. If panel is null, returns the bottom panel in the stack</s><s f="ncurses_panel_below" u="resource ncurses_panel_below(resource panel)">Returns the panel below panel. If panel is null, returns the top panel in the stack</s><s f="ncurses_panel_window" u="resource ncurses_panel_window(resource panel)">Returns the window associated with panel</s><s f="ncurses_pnoutrefresh" u="int ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)">Copys a region from a pad into the virtual screen</s><s f="ncurses_prefresh" u="int ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)">Copys a region from a pad into the virtual screen</s><s f="ncurses_putp" u="int ncurses_putp(string text)">???</s><s f="ncurses_qiflush" u="void ncurses_qiflush(void)">Flushes on signal characters</s><s f="ncurses_raw" u="int ncurses_raw(void)">Switches terminal into raw mode</s><s f="ncurses_refresh" u="int ncurses_refresh(int ch)">Refresh screen</s><s f="ncurses_replace_panel" u="int ncurses_replace_panel(resource panel, resource window)">Replaces the window associated with panel</s><s f="ncurses_reset_prog_mode" u="int ncurses_reset_prog_mode(void)">Resets the prog mode saved by def_prog_mode</s><s f="ncurses_reset_shell_mode" u="int ncurses_reset_shell_mode(void)">Resets the shell mode saved by def_shell_mode</s><s f="ncurses_resetty" u="int ncurses_resetty(void)">Restores saved terminal state</s><s f="ncurses_savetty" u="int ncurses_savetty(void)">Saves terminal state</s><s f="ncurses_scr_dump" u="int ncurses_scr_dump(string filename)">Dumps screen content to file</s><s f="ncurses_scr_init" u="int ncurses_scr_init(string filename)">Initializes screen from file dump</s><s f="ncurses_scr_restore" u="int ncurses_scr_restore(string filename)">Restores screen from file dump</s><s f="ncurses_scr_set" u="int ncurses_scr_set(string filename)">Inherits screen from file dump</s><s f="ncurses_scrl" u="int ncurses_scrl(int count)">Scrolls window content up or down without changing current position</s><s f="ncurses_show_panel" u="int ncurses_show_panel(resource panel)">Places an invisible panel on top of the stack, making it visible</s><s f="ncurses_slk_attr" u="int ncurses_slk_attr(void)">Returns current soft label keys attribute</s><s f="ncurses_slk_attroff" u="int ncurses_slk_attroff(int intarg)">???</s><s f="ncurses_slk_attron" u="int ncurses_slk_attron(int intarg)">???</s><s f="ncurses_slk_attrset" u="int ncurses_slk_attrset(int intarg)">???</s><s f="ncurses_slk_clear" u="int ncurses_slk_clear(void)">Clears soft label keys from screen</s><s f="ncurses_slk_color" u="int ncurses_slk_color(int intarg)">Sets color for soft label keys</s><s f="ncurses_slk_init" u="int ncurses_slk_init(int intarg)">Inits soft label keys</s><s f="ncurses_slk_noutrefresh" u="int ncurses_slk_noutrefresh(void)">Copies soft label keys to virtual screen</s><s f="ncurses_slk_refresh" u="int ncurses_slk_refresh(void)">Copies soft label keys to screen</s><s f="ncurses_slk_restore" u="int ncurses_slk_restore(void)">Restores soft label keys</s><s f="ncurses_slk_set" u="bool ncurses_slk_set(int labelnr, string label, int format)">Sets function key labels</s><s f="ncurses_slk_touch" u="int ncurses_slk_touch(void)">Forces output when ncurses_slk_noutrefresh is performed</s><s f="ncurses_standend" u="int ncurses_standend(void)">Stops using 'standout' attribute</s><s f="ncurses_standout" u="int ncurses_standout(void)">Starts using 'standout' attribute</s><s f="ncurses_start_color" u="int ncurses_start_color(void)">Starts using colors</s><s f="ncurses_termattrs" u="int ncurses_termattrs(void)">Returns a logical OR of all attribute flags supported by terminal</s><s f="ncurses_termname" u="string ncurses_termname(void)">Returns terminal name</s><s f="ncurses_timeout" u="void ncurses_timeout(int millisec)">Sets timeout for special key sequences</s><s f="ncurses_top_panel" u="int ncurses_top_panel(resource panel)">Moves a visible panel to the top of the stack</s><s f="ncurses_typeahead" u="int ncurses_typeahead(int fd)">Specifys different filedescriptor for typeahead checking</s><s f="ncurses_ungetch" u="int ncurses_ungetch(int keycode)">Puts a character back into the input stream</s><s f="ncurses_ungetmouse" u="int ncurses_ungetmouse(array mevent)">Pushes mouse event to queue</s><s f="ncurses_update_panels" u="void ncurses_update_panels(void)">Refreshes the virtual screen to reflect the relations between panels in the stack.</s><s f="ncurses_use_default_colors" u="int ncurses_use_default_colors(void)">Assigns terminal default colors to color id -1</s><s f="ncurses_use_env" u="void ncurses_use_env(int flag)">Controls use of environment information about terminal size</s><s f="ncurses_use_extended_names" u="int ncurses_use_extended_names(bool flag)">Controls use of extended names in terminfo descriptions</s><s f="ncurses_vidattr" u="int ncurses_vidattr(int intarg)">???</s><s f="ncurses_vline" u="int ncurses_vline(int charattr, int n)">Draws a vertical line at current position using an attributed character and max. n characters long</s><s f="ncurses_waddch" u="int ncurses_waddch(resource window, int ch)">Adds character at current position in a window and advance cursor</s><s f="ncurses_waddstr" u="int ncurses_waddstr(resource window, string str [, int n])">Outputs text at current postion in window</s><s f="ncurses_wattroff" u="int ncurses_wattroff(resource window, int attrs)">Turns off attributes for a window</s><s f="ncurses_wattron" u="int ncurses_wattron(resource window, int attrs)">Turns on attributes for a window</s><s f="ncurses_wattrset" u="int ncurses_wattrset(resource window, int attrs)">Set the attributes for a window</s><s f="ncurses_wborder" u="int ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)">Draws a border around the window using attributed characters</s><s f="ncurses_wclear" u="int ncurses_wclear(resource window)">Clears window</s><s f="ncurses_wcolor_set" u="int ncurses_wcolor_set(resource window, int color_pair)">Sets windows color pairings</s><s f="ncurses_werase" u="int ncurses_werase(resource window)">Erase window contents</s><s f="ncurses_wgetch" u="int ncurses_wgetch(resource window)">Reads a character from keyboard (window)</s><s f="ncurses_whline" u="int ncurses_whline(resource window, int charattr, int n)">Draws a horizontal line in a window at current position using an attributed character and max. n characters long</s><s f="ncurses_wmouse_trafo" u="bool ncurses_wmouse_trafo(resource window, int &amp;y, int &amp;x, bool toscreen)">Transforms window/stdscr coordinates</s><s f="ncurses_wmove" u="int ncurses_wmove(resource window, int y, int x)">Moves windows output position</s><s f="ncurses_wnoutrefresh" u="int ncurses_wnoutrefresh(resource window)">Copies window to virtual screen</s><s f="ncurses_wrefresh" u="int ncurses_wrefresh(resource window)">Refreshes window on terminal screen</s><s f="ncurses_wstandend" u="int ncurses_wstandend(resource window)">End standout mode for a window</s><s f="ncurses_wstandout" u="int ncurses_wstandout(resource window)">Enter standout mode for a window</s><s f="ncurses_wvline" u="int ncurses_wvline(resource window, int charattr, int n)">Draws a vertical line in a window at current position using an attributed character and max. n characters long</s><s f="oci_bind_by_name" u="bool oci_bind_by_name(resource stmt, string name, mixed &amp;var, [, int maxlength [, int type]])">Bind a PHP variable to an Oracle placeholder by name</s><s f="oci_cancel" u="bool oci_cancel(resource stmt)">Cancel reading from a cursor</s><s f="oci_close" u="bool oci_close(resource conn)">Disconnect from database</s><s f="oci_collection_append" u="bool oci_collection_append(string value)">Append an object to the collection</s><s f="oci_collection_assign" u="bool oci_collection_assign(object from)">Assign a collection from another existing collection</s><s f="oci_collection_element_assign" u="bool oci_collection_element_assign(int index, string val)">Assign element val to collection at index ndx</s><s f="oci_collection_element_get" u="string oci_collection_element_get(int ndx)">Retrieve the value at collection index ndx</s><s f="oci_collection_max" u="int oci_collection_max()">Return the max value of a collection. For a varray this is the maximum length of the array</s><s f="oci_collection_size" u="int oci_collection_size()">Return the size of a collection</s><s f="oci_collection_trim" u="bool oci_collection_trim(int num)">Trim num elements from the end of a collection</s><s f="oci_commit" u="bool oci_commit(resource conn)">Commit the current context</s><s f="oci_connect" u="resource oci_connect(string user, string pass [, string db])">Connect to an Oracle database and log on. Returns a new session.</s><s f="oci_define_by_name" u="bool oci_define_by_name(resource stmt, string name, mixed &amp;var [, int type])">Define a PHP variable to an Oracle column by name</s><s f="oci_error" u="array oci_error([resource stmt|conn|global])">Return the last error of stmt|conn|global. If no error happened returns false.</s><s f="oci_execute" u="bool oci_execute(resource stmt [, int mode])">Execute a parsed statement</s><s f="oci_fetch" u="bool oci_fetch(resource stmt)">Prepare a new row of data for reading</s><s f="oci_fetch_all" u="int oci_fetch_all(resource stmt, array &amp;output[, int skip[, int maxrows[, int flags]]])">Fetch all rows of result data into an array</s><s f="oci_fetch_array" u="array oci_fetch_array( resource stmt [, int mode ])">Fetch a result row as an array</s><s f="oci_fetch_assoc" u="array oci_fetch_assoc( resource stmt )">Fetch a result row as an associative array</s><s f="oci_fetch_object" u="object oci_fetch_object( resource stmt )">Fetch a result row as an object</s><s f="oci_fetch_row" u="array oci_fetch_row( resource stmt )">Fetch a result row as an enumerated array</s><s f="oci_field_is_null" u="bool oci_field_is_null(resource stmt, int col)">Tell whether a column is NULL</s><s f="oci_field_name" u="string oci_field_name(resource stmt, int col)">Tell the name of a column</s><s f="oci_field_precision" u="int oci_field_precision(resource stmt, int col)">Tell the precision of a column</s><s f="oci_field_scale" u="int oci_field_scale(resource stmt, int col)">Tell the scale of a column</s><s f="oci_field_size" u="int oci_field_size(resource stmt, int col)">Tell the maximum data size of a column</s><s f="oci_field_type" u="mixed oci_field_type(resource stmt, int col)">Tell the data type of a column</s><s f="oci_field_type_raw" u="int oci_field_type_raw(resource stmt, int col)">Tell the raw oracle data type of a column</s><s f="oci_free_collection" u="bool oci_free_collection()">Deletes collection object</s><s f="oci_free_descriptor" u="bool oci_free_descriptor()">Deletes large object description</s><s f="oci_free_statement" u="bool oci_free_statement(resource stmt)">Free all resources associated with a statement</s><s f="oci_internal_debug" u="void oci_internal_debug(int onoff)">Toggle internal debugging output for the OCI extension</s><s f="oci_lob_append" u="bool oci_lob_append( object lob )">Appends data from a LOB to another LOB</s><s f="oci_lob_close" u="bool oci_lob_close()">Closes lob descriptor</s><s f="oci_lob_copy" u="bool oci_lob_copy( object lob_to, object lob_from [, int length ] )">Copies data from a LOB to another LOB</s><s f="oci_lob_eof" u="bool oci_lob_eof()">Checks if EOF is reached</s><s f="oci_lob_erase" u="int oci_lob_erase( [ int offset [, int length ] ] )">Erases a specified portion of the internal LOB, starting at a specified offset</s><s f="oci_lob_export" u="bool oci_lob_export([string filename [, int start [, int length]]])">Writes a large object into a file</s><s f="oci_lob_flush" u="bool oci_lob_flush( [ int flag ] )">Flushes the LOB buffer</s><s f="oci_lob_import" u="bool oci_lob_import( string filename )">Saves a large object to file</s><s f="oci_lob_is_equal" u="bool oci_lob_is_equal( object lob1, object lob2 )">Tests to see if two LOB/FILE locators are equal</s><s f="oci_lob_load" u="string oci_lob_load()">Loads a large object</s><s f="oci_lob_read" u="string oci_lob_read( int length )">Reads particular part of a large object</s><s f="oci_lob_rewind" u="bool oci_lob_rewind()">Rewind pointer of a LOB</s><s f="oci_lob_save" u="bool oci_lob_save( string data [, int offset ])">Saves a large object</s><s f="oci_lob_seek" u="bool oci_lob_seek( int offset [, int whence ])">Moves the pointer of a LOB</s><s f="oci_lob_size" u="int oci_lob_size()">Returns size of a large object</s><s f="oci_lob_tell" u="int oci_lob_tell()">Tells LOB pointer position</s><s f="oci_lob_truncate" u="bool oci_lob_truncate( [ int length ])">Truncates a LOB</s><s f="oci_lob_write" u="int oci_lob_write( string string [, int length ])">Writes data to current position of a LOB</s><s f="oci_lob_write_temporary" u="bool oci_lob_write_temporary(string var [, int lob_type])">Writes temporary blob</s><s f="oci_new_collection" u="object oci_new_collection(resource connection, string tdo [, string schema])">Initialize a new collection</s><s f="oci_new_connect" u="resource oci_new_connect(string user, string pass [, string db])">Connect to an Oracle database and log on. Returns a new session.</s><s f="oci_new_cursor" u="resource oci_new_cursor(resource conn)">Return a new cursor (Statement-Handle) - use this to bind ref-cursors!</s><s f="oci_new_descriptor" u="object oci_new_descriptor(resource connection [, int type])">Initialize a new empty descriptor LOB/FILE (LOB is default)</s><s f="oci_num_fields" u="int oci_num_fields(resource stmt)">Return the number of result columns in a statement</s><s f="oci_num_rows" u="int oci_num_rows(resource stmt)">Return the row count of an OCI statement</s><s f="oci_parse" u="resource oci_parse(resource conn, string query)">Parse a query and return a statement</s><s f="oci_password_change" u="bool oci_password_change(resource conn, string username, string old_password, string new_password)">Changes the password of an account</s><s f="oci_pconnect" u="resource oci_pconnect(string user, string pass [, string db])">Connect to an Oracle database using a persistent connection and log on. Returns a new session.</s><s f="oci_result" u="string oci_result(resource stmt, mixed column)">Return a single column of result data</s><s f="oci_rollback" u="bool oci_rollback(resource conn)">Rollback the current context</s><s f="oci_server_version" u="string oci_server_version(resource conn)">Return a string containing server version information</s><s f="oci_set_prefetch" u="bool oci_set_prefetch(resource stmt, int prefetch_rows)">Sets the number of rows to be prefetched on execute to prefetch_rows for stmt</s><s f="oci_statement_type" u="string oci_statement_type(resource stmt)">Return the query type of an OCI statement</s><s f="ocifetchinto" u="int ocifetchinto(resource stmt, array &amp;output [, int mode])">Fetch a row of result data into an array</s><s f="ocigetbufferinglob" u="bool ocigetbufferinglob()">Returns current state of buffering for a LOB</s><s f="ocisetbufferinglob" u="bool ocisetbufferinglob( boolean flag )">Enables/disables buffering for a LOB</s><s f="birdstep_autocommit" u="bool birdstep_autocommit(int index)"></s><s f="birdstep_close" u="bool birdstep_close(int id)"></s><s f="birdstep_commit" u="bool birdstep_commit(int index)"></s><s f="birdstep_connect" u="int birdstep_connect(string server, string user, string pass)"></s><s f="birdstep_exec" u="int birdstep_exec(int index, string exec_str)"></s><s f="birdstep_fetch" u="bool birdstep_fetch(int index)"></s><s f="birdstep_fieldname" u="string birdstep_fieldname(int index, int col)"></s><s f="birdstep_fieldnum" u="int birdstep_fieldnum(int index)"></s><s f="birdstep_freeresult" u="bool birdstep_freeresult(int index)"></s><s f="birdstep_off_autocommit" u="bool birdstep_off_autocommit(int index)"></s><s f="birdstep_result" u="mixed birdstep_result(int index, int col)"></s><s f="birdstep_rollback" u="bool birdstep_rollback(int index)"></s><s f="odbc_autocommit" u="mixed odbc_autocommit(resource connection_id [, int OnOff])">Toggle autocommit mode or get status</s><s f="odbc_binmode" u="bool odbc_binmode(int result_id, int mode)">Handle binary column data</s><s f="odbc_close" u="void odbc_close(resource connection_id)">Close an ODBC connection</s><s f="odbc_close_all" u="void odbc_close_all(void)">Close all ODBC connections</s><s f="odbc_columnprivileges" u="resource odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)">Returns a result identifier that can be used to fetch a list of columns and associated privileges for the specified table</s><s f="odbc_columns" u="resource odbc_columns(resource connection_id, string qualifier, string owner, string table_name, string column_name)">Returns a result identifier that can be used to fetch a list of column names in specified tables</s><s f="odbc_commit" u="bool odbc_commit(resource connection_id)">Commit an ODBC transaction</s><s f="odbc_connect" u="resource odbc_connect(string DSN, string user, string password [, int cursor_option])">Connect to a datasource</s><s f="odbc_cursor" u="string odbc_cursor(resource result_id)">Get cursor name</s><s f="odbc_data_source" u="array odbc_data_source(resource connection_id, int fetch_type)">Return information about the currently connected data source</s><s f="odbc_error" u="string odbc_error([resource connection_id])">Get the last error code</s><s f="odbc_errormsg" u="string odbc_errormsg([resource connection_id])">Get the last error message</s><s f="odbc_exec" u="resource odbc_exec(resource connection_id, string query [, int flags])">Prepare and execute an SQL statement</s><s f="odbc_execute" u="bool odbc_execute(resource result_id [, array parameters_array])">Execute a prepared statement</s><s f="odbc_fetch_array" u="array odbc_fetch_array(int result [, int rownumber])">Fetch a result row as an associative array</s><s f="odbc_fetch_into" u="int odbc_fetch_into(resource result_id, array result_array, [, int rownumber])">Fetch one result row into an array</s><s f="odbc_fetch_object" u="object odbc_fetch_object(int result [, int rownumber])">Fetch a result row as an object</s><s f="odbc_fetch_row" u="bool odbc_fetch_row(resource result_id [, int row_number])">Fetch a row</s><s f="odbc_field_len" u="int odbc_field_len(resource result_id, int field_number)">Get the length (precision) of a column</s><s f="odbc_field_name" u="string odbc_field_name(resource result_id, int field_number)">Get a column name</s><s f="odbc_field_num" u="int odbc_field_num(resource result_id, string field_name)">Return column number</s><s f="odbc_field_scale" u="int odbc_field_scale(resource result_id, int field_number)">Get the scale of a column</s><s f="odbc_field_type" u="string odbc_field_type(resource result_id, int field_number)">Get the datatype of a column</s><s f="odbc_foreignkeys" u="resource odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)">Returns a result identifier to either a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table</s><s f="odbc_free_result" u="bool odbc_free_result(resource result_id)">Free resources associated with a result</s><s f="odbc_gettypeinfo" u="resource odbc_gettypeinfo(resource connection_id [, int data_type])">Returns a result identifier containing information about data types supported by the data source</s><s f="odbc_longreadlen" u="bool odbc_longreadlen(int result_id, int length)">Handle LONG columns</s><s f="odbc_next_result" u="bool odbc_next_result(resource result_id)">Checks if multiple results are avaiable</s><s f="odbc_num_fields" u="int odbc_num_fields(resource result_id)">Get number of columns in a result</s><s f="odbc_num_rows" u="int odbc_num_rows(resource result_id)">Get number of rows in a result</s><s f="odbc_pconnect" u="resource odbc_pconnect(string DSN, string user, string password [, int cursor_option])">Establish a persistent connection to a datasource</s><s f="odbc_prepare" u="resource odbc_prepare(resource connection_id, string query)">Prepares a statement for execution</s><s f="odbc_primarykeys" u="resource odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)">Returns a result identifier listing the column names that comprise the primary key for a table</s><s f="odbc_procedurecolumns" u="resource odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])">Returns a result identifier containing the list of input and output parameters, as well as the columns that make up the result set for the specified procedures</s><s f="odbc_procedures" u="resource odbc_procedures(resource connection_id [, string qualifier, string owner, string name])">Returns a result identifier containg the list of procedure names in a datasource</s><s f="odbc_result" u="mixed odbc_result(resource result_id, mixed field)">Get result data</s><s f="odbc_result_all" u="int odbc_result_all(resource result_id [, string format])">Print result as HTML table</s><s f="odbc_rollback" u="bool odbc_rollback(resource connection_id)">Rollback a transaction</s><s f="odbc_setoption" u="bool odbc_setoption(resource conn_id|result_id, int which, int option, int value)">Sets connection or statement options</s><s f="odbc_specialcolumns" u="resource odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)">Returns a result identifier containing either the optimal set of columns that uniquely identifies a row in the table or columns that are automatically updated when any value in the row is updated by a transaction</s><s f="odbc_statistics" u="resource odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)">Returns a result identifier that contains statistics about a single table and the indexes associated with the table</s><s f="odbc_tableprivileges" u="resource odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)">Returns a result identifier containing a list of tables and the privileges associated with each table</s><s f="odbc_tables" u="resource odbc_tables(resource connection_id [, string qualifier, string owner, string name, string table_types])">Call the SQLTables function</s><s f="solid_fetch_prev" u="bool solid_fetch_prev(resource result_id)"></s><s f="openssl_csr_export" u="bool openssl_csr_export(resource csr, string &amp;out [, bool notext=true])">Exports a CSR to file or a var</s><s f="openssl_csr_export_to_file" u="bool openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])">Exports a CSR to file</s><s f="openssl_csr_new" u="bool openssl_csr_new(array dn, resource &amp;privkey [, array configargs, array extraattribs])">Generates a privkey and CSR</s><s f="openssl_csr_sign" u="resource openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])">Signs a cert with another CERT</s><s f="openssl_error_string" u="mixed openssl_error_string(void)">Returns a description of the last error, and alters the index of the error messages. Returns false when the are no more messages</s><s f="openssl_open" u="bool openssl_open(string data, &amp;string opendata, string ekey, mixed privkey)">Opens data</s><s f="openssl_pkey_export" u="bool openssl_pkey_export(mixed key, &amp;mixed out [, string passphrase [, array config_args]])">Gets an exportable representation of a key into a string or file</s><s f="openssl_pkey_export_to_file" u="bool openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)">Gets an exportable representation of a key into a file</s><s f="openssl_pkey_free" u="void openssl_pkey_free(int key)">Frees a key</s><s f="openssl_pkey_get_private" u="int openssl_pkey_get_private(string key [, string passphrase])">Gets private keys</s><s f="openssl_pkey_get_public" u="int openssl_pkey_get_public(mixed cert)">Gets public key from X.509 certificate</s><s f="openssl_pkey_new" u="resource openssl_pkey_new([array configargs])">Generates a new private key</s><s f="openssl_private_decrypt" u="bool openssl_private_decrypt(string data, string decrypted, mixed key [, int padding])">Decrypts data with private key</s><s f="openssl_private_encrypt" u="bool openssl_private_encrypt(string data, string crypted, mixed key [, int padding])">Encrypts data with private key</s><s f="openssl_public_decrypt" u="bool openssl_public_decrypt(string data, string crypted, resource key [, int padding])">Decrypts data with public key</s><s f="openssl_public_encrypt" u="bool openssl_public_encrypt(string data, string crypted, mixed key [, int padding])">Encrypts data with public key</s><s f="openssl_seal" u="int openssl_seal(string data, &amp;string sealdata, &amp;array ekeys, array pubkeys)">Seals data</s><s f="openssl_sign" u="bool openssl_sign(string data, &amp;string signature, mixed key)">Signs data</s><s f="openssl_verify" u="int openssl_verify(string data, string signature, mixed key)">Verifys data</s><s f="ora_bind" u="bool ora_bind(resource cursor, string php_variable_name, string sql_parameter_name, int length [, int type])">Bind a PHP variable to an Oracle parameter</s><s f="ora_close" u="bool ora_close(resource cursor)">Close an Oracle cursor</s><s f="ora_columnname" u="string ora_columnname(resource cursor, int column)">Get the name of an Oracle result column</s><s f="ora_columnsize" u="int ora_columnsize(int cursor, int column)">Return the size of the column</s><s f="ora_columntype" u="string ora_columntype(resource cursor, int column)">Get the type of an Oracle result column</s><s f="ora_commit" u="bool ora_commit(resource connection)">Commit an Oracle transaction</s><s f="ora_commitoff" u="bool ora_commitoff(resource connection)">Disable automatic commit</s><s f="ora_commiton" u="bool ora_commiton(resource connection)">Enable automatic commit</s><s f="ora_do" u="resource ora_do(resource connection, resource cursor)">Parse and execute a statement and fetch first result row</s><s f="ora_error" u="string ora_error(resource cursor_or_connection)">Get an Oracle error message</s><s f="ora_errorcode" u="int ora_errorcode(resource cursor_or_connection)">Get an Oracle error code</s><s f="ora_exec" u="bool ora_exec(resource cursor)">Execute a parsed statement</s><s f="ora_fetch" u="bool ora_fetch(resource cursor)">Fetch a row of result data from a cursor</s><s f="ora_fetch_into" u="int ora_fetch_into(resource cursor, array result [, int flags])">Fetch a row into the specified result array</s><s f="ora_getcolumn" u="mixed ora_getcolumn(resource cursor, int column)">Get data from a fetched row</s><s f="ora_logoff" u="bool ora_logoff(resource connection)">Close an Oracle connection</s><s f="ora_logon" u="resource ora_logon(string user, string password)">Open an Oracle connection</s><s f="ora_numcols" u="int ora_numcols(resource cursor)">Returns the numbers of columns in a result</s><s f="ora_numrows" u="int ora_numrows(resource cursor)">Returns the number of rows in a result</s><s f="ora_open" u="resource ora_open(resource connection)">Open an Oracle cursor</s><s f="ora_parse" u="bool ora_parse(resource cursor, string sql_statement [, int defer])">Parse an Oracle SQL statement</s><s f="ora_plogon" u="resource ora_plogon(string user, string password)">Open a persistent Oracle connection</s><s f="ora_rollback" u="bool ora_rollback(resource connection)">Roll back an Oracle transaction</s><s f="ovrimos_autocommit" u="int ovrimos_autocommit(int connection_id, int OnOff)">Toggle autocommit mode     There can be problems with pconnections!</s><s f="ovrimos_close" u="void ovrimos_close(int connection)">Close a connection</s><s f="ovrimos_commit" u="bool ovrimos_commit(int connection_id)">Commit an ovrimos transaction</s><s f="ovrimos_connect" u="int ovrimos_connect(string host, string db, string user, string password)">Connect to an Ovrimos database</s><s f="ovrimos_cursor" u="string ovrimos_cursor(int result_id)">Get cursor name</s><s f="ovrimos_exec" u="int ovrimos_exec(int connection_id, string query)">Prepare and execute an SQL statement</s><s f="ovrimos_execute" u="bool ovrimos_execute(int result_id [, array parameters_array])">Execute a prepared statement</s><s f="ovrimos_fetch_into" u="bool ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]])">Fetch one result row into an array     how: 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'</s><s f="ovrimos_fetch_row" u="bool ovrimos_fetch_row(int result_id [, int how [, int row_number]])">how: 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'     Fetch a row</s><s f="ovrimos_field_len" u="int ovrimos_field_len(int result_id, int field_number)">Get the length of a column</s><s f="ovrimos_field_name" u="string ovrimos_field_name(int result_id, int field_number)">Get a column name</s><s f="ovrimos_field_num" u="int ovrimos_field_num(int result_id, string field_name)">Return column number</s><s f="ovrimos_field_type" u="int ovrimos_field_type(int result_id, int field_number)">Get the datatype of a column</s><s f="ovrimos_free_result" u="bool ovrimos_free_result(int result_id)">Free resources associated with a result</s><s f="ovrimos_longreadlen" u="bool ovrimos_longreadlen(int result_id, int length)">Handle LONG columns</s><s f="ovrimos_num_fields" u="int ovrimos_num_fields(int result_id)">Get number of columns in a result</s><s f="ovrimos_num_rows" u="int ovrimos_num_rows(int result_id)">Get number of rows in a result</s><s f="ovrimos_prepare" u="int ovrimos_prepare(int connection_id, string query)">Prepares a statement for execution</s><s f="ovrimos_result" u="string ovrimos_result(int result_id, mixed field)">Get result data</s><s f="ovrimos_result_all" u="int ovrimos_result_all(int result_id [, string format])">Print result as HTML table</s><s f="ovrimos_rollback" u="bool ovrimos_rollback(int connection_id)">Rollback a transaction</s><s f="ovrimos_setoption" u="int ovrimos_setoption(int conn_id|result_id, int which, int option, int value)">Sets connection or statement options</s><s f="pcntl_alarm" u="int pcntl_alarm(int seconds)">Set an alarm clock for delivery of a signal</s><s f="pcntl_exec" u="bool pcntl_exec(string path [, array args [, array envs]])">Executes specified program in current process space as defined by exec(2)</s><s f="pcntl_fork" u="int pcntl_fork(void)">Forks the currently running process following the same behavior as the UNIX fork() system call</s><s f="pcntl_getpriority" u="int pcntl_getpriority([int pid [, int process_identifier]])">Get the priority of any process</s><s f="pcntl_setpriority" u="bool pcntl_setpriority(int priority [, int pid [, int process_identifier]])">Change the priority of any process</s><s f="pcntl_signal" u="bool pcntl_signal(int signo, callback handle [, bool restart_syscalls])">Assigns a system signal handler to a PHP function</s><s f="pcntl_wait" u="int pcntl_wait(int &amp;status)">Waits on or returns the status of a forked child as defined by the waitpid() system call</s><s f="pcntl_waitpid" u="int pcntl_waitpid(int pid, int &amp;status, int options)">Waits on or returns the status of a forked child as defined by the waitpid() system call</s><s f="pcntl_wexitstatus" u="int pcntl_wexitstatus(int status)">Returns the status code of a child's exit</s><s f="pcntl_wifexited" u="bool pcntl_wifexited(int status)">Returns true if the child status code represents a successful exit</s><s f="pcntl_wifsignaled" u="bool pcntl_wifsignaled(int status)">Returns true if the child status code represents a process that was terminated due to a signal</s><s f="pcntl_wifstopped" u="bool pcntl_wifstopped(int status)">Returns true if the child status code represents a stopped process (WUNTRACED must have been used with waitpid)</s><s f="pcntl_wstopsig" u="int pcntl_wstopsig(int status)">Returns the number of the signal that caused the process to stop who's status code is passed</s><s f="pcntl_wtermsig" u="int pcntl_wtermsig(int status)">Returns the number of the signal that terminated the process who's status code is passed</s><s f="preg_grep" u="array preg_grep(string regex, array input)">Searches array and returns entries which match regex</s><s f="preg_match" u="int preg_match(string pattern, string subject [, array subpatterns [, int flags [, int offset]]])">Perform a Perl-style regular expression match</s><s f="preg_match_all" u="int preg_match_all(string pattern, string subject, array subpatterns [, int flags [, int offset]])">Perform a Perl-style global regular expression match</s><s f="preg_quote" u="string preg_quote(string str, string delim_char)">Quote regular expression characters plus an optional character</s><s f="preg_replace" u="string preg_replace(mixed regex, mixed replace, mixed subject [, int limit])">Perform Perl-style regular expression replacement.</s><s f="preg_replace_callback" u="string preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit])">Perform Perl-style regular expression replacement using replacement callback.</s><s f="preg_split" u="array preg_split(string pattern, string subject [, int limit [, int flags]])">Split string into an array using a perl-style regular expression as a delimiter</s><s f="pdf_add_annotation" u="bool pdf_add_annotation(resource pdfdoc, float xll, float yll, float xur, float xur, string title, string text)">Sets annotation (depreciated use pdf_add_note instead)</s><s f="pdf_add_bookmark" u="int pdf_add_bookmark(resource pdfdoc, string text [, int parent [, int open]])">Adds bookmark for current page</s><s f="pdf_add_launchlink" u="bool pdf_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename)">Adds link to web resource</s><s f="pdf_add_locallink" u="bool pdf_add_locallink(resource pdfdoc, float llx, float lly, float urx, float ury, int page, string dest)">Adds link to local resource</s><s f="pdf_add_note" u="bool pdf_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)">Sets annotation</s><s f="pdf_add_pdflink" u="bool pdf_add_pdflink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, int page, string dest)">Adds link to PDF document</s><s f="pdf_add_weblink" u="bool pdf_add_weblink(resource pdfdoc, float llx, float lly, float urx, float ury, string url)">Adds link to web resource</s><s f="pdf_arc" u="bool pdf_arc(resource pdfdoc, float x, float y, float radius, float start, float end)">Draws an arc</s><s f="pdf_attach_file" u="bool pdf_attach_file(resource pdf, float lly, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)">Adds a file attachment annotation at the rectangle specified by his lower left and upper right corners</s><s f="pdf_begin_page" u="bool pdf_begin_page(resource pdfdoc, float width, float height)">Starts page</s><s f="pdf_circle" u="bool pdf_circle(resource pdfdoc, float x, float y, float radius)">Draws a circle</s><s f="pdf_clip" u="bool pdf_clip(resource pdfdoc)">Clips to current path</s><s f="pdf_close" u="bool pdf_close(resource pdfdoc)">Closes the pdf document</s><s f="pdf_close_image" u="void pdf_close_image(resource pdf, int pdfimage)">Closes the PDF image</s><s f="pdf_closepath" u="bool pdf_closepath(resource pdfdoc)">Close path</s><s f="pdf_closepath_fill_stroke" u="bool pdf_closepath_fill_stroke(resource pdfdoc)">Close, fill and stroke current path</s><s f="pdf_closepath_stroke" u="bool pdf_closepath_stroke(resource pdfdoc)">Close path and draw line along path</s><s f="pdf_concat" u="bool pdf_concat(resource pdf, float a, float b, float c, float d, float e, float f)">Concatenates a matrix to the current transformation matrix for text and graphics</s><s f="pdf_continue_text" u="bool pdf_continue_text(resource pdfdoc, string text)">Output text in next line</s><s f="pdf_curveto" u="bool pdf_curveto(resource pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3)">Draws a curve</s><s f="pdf_delete" u="bool pdf_delete(resource pdfdoc)">Deletes the PDF object</s><s f="pdf_end_page" u="bool pdf_end_page(resource pdfdoc)">Ends page</s><s f="pdf_endpath" u="bool pdf_endpath(resource pdfdoc)">Ends current path</s><s f="pdf_fill" u="bool pdf_fill(resource pdfdoc)">Fill current path</s><s f="pdf_fill_stroke" u="bool pdf_fill_stroke(resource pdfdoc)">Fill and stroke current path</s><s f="pdf_findfont" u="int pdf_findfont(resource pdfdoc, string fontname, string encoding [, int embed])">Prepares the font fontname for later use with pdf_setfont()</s><s f="pdf_get_buffer" u="string pdf_get_buffer(resource pdfdoc)">Fetches the full buffer containig the generated PDF data</s><s f="pdf_get_font" u="int pdf_get_font(resource pdfdoc)">Gets the current font</s><s f="pdf_get_fontname" u="string pdf_get_fontname(resource pdfdoc)">Gets the current font name</s><s f="pdf_get_fontsize" u="float pdf_get_fontsize(resource pdfdoc)">Gets the current font size</s><s f="pdf_get_image_height" u="int pdf_get_image_height(resource pdf, int pdfimage)">Returns the height of an image</s><s f="pdf_get_image_width" u="int pdf_get_image_width(resource pdf, int pdfimage)">Returns the width of an image</s><s f="pdf_get_majorversion" u="int pdf_get_majorversion()">Returns the major version number of the PDFlib</s><s f="pdf_get_minorversion" u="int pdf_get_minorversion()">Returns the minor version number of the PDFlib</s><s f="pdf_get_parameter" u="string pdf_get_parameter(resource pdfdoc, string key, mixed modifier)">Gets arbitrary parameters</s><s f="pdf_get_value" u="float pdf_get_value(resource pdfdoc, string key, float modifier)">Gets arbitrary value</s><s f="pdf_lineto" u="bool pdf_lineto(resource pdfdoc, float x, float y)">Draws a line</s><s f="pdf_moveto" u="bool pdf_moveto(resource pdfdoc, float x, float y)">Sets current point</s><s f="pdf_new" u="resource pdf_new()">Creates a new PDF object</s><s f="pdf_open" u="resource pdf_open([resource filedesc])">Opens a new pdf document. If filedesc is NULL, document is created in memory. This is the old interface, only for compatibility use pdf_new      pdf_open_file instead</s><s f="pdf_open_ccitt" u="int pdf_open_ccitt(resource pdf, string filename, int width, int height, int bitreverse, int k, int blackls1)">Opens an image file with raw CCITT G3 or G4 compresed bitmap data</s><s f="pdf_open_file" u="bool pdf_open_file(resource pdfdoc [, string filename])">Opens a new PDF document. If filename is NULL, document is created in memory. This is not yet fully supported</s><s f="pdf_open_gif" u="int pdf_open_gif(resource pdf, string giffile)">Opens a GIF file and returns an image for placement in a pdf object</s><s f="pdf_open_image" u="int pdf_open_image(resource pdf, string type, string source, string data, long length, int width, int height, int components, int bpc, string params)">Opens an image of the given type and returns an image for placement in a PDF document</s><s f="pdf_open_image_file" u="int pdf_open_image_file(resource pdf, string type, string file [, string stringparam, int intparam])">Opens an image file of the given type and returns an image for placement in a PDF document</s><s f="pdf_open_jpeg" u="int pdf_open_jpeg(resource pdf, string jpegfile)">Opens a JPEG file and returns an image for placement in a PDF document</s><s f="pdf_open_memory_image" u="int pdf_open_memory_image(resource pdf, resource image)">Takes an GD image and returns an image for placement in a PDF document</s><s f="pdf_open_png" u="int pdf_open_png(resource pdf, string pngfile)">Opens a PNG file and returns an image for placement in a PDF document</s><s f="pdf_open_tiff" u="int pdf_open_tiff(resource pdf, string tifffile)">Opens a TIFF file and returns an image for placement in a PDF document</s><s f="pdf_place_image" u="bool pdf_place_image(resource pdf, int pdfimage, float x, float y, float scale)">Places image in the PDF document</s><s f="pdf_place_pdi_page" u="bool pdf_place_pdi_page(resource pdf, int page, float x, float y, float sx, float sy)">* Place a PDF page with the lower left corner at (x, y), and scale it.</s><s f="pdf_rect" u="bool pdf_rect(resource pdfdoc, float x, float y, float width, float height)">Draws a rectangle</s><s f="pdf_restore" u="bool pdf_restore(resource pdfdoc)">Restores formerly saved enviroment</s><s f="pdf_rotate" u="bool pdf_rotate(resource pdfdoc, float angle)">Sets rotation</s><s f="pdf_save" u="bool pdf_save(resource pdfdoc)">Saves current enviroment</s><s f="pdf_scale" u="bool pdf_scale(resource pdfdoc, float x_scale, float y_scale)">Sets scaling</s><s f="pdf_set_border_color" u="bool pdf_set_border_color(resource pdfdoc, float red, float green, float blue)">Sets color of box surounded all kinds of annotations and links</s><s f="pdf_set_border_dash" u="bool pdf_set_border_dash(resource pdfdoc, float black, float white)">Sets the border dash style of all kinds of annotations and links</s><s f="pdf_set_border_style" u="bool pdf_set_border_style(resource pdfdoc, string style, float width)">Sets style of box surounding all kinds of annotations and link</s><s f="pdf_set_char_spacing" u="bool pdf_set_char_spacing(resource pdfdoc, float space)">Sets character spacing</s><s f="pdf_set_duration" u="bool pdf_set_duration(resource pdfdoc, float duration)">Sets duration between pages</s><s f="pdf_set_font" u="bool pdf_set_font(resource pdfdoc, string font, float size, string encoding [, int embed])">Select the current font face, size and encoding</s><s f="pdf_set_horiz_scaling" u="bool pdf_set_horiz_scaling(resource pdfdoc, float scale)">Sets horizontal scaling of text</s><s f="pdf_set_info" u="bool pdf_set_info(resource pdfdoc, string fieldname, string value)">Fills an info field of the document</s><s f="pdf_set_info_author" u="bool pdf_set_info_author(resource pdfdoc, string author)">Fills the author field of the document</s><s f="pdf_set_info_creator" u="bool pdf_set_info_creator(resource pdfdoc, string creator)">Fills the creator field of the document</s><s f="pdf_set_info_keywords" u="bool pdf_set_info_keywords(resource pdfdoc, string keywords)">Fills the keywords field of the document</s><s f="pdf_set_info_subject" u="bool pdf_set_info_subject(resource pdfdoc, string subject)">Fills the subject field of the document</s><s f="pdf_set_info_title" u="bool pdf_set_info_title(resource pdfdoc, string title)">Fills the title field of the document</s><s f="pdf_set_leading" u="bool pdf_set_leading(resource pdfdoc, float distance)">Sets distance between text lines</s><s f="pdf_set_parameter" u="bool pdf_set_parameter(resource pdfdoc, string key, string value)">Sets arbitrary parameters</s><s f="pdf_set_text_pos" u="bool pdf_set_text_pos(resource pdfdoc, float x, float y)">Sets the position of text for the next pdf_show call</s><s f="pdf_set_text_rendering" u="bool pdf_set_text_rendering(resource pdfdoc, int mode)">Determines how text is rendered</s><s f="pdf_set_text_rise" u="bool pdf_set_text_rise(resource pdfdoc, float value)">Sets the text rise</s><s f="pdf_set_transition" u="bool pdf_set_transition(resource pdfdoc, int transition)">Sets transition between pages</s><s f="pdf_set_value" u="bool pdf_set_value(resource pdfdoc, string key, float value)">Sets arbitrary value</s><s f="pdf_set_word_spacing" u="bool pdf_set_word_spacing(resource pdfdoc, float space)">Sets spacing between words</s><s f="pdf_setdash" u="bool pdf_setdash(resource pdfdoc, float black, float white)">Sets dash pattern</s><s f="pdf_setflat" u="bool pdf_setflat(resource pdfdoc, float value)">Sets flatness</s><s f="pdf_setfont" u="bool pdf_setfont(resource pdfdoc, int font, float fontsize)">Sets the current font in the fiven fontsize</s><s f="pdf_setgray" u="bool pdf_setgray(resource pdfdoc, float value)">Sets drawing and filling color to gray value</s><s f="pdf_setgray_fill" u="bool pdf_setgray_fill(resource pdfdoc, float value)">Sets filling color to gray value</s><s f="pdf_setgray_stroke" u="bool pdf_setgray_stroke(resource pdfdoc, float value)">Sets drawing color to gray value</s><s f="pdf_setlinecap" u="bool pdf_setlinecap(resource pdfdoc, int value)">Sets linecap parameter</s><s f="pdf_setlinejoin" u="bool pdf_setlinejoin(resource pdfdoc, int value)">Sets linejoin parameter</s><s f="pdf_setlinewidth" u="bool pdf_setlinewidth(resource pdfdoc, float width)">Sets line width</s><s f="pdf_setmatrix" u="bool pdf_setmatrix(resource pdf, float a, float b, float c, float d, float e, float f)">Explicitly set the current transformation matrix.</s><s f="pdf_setmiterlimit" u="bool pdf_setmiterlimit(resource pdfdoc, float value)">Sets miter limit</s><s f="pdf_setpolydash" u="bool pdf_setpolydash(resource pdfdoc, float darray)">Sets more complicated dash pattern</s><s f="pdf_setrgbcolor" u="bool pdf_setrgbcolor(resource pdfdoc, float red, float green, float blue)">Sets drawing and filling color to RGB color value</s><s f="pdf_setrgbcolor_fill" u="bool pdf_setrgbcolor_fill(resource pdfdoc, float red, float green, float blue)">Sets filling color to RGB color value</s><s f="pdf_setrgbcolor_stroke" u="bool pdf_setrgbcolor_stroke(resource pdfdoc, float red, float green, float blue)">Sets drawing color to RGB color value</s><s f="pdf_show" u="bool pdf_show(resource pdfdoc, string text)">Output text at current position</s><s f="pdf_show_boxed" u="int pdf_show_boxed(resource pdfdoc, string text, float x_koor, float y_koor, float width, float height, string mode [, string feature])">Output text formated in a boxed</s><s f="pdf_show_xy" u="bool pdf_show_xy(resource pdfdoc, string text, float x_koor, float y_koor)">Output text at position</s><s f="pdf_skew" u="bool pdf_skew(resource pdfdoc, float xangle, float yangle)">Skew the coordinate system</s><s f="pdf_stringwidth" u="float pdf_stringwidth(resource pdfdoc, string text [, int font, float size])">Returns width of text in current font</s><s f="pdf_stroke" u="bool pdf_stroke(resource pdfdoc)">Draw line along path path</s><s f="pdf_translate" u="bool pdf_translate(resource pdfdoc, float x, float y)">Sets origin of coordinate system</s><s f="pfpro_cleanup" u="bool pfpro_cleanup()">Shuts down the Payflow Pro library</s><s f="pfpro_init" u="bool pfpro_init()">Initializes the Payflow Pro library</s><s f="pfpro_process" u="array pfpro_process(array parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])">Payflow Pro transaction processing using arrays</s><s f="pfpro_process_raw" u="string pfpro_process_raw(string parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])">Raw Payflow Pro transaction processing</s><s f="pfpro_version" u="string pfpro_version()">Returns the version of the Payflow Pro library</s><s f="pg_affected_rows" u="int pg_affected_rows(resource result)">Returns the number of affected tuples</s><s f="pg_cancel_query" u="bool pg_cancel_query(resource connection)">Cancel request</s><s f="pg_client_encoding" u="string pg_client_encoding([resource connection])">Get the current client encoding</s><s f="pg_close" u="bool pg_close([resource connection])">Close a PostgreSQL connection</s><s f="pg_connect" u="resource pg_connect(string connection_string[, int connect_type] | [string host, string port [, string options [, string tty,]]] string database)">Open a PostgreSQL connection</s><s f="pg_connection_busy" u="bool pg_connection_busy(resource connection)">Get connection is busy or not</s><s f="pg_connection_reset" u="bool pg_connection_reset(resource connection)">Reset connection (reconnect)</s><s f="pg_connection_status" u="int pg_connection_status(resource connnection)">Get connection status</s><s f="pg_convert" u="array pg_convert(resource db, string table, array values[, int options])">Check and convert values for PostgreSQL SQL statement</s><s f="pg_copy_from" u="bool pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])">Copy table from array</s><s f="pg_copy_to" u="array pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])">Copy table to array</s><s f="pg_dbname" u="string pg_dbname([resource connection])">Get the database name</s><s f="pg_delete" u="mixed pg_delete(resource db, string table, array ids[, int options])">Delete records has ids (id=&gt;value)</s><s f="pg_end_copy" u="bool pg_end_copy([resource connection])">Sync with backend. Completes the Copy command</s><s f="pg_escape_bytea" u="string pg_escape_bytea(string data)">Escape binary for bytea type</s><s f="pg_escape_string" u="string pg_escape_string(string data)">Escape string for text/char type</s><s f="pg_fetch_all" u="array pg_fetch_all(resource result)">Fetch all rows into array</s><s f="pg_fetch_array" u="array pg_fetch_array(resource result [, int row [, int result_type]])">Fetch a row as an array</s><s f="pg_fetch_assoc" u="array pg_fetch_assoc(resource result [, int row])">Fetch a row as an assoc array</s><s f="pg_fetch_object" u="object pg_fetch_object(resource result [, int row [, string class_name [, NULL|array ctor_params]]])">Fetch a row as an object</s><s f="pg_fetch_result" u="mixed pg_fetch_result(resource result, [int row_number,] mixed field_name)">Returns values from a result identifier</s><s f="pg_fetch_row" u="array pg_fetch_row(resource result [, int row [, int result_type]])">Get a row as an enumerated array</s><s f="pg_field_is_null" u="int pg_field_is_null(resource result, [int row,] mixed field_name_or_number)">Test if a field is NULL</s><s f="pg_field_name" u="string pg_field_name(resource result, int field_number)">Returns the name of the field</s><s f="pg_field_num" u="int pg_field_num(resource result, string field_name)">Returns the field number of the named field</s><s f="pg_field_prtlen" u="int pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)">Returns the printed length</s><s f="pg_field_size" u="int pg_field_size(resource result, int field_number)">Returns the internal size of the field</s><s f="pg_field_type" u="string pg_field_type(resource result, int field_number)">Returns the type name for the given field</s><s f="pg_free_result" u="bool pg_free_result(resource result)">Free result memory</s><s f="pg_get_notify" u="array pg_get_notify([resource connection[, result_type]])">Get asynchronous notification</s><s f="pg_get_pid" u="int pg_get_pid([resource connection)">Get backend(server) pid</s><s f="pg_get_result" u="resource pg_get_result(resource connection)">Get asynchronous query result</s><s f="pg_host" u="string pg_host([resource connection])">Returns the host name associated with the connection</s><s f="pg_insert" u="mixed pg_insert(resource db, string table, array values[, int options])">Insert values (filed=&gt;value) to table</s><s f="pg_last_error" u="string pg_last_error([resource connection])">Get the error message string</s><s f="pg_last_notice" u="string pg_last_notice(resource connection)">Returns the last notice set by the backend</s><s f="pg_last_oid" u="string pg_last_oid(resource result)">Returns the last object identifier</s><s f="pg_lo_close" u="bool pg_lo_close(resource large_object)">Close a large object</s><s f="pg_lo_create" u="int pg_lo_create([resource connection])">Create a large object</s><s f="pg_lo_export" u="bool pg_lo_export([resource connection, ] int objoid, string filename)">Export large object direct to filesystem</s><s f="pg_lo_import" u="int pg_lo_import([resource connection, ] string filename)">Import large object direct from filesystem</s><s f="pg_lo_open" u="resource pg_lo_open([resource connection,] int large_object_oid, string mode)">Open a large object and return fd</s><s f="pg_lo_read" u="string pg_lo_read(resource large_object [, int len])">Read a large object</s><s f="pg_lo_read_all" u="int pg_lo_read_all(resource large_object)">Read a large object and send straight to browser</s><s f="pg_lo_seek" u="bool pg_lo_seek(resource large_object, int offset [, int whence])">Seeks position of large object</s><s f="pg_lo_tell" u="int pg_lo_tell(resource large_object)">Returns current position of large object</s><s f="pg_lo_unlink" u="bool pg_lo_unlink([resource connection,] string large_object_oid)">Delete a large object</s><s f="pg_lo_write" u="int pg_lo_write(resource large_object, string buf [, int len])">Write a large object</s><s f="pg_meta_data" u="array pg_meta_data(resource db, string table)">Get meta_data</s><s f="pg_num_fields" u="int pg_num_fields(resource result)">Return the number of fields in the result</s><s f="pg_num_rows" u="int pg_num_rows(resource result)">Return the number of rows in the result</s><s f="pg_options" u="string pg_options([resource connection])">Get the options associated with the connection</s><s f="pg_pconnect" u="resource pg_pconnect(string connection_string | [string host, string port [, string options [, string tty,]]] string database)">Open a persistent PostgreSQL connection</s><s f="pg_ping" u="bool pg_ping([resource connection])">Ping database. If connection is bad, try to reconnect.</s><s f="pg_port" u="int pg_port([resource connection])">Return the port number associated with the connection</s><s f="pg_put_line" u="bool pg_put_line([resource connection,] string query)">Send null-terminated string to backend server</s><s f="pg_query" u="resource pg_query([resource connection,] string query)">Execute a query</s><s f="pg_result_error" u="string pg_result_error(resource result)">Get error message associated with result</s><s f="pg_result_seek" u="bool pg_result_seek(resource result, int offset)">Set internal row offset</s><s f="pg_result_status" u="mixed pg_result_status(resource result[, long result_type])">Get status of query result</s><s f="pg_select" u="mixed pg_select(resource db, string table, array ids[, int options])">Select records that has ids (id=&gt;value)</s><s f="pg_send_query" u="bool pg_send_query(resource connection, string qeury)">Send asynchronous query</s><s f="pg_set_client_encoding" u="int pg_set_client_encoding([resource connection,] string encoding)">Set client encoding</s><s f="pg_trace" u="bool pg_trace(string filename [, string mode [, resource connection]])">Enable tracing a PostgreSQL connection</s><s f="pg_tty" u="string pg_tty([resource connection])">Return the tty name associated with the connection</s><s f="pg_unescape_bytea" u="string pg_unescape_bytea(string data)">Unescape binary for bytea type</s><s f="pg_untrace" u="bool pg_untrace([resource connection])">Disable tracing of a PostgreSQL connection</s><s f="pg_update" u="mixed pg_update(resource db, string table, array fields, array ids[, int options])">Update table using values (field=&gt;value) and ids (id=&gt;value)</s><s f="pg_version" u="array pg_version([resource connection])">Returns an array with client, protocol and server version (when available)</s><s f="posix_ctermid" u="string posix_ctermid(void)">Generate terminal path name (POSIX.1, 4.7.1)</s><s f="posix_get_last_error" u="int posix_get_last_error(void)">Retrieve the error number set by the last posix function which failed.</s><s f="posix_getcwd" u="string posix_getcwd(void)">Get working directory pathname (POSIX.1, 5.2.2)</s><s f="posix_getegid" u="int posix_getegid(void)">Get the current effective group id (POSIX.1, 4.2.1)</s><s f="posix_geteuid" u="int posix_geteuid(void)">Get the current effective user id (POSIX.1, 4.2.1)</s><s f="posix_getgid" u="int posix_getgid(void)">Get the current group id (POSIX.1, 4.2.1)</s><s f="posix_getgrgid" u="array posix_getgrgid(long gid)">Group database access (POSIX.1, 9.2.1)</s><s f="posix_getgrnam" u="array posix_getgrnam(string groupname)">Group database access (POSIX.1, 9.2.1)</s><s f="posix_getgroups" u="array posix_getgroups(void)">Get supplementary group id's (POSIX.1, 4.2.3)</s><s f="posix_getlogin" u="string posix_getlogin(void)">Get user name (POSIX.1, 4.2.4)</s><s f="posix_getpgid" u="int posix_getpgid(void)">Get the process group id of the specified process (This is not a POSIX function, but a SVR4ism, so we compile conditionally)</s><s f="posix_getpgrp" u="int posix_getpgrp(void)">Get current process group id (POSIX.1, 4.3.1)</s><s f="posix_getpid" u="int posix_getpid(void)">Get the current process id (POSIX.1, 4.1.1)</s><s f="posix_getppid" u="int posix_getppid(void)">Get the parent process id (POSIX.1, 4.1.1)</s><s f="posix_getpwnam" u="array posix_getpwnam(string groupname)">User database access (POSIX.1, 9.2.2)</s><s f="posix_getpwuid" u="array posix_getpwuid(long uid)">User database access (POSIX.1, 9.2.2)</s><s f="posix_getrlimit" u="array posix_getrlimit(void)">Get system resource consumption limits (This is not a POSIX function, but a BSDism and a SVR4ism. We compile conditionally)</s><s f="posix_getsid" u="int posix_getsid(void)">Get process group id of session leader (This is not a POSIX function, but a SVR4ism, so be compile conditionally)</s><s f="posix_getuid" u="int posix_getuid(void)">Get the current user id (POSIX.1, 4.2.1)</s><s f="posix_isatty" u="bool posix_isatty(int fd)">Determine if filedesc is a tty (POSIX.1, 4.7.1)</s><s f="posix_kill" u="bool posix_kill(int pid, int sig)">Send a signal to a process (POSIX.1, 3.3.2)</s><s f="posix_mkfifo" u="bool posix_mkfifo(string pathname, int mode)">Make a FIFO special file (POSIX.1, 5.4.2)</s><s f="posix_setegid" u="bool posix_setegid(long uid)">Set effective group id</s><s f="posix_seteuid" u="bool posix_seteuid(long uid)">Set effective user id</s><s f="posix_setgid" u="bool posix_setgid(int uid)">Set group id (POSIX.1, 4.2.2)</s><s f="posix_setpgid" u="bool posix_setpgid(int pid, int pgid)">Set process group id for job control (POSIX.1, 4.3.3)</s><s f="posix_setsid" u="int posix_setsid(void)">Create session and set process group id (POSIX.1, 4.3.2)</s><s f="posix_setuid" u="bool posix_setuid(long uid)">Set user id (POSIX.1, 4.2.2)</s><s f="posix_strerror" u="string posix_strerror(int errno)">Retrieve the system error message associated with the given errno.</s><s f="posix_times" u="array posix_times(void)">Get process times (POSIX.1, 4.5.2)</s><s f="posix_ttyname" u="string posix_ttyname(int fd)">Determine terminal device name (POSIX.1, 4.7.2)</s><s f="posix_uname" u="array posix_uname(void)">Get system name (POSIX.1, 4.4.1)</s><s f="pspell_add_to_personal" u="bool pspell_add_to_personal(int pspell, string word)">Adds a word to a personal list</s><s f="pspell_add_to_session" u="bool pspell_add_to_session(int pspell, string word)">Adds a word to the current session</s><s f="pspell_check" u="bool pspell_check(int pspell, string word)">Returns true if word is valid</s><s f="pspell_clear_session" u="bool pspell_clear_session(int pspell)">Clears the current session</s><s f="pspell_config_create" u="int pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])">Create a new config to be used later to create a manager</s><s f="pspell_config_data_dir" u="bool pspell_config_data_dir(int conf, string directory)">location of language data files</s><s f="pspell_config_dict_dir" u="bool pspell_config_dict_dir(int conf, string directory)">location of the main word list</s><s f="pspell_config_ignore" u="bool pspell_config_ignore(int conf, int ignore)">Ignore words &lt;= n chars</s><s f="pspell_config_mode" u="bool pspell_config_mode(int conf, long mode)">Select mode for config (PSPELL_FAST, PSPELL_NORMAL or PSPELL_BAD_SPELLERS)</s><s f="pspell_config_personal" u="bool pspell_config_personal(int conf, string personal)">Use a personal dictionary for this config</s><s f="pspell_config_repl" u="bool pspell_config_repl(int conf, string repl)">Use a personal dictionary with replacement pairs for this config</s><s f="pspell_config_runtogether" u="bool pspell_config_runtogether(int conf, bool runtogether)">Consider run-together words as valid components</s><s f="pspell_config_save_repl" u="bool pspell_config_save_repl(int conf, bool save)">Save replacement pairs when personal list is saved for this config</s><s f="pspell_new" u="int pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])">Load a dictionary</s><s f="pspell_new_config" u="int pspell_new_config(int config)">Load a dictionary based on the given config</s><s f="pspell_new_personal" u="int pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])">Load a dictionary with a personal wordlist</s><s f="pspell_save_wordlist" u="bool pspell_save_wordlist(int pspell)">Saves the current (personal) wordlist</s><s f="pspell_store_replacement" u="bool pspell_store_replacement(int pspell, string misspell, string correct)">Notify the dictionary of a user-selected replacement</s><s f="pspell_suggest" u="array pspell_suggest(int pspell, string word)">Returns array of suggestions</s><s f="readline" u="string readline([string prompt])">Reads a line</s><s f="readline_add_history" u="bool readline_add_history([string prompt])">Adds a line to the history</s><s f="readline_clear_history" u="bool readline_clear_history(void)">Clears the history</s><s f="readline_completion_function" u="bool readline_completion_function(string funcname)">Readline completion function?</s><s f="readline_info" u="mixed readline_info([string varname] [, string newvalue])">Gets/sets various internal readline variables.</s><s f="readline_list_history" u="array readline_list_history(void)">Lists the history</s><s f="readline_read_history" u="bool readline_read_history([string filename] [, int from] [,int to])">Reads the history</s><s f="readline_write_history" u="bool readline_write_history([string filename])">Writes the history</s><s f="recode_file" u="bool recode_file(string request, resource input, resource output)">Recode file input into file output according to request</s><s f="recode_string" u="string recode_string(string request, string str)">Recode string str according to request string</s><s f="session_cache_expire" u="int session_cache_expire([int new_cache_expire])">Return the current cache expire. If new_cache_expire is given, the current cache_expire is replaced with new_cache_expire</s><s f="session_cache_limiter" u="string session_cache_limiter([string new_cache_limiter])">Return the current cache limiter. If new_cache_limited is given, the current cache_limiter is replaced with new_cache_limiter</s><s f="session_decode" u="bool session_decode(string data)">Deserializes data and reinitializes the variables</s><s f="session_destroy" u="bool session_destroy(void)">Destroy the current session and all data associated with it</s><s f="session_encode" u="string session_encode(void)">Serializes the current setup and returns the serialized representation</s><s f="session_get_cookie_params" u="array session_get_cookie_params(void)">Return the session cookie parameters</s><s f="session_id" u="string session_id([string newid])">Return the current session id. If newid is given, the session id is replaced with newid</s><s f="session_is_registered" u="bool session_is_registered(string varname)">Checks if a variable is registered in session</s><s f="session_module_name" u="string session_module_name([string newname])">Return the current module name used for accessing session data. If newname is given, the module name is replaced with newname</s><s f="session_name" u="string session_name([string newname])">Return the current session name. If newname is given, the session name is replaced with newname</s><s f="session_regenerate_id" u="bool session_regenerate_id()">Update the current session id with a newly generated one.</s><s f="session_register" u="bool session_register(mixed var_names [, mixed ...])">Adds varname(s) to the list of variables which are freezed at the session end</s><s f="session_save_path" u="string session_save_path([string newname])">Return the current save path passed to module_name. If newname is given, the save path is replaced with newname</s><s f="session_set_cookie_params" u="void session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]])">Set session cookie parameters</s><s f="session_set_save_handler" u="void session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)">Sets user-level functions</s><s f="session_start" u="bool session_start(void)">Begin session - reinitializes freezed variables, registers browsers etc</s><s f="session_unregister" u="bool session_unregister(string varname)">Removes varname from the list of variables which are freezed at the session end</s><s f="session_unset" u="void session_unset(void)">Unset all registered variables</s><s f="session_write_close" u="void session_write_close(void)">Write session data and end session</s><s f="simplexml_import_dom" u="simplemxml_element simplexml_import_dom(domNode node [, string class_name])">Get a simplexml_element object from dom to allow for processing</s><s f="simplexml_load_file" u="simplemxml_element simplexml_load_file(string filename [, string class_name])">Load a filename and return a simplexml_element object to allow for processing</s><s f="simplexml_load_string" u="simplemxml_element simplexml_load_string(string data [, string class_name])">Load a string and return a simplexml_element object to allow for processing</s><s f="confirm_extname_compiled" u="string confirm_extname_compiled(string arg)">Return a string to confirm that the module is compiled in</s><s f="snmp_get_quick_print" u="bool snmp_get_quick_print(void)">Return the current status of quick_print</s><s f="snmp_get_valueretrieval" u="int snmp_get_valueretrieval()">Return the method how the SNMP values will be returned</s><s f="snmp_read_mib" u="int snmp_read_mib(string filename)">Reads and parses a MIB file into the active MIB tree.</s><s f="snmp_set_enum_print" u="void snmp_set_enum_print(int enum_print)">Return all values that are enums with their enum value instead of the raw integer</s><s f="snmp_set_oid_numeric_print" u="void snmp_set_oid_numeric_print(int oid_numeric_print)">Return all objects including their respective object id withing the specified one</s><s f="snmp_set_quick_print" u="void snmp_set_quick_print(int quick_print)">Return all objects including their respective object id withing the specified one</s><s f="snmp_set_valueretrieval" u="int snmp_set_valueretrieval(int method)">Specify the method how the SNMP values will be returned</s><s f="snmpget" u="string snmpget(string host, string community, string object_id [, int timeout [, int retries]])">Fetch a SNMP object</s><s f="snmpgetnext" u="string snmpgetnext(string host, string community, string object_id [, int timeout [, int retries]])">Fetch a SNMP object</s><s f="snmprealwalk" u="array snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])">Return all objects including their respective object id withing the specified one</s><s f="snmpset" u="int snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])">Set the value of a SNMP object</s><s f="snmpwalk" u="array snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])">Return all objects under the specified object id</s><s f="socket_accept" u="resource socket_accept(resource socket)">Accepts a connection on the listening socket fd</s><s f="socket_bind" u="bool socket_bind(resource socket, string addr [, int port])">Binds an open socket to a listening port, port is only specified in AF_INET family.</s><s f="socket_clear_error" u="void socket_clear_error([resource socket])">Clears the error on the socket or the last error code.</s><s f="socket_close" u="void socket_close(resource socket)">Closes a file descriptor</s><s f="socket_connect" u="bool socket_connect(resource socket, string addr [, int port])">Opens a connection to addr:port on the socket specified by socket</s><s f="socket_create" u="resource socket_create(int domain, int type, int protocol)">Creates an endpoint for communication in the domain specified by domain, of type specified by type</s><s f="socket_create_listen" u="resource socket_create_listen(int port[, int backlog])">Opens a socket on port to accept connections</s><s f="socket_create_pair" u="bool socket_create_pair(int domain, int type, int protocol, array &amp;fd)">Creates a pair of indistinguishable sockets and stores them in fds.</s><s f="socket_get_option" u="mixed socket_get_option(resource socket, int level, int optname)">Gets socket options for the socket</s><s f="socket_getpeername" u="bool socket_getpeername(resource socket, string &amp;addr[, int &amp;port])">Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.</s><s f="socket_getsockname" u="bool socket_getsockname(resource socket, string &amp;addr[, int &amp;port])">Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.</s><s f="socket_last_error" u="int socket_last_error([resource socket])">Returns the last socket error (either the last used or the provided socket resource)</s><s f="socket_listen" u="bool socket_listen(resource socket[, int backlog])">Sets the maximum number of connections allowed to be waited for on the socket specified by fd</s><s f="socket_read" u="string socket_read(resource socket, int length [, int type])">Reads a maximum of length bytes from socket</s><s f="socket_recv" u="int socket_recv(resource socket, string &amp;buf, int len, int flags)">Receives data from a connected socket</s><s f="socket_recvfrom" u="int socket_recvfrom(resource socket, string &amp;buf, int len, int flags, string &amp;name [, int &amp;port])">Receives data from a socket, connected or not</s><s f="socket_select" u="int socket_select(array &amp;read_fds, array &amp;write_fds, &amp;array except_fds, int tv_sec[, int tv_usec])">Runs the select() system call on the sets mentioned with a timeout specified by tv_sec and tv_usec</s><s f="socket_send" u="int socket_send(resource socket, string buf, int len, int flags)">Sends data to a connected socket</s><s f="socket_sendto" u="int socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])">Sends a message to a socket, whether it is connected or not</s><s f="socket_set_block" u="bool socket_set_block(resource socket)">Sets blocking mode on a socket resource</s><s f="socket_set_nonblock" u="bool socket_set_nonblock(resource socket)">Sets nonblocking mode on a socket resource</s><s f="socket_set_option" u="bool socket_set_option(resource socket, int level, int optname, int|array optval)">Sets socket options for the socket</s><s f="socket_shutdown" u="bool socket_shutdown(resource socket[, int how])">Shuts down a socket for receiving, sending, or both.</s><s f="socket_strerror" u="string socket_strerror(int errno)">Returns a string describing an error</s><s f="socket_write" u="int socket_write(resource socket, string buf[, int length])">Writes the buffer to the socket resource, length is optional</s><s f="sqlite_array_query" u="array sqlite_array_query(resource db, string query [ , int result_type [, bool decode_binary]])">Executes a query against a given database and returns an array of arrays.</s><s f="sqlite_busy_timeout" u="void sqlite_busy_timeout(resource db, int ms)">Set busy timeout duration. If ms &lt;= 0, all busy handlers are disabled.</s><s f="sqlite_changes" u="int sqlite_changes(resource db)">Returns the number of rows that were changed by the most recent SQL statement.</s><s f="sqlite_close" u="void sqlite_close(resource db)">Closes an open sqlite database.</s><s f="sqlite_column" u="mixed sqlite_column(resource result, mixed index_or_name [, bool decode_binary])">Fetches a column from the current row of a result set.</s><s f="sqlite_create_aggregate" u="bool sqlite_create_aggregate(resource db, string funcname, mixed step_func, mixed finalize_func[, long num_args])">Registers an aggregate function for queries.</s><s f="sqlite_create_function" u="bool sqlite_create_function(resource db, string funcname, mixed callback[, long num_args])">Registers a "regular" function for queries.</s><s f="sqlite_current" u="array sqlite_current(resource result [, int result_type [, bool decode_binary]])">Fetches the current row from a result set as an array.</s><s f="sqlite_error_string" u="string sqlite_error_string(int error_code)">Returns the textual description of an error code.</s><s f="sqlite_escape_string" u="string sqlite_escape_string(string item)">Escapes a string for use as a query parameter.</s><s f="sqlite_factory" u="object sqlite_factory(string filename [, int mode [, string &amp;error_message]])">Opens a SQLite database and creates an object for it. Will create the database if it does not exist.</s><s f="sqlite_fetch_all" u="array sqlite_fetch_all(resource result [, int result_type [, bool decode_binary]])">Fetches all rows from a result set as an array of arrays.</s><s f="sqlite_fetch_array" u="array sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])">Fetches the next row from a result set as an array.</s><s f="sqlite_fetch_column_types" u="resource sqlite_fetch_column_types(string table_name, resource db)">Return an array of column types from a particular table.</s><s f="sqlite_fetch_object" u="object sqlite_fetch_object(resource result [, string class_name [, NULL|array ctor_params [, bool decode_binary]]])">Fetches the next row from a result set as an object.</s><s f="sqlite_fetch_single" u="string sqlite_fetch_single(resource result [, bool decode_binary])">Fetches the first column of a result set as a string.</s><s f="sqlite_field_name" u="string sqlite_field_name(resource result, int field_index)">Returns the name of a particular field of a result set.</s><s f="sqlite_has_prev" u="bool sqlite_has_prev(resource result)">* Returns whether a previous row is available.</s><s f="sqlite_last_error" u="int sqlite_last_error(resource db)">Returns the error code of the last error for a database.</s><s f="sqlite_last_insert_rowid" u="int sqlite_last_insert_rowid(resource db)">Returns the rowid of the most recently inserted row.</s><s f="sqlite_libencoding" u="string sqlite_libencoding()">Returns the encoding (iso8859 or UTF-8) of the linked SQLite library.</s><s f="sqlite_libversion" u="string sqlite_libversion()">Returns the version of the linked SQLite library.</s><s f="sqlite_next" u="bool sqlite_next(resource result)">Seek to the next row number of a result set.</s><s f="sqlite_num_fields" u="int sqlite_num_fields(resource result)">Returns the number of fields in a result set.</s><s f="sqlite_num_rows" u="int sqlite_num_rows(resource result)">Returns the number of rows in a buffered result set.</s><s f="sqlite_open" u="resource sqlite_open(string filename [, int mode [, string &amp;error_message]])">Opens a SQLite database. Will create the database if it does not exist.</s><s f="sqlite_popen" u="resource sqlite_popen(string filename [, int mode [, string &amp;error_message]])">Opens a persistent handle to a SQLite database. Will create the database if it does not exist.</s><s f="sqlite_prev" u="bool sqlite_prev(resource result)">* Seek to the previous row number of a result set.</s><s f="sqlite_query" u="resource sqlite_query(string query, resource db [, int result_type ])">Executes a query against a given database and returns a result handle.</s><s f="sqlite_rewind" u="bool sqlite_rewind(resource result)">Seek to the first row number of a buffered result set.</s><s f="sqlite_seek" u="bool sqlite_seek(resource result, int row)">Seek to a particular row number of a buffered result set.</s><s f="sqlite_single_query" u="array sqlite_single_query(resource db, string query [, bool first_row_only [, bool decode_binary]])">Executes a query and returns either an array for one single column or the value of the first row.</s><s f="sqlite_udf_decode_binary" u="string sqlite_udf_decode_binary(string data)">Decode binary encoding on a string parameter passed to an UDF.</s><s f="sqlite_udf_encode_binary" u="string sqlite_udf_encode_binary(string data)">Apply binary encoding (if required) to a string to return from an UDF.</s><s f="sqlite_unbuffered_query" u="resource sqlite_unbuffered_query(string query, resource db [ , int result_type ])">Executes a query that does not prefetch and buffer all data.</s><s f="sqlite_valid" u="bool sqlite_valid(resource result)">Returns whether more rows are available.</s><s f="array_change_key_case" u="array array_change_key_case(array input [, int case=CASE_LOWER])">Retuns an array with all string keys lowercased [or uppercased]</s><s f="array_chunk" u="array array_chunk(array input, int size [, bool preserve_keys])">Split array into chunks</s><s f="array_combine" u="array array_combine(array keys, array values)">Creates an array by using the elements of the first parameter as keys and the elements of the second as correspoding keys</s><s f="array_count_values" u="array array_count_values(array input)">Return the value as key and the frequency of that value in input as value</s><s f="array_diff" u="array array_diff(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are not present in any of the others arguments.</s><s f="array_diff_assoc" u="array array_diff_assoc(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal</s><s f="array_diff_uassoc" u="array array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Elements are compared by user supplied function.</s><s f="array_fill" u="array array_fill(int start_key, int num, mixed val)">Create an array containing num elements starting with index start_key each initialized to val</s><s f="array_filter" u="array array_filter(array input [, mixed callback])">Filters elements from the array via the callback.</s><s f="array_flip" u="array array_flip(array input)">Return array with key &lt;-&gt; value flipped</s><s f="array_intersect" u="array array_intersect(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are present in all the other arguments</s><s f="array_intersect_assoc" u="array array_intersect_assoc(array arr1, array arr2 [, array ...])">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check</s><s f="array_intersect_uassoc" u="array array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check and they are compared by using an user-supplied callback.</s><s f="array_key_exists" u="bool array_key_exists(mixed key, array search)">Checks if the given key or index exists in the array</s><s f="array_keys" u="array array_keys(array input [, mixed search_value[, bool strict]])">Return just the keys from the input array, optionally only for the specified search_value</s><s f="array_map" u="array array_map(mixed callback, array input1 [, array input2 ,...])">Applies the callback to the elements in given arrays.</s><s f="array_merge" u="array array_merge(array arr1, array arr2 [, array ...])">Merges elements from passed arrays into one array</s><s f="array_merge_recursive" u="array array_merge_recursive(array arr1, array arr2 [, array ...])">Recursively merges elements from passed arrays into one array</s><s f="array_multisort" u="bool array_multisort(array ar1 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array ar2 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])">Sort multiple arrays at once similar to how ORDER BY clause works in SQL</s><s f="array_pad" u="array array_pad(array input, int pad_size, mixed pad_value)">Returns a copy of input array padded with pad_value to size pad_size</s><s f="array_pop" u="mixed array_pop(array stack)">Pops an element off the end of the array</s><s f="array_push" u="int array_push(array stack, mixed var [, mixed ...])">Pushes elements onto the end of the array</s><s f="array_rand" u="mixed array_rand(array input [, int num_req])">Return key/keys for random entry/entries in the array</s><s f="array_reduce" u="mixed array_reduce(array input, mixed callback [, int initial])">Iteratively reduce the array to a single value via the callback.</s><s f="array_reverse" u="array array_reverse(array input [, bool preserve keys])">Return input as a new array with the order of the entries reversed</s><s f="array_search" u="mixed array_search(mixed needle, array haystack [, bool strict])">Searches the array for a given value and returns the corresponding key if successful</s><s f="array_shift" u="mixed array_shift(array stack)">Pops an element off the beginning of the array</s><s f="array_slice" u="array array_slice(array input, int offset [, int length])">Returns elements specified by offset and length</s><s f="array_splice" u="array array_splice(array input, int offset [, int length [, array replacement]])">Removes the elements designated by offset and length and replace them with supplied array</s><s f="array_sum" u="mixed array_sum(array input)">Returns the sum of the array entries</s><s f="array_udiff" u="array array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments. Elements are compared by user supplied function.</s><s f="array_udiff_assoc" u="array array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Keys are compared by user supplied function.</s><s f="array_udiff_uassoc" u="array array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)">Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Keys and elements are compared by user supplied functions.</s><s f="array_uintersect" u="array array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Data is compared by using an user-supplied callback.</s><s f="array_uintersect_assoc" u="array array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check. Data is compared by using an user-supplied callback.</s><s f="array_uintersect_uassoc" u="array array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)">Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check. Both data and keys are compared by using user-supplied callbacks.</s><s f="array_unique" u="array array_unique(array input)">Removes duplicate values from array</s><s f="array_unshift" u="int array_unshift(array stack, mixed var [, mixed ...])">Pushes elements onto the beginning of the array</s><s f="array_values" u="array array_values(array input)">Return just the values from the input array</s><s f="array_walk" u="bool array_walk(array input, string funcname [, mixed userdata])">Apply a user function to every member of an array</s><s f="array_walk_recursive" u="bool array_walk_recursive(array input, string funcname [, mixed userdata])">Apply a user function recursively to every member of an array</s><s f="arsort" u="bool arsort(array array_arg [, int sort_flags])">Sort an array in reverse order and maintain index association</s><s f="asort" u="bool asort(array array_arg [, int sort_flags])">Sort an array and maintain index association</s><s f="compact" u="array compact(mixed var_names [, mixed ...])">Creates a hash containing variables and their values</s><s f="count" u="int count(mixed var [, int mode])">Count the number of elements in a variable (usually an array)</s><s f="current" u="mixed current(array array_arg)">Return the element currently pointed to by the internal array pointer</s><s f="end" u="mixed end(array array_arg)">Advances array argument's internal pointer to the last element and return it</s><s f="extract" u="int extract(array var_array [, int extract_type [, string prefix]])">Imports variables into symbol table from an array</s><s f="in_array" u="bool in_array(mixed needle, array haystack [, bool strict])">Checks if the given value exists in the array</s><s f="key" u="mixed key(array array_arg)">Return the key of the element currently pointed to by the internal array pointer</s><s f="krsort" u="bool krsort(array array_arg [, int sort_flags])">Sort an array by key value in reverse order</s><s f="ksort" u="bool ksort(array array_arg [, int sort_flags])">Sort an array by key</s><s f="max" u="mixed max(mixed arg1 [, mixed arg2 [, mixed ...]])">Return the highest value in an array or a series of arguments</s><s f="min" u="mixed min(mixed arg1 [, mixed arg2 [, mixed ...]])">Return the lowest value in an array or a series of arguments</s><s f="natcasesort" u="void natcasesort(array array_arg)">Sort an array using case-insensitive natural sort</s><s f="natsort" u="void natsort(array array_arg)">Sort an array using natural sort</s><s f="next" u="mixed next(array array_arg)">Move array argument's internal pointer to the next element and return it</s><s f="prev" u="mixed prev(array array_arg)">Move array argument's internal pointer to the previous element and return it</s><s f="range" u="array range(mixed low, mixed high[, int step])">Create an array containing the range of integers or characters from low to high (inclusive)</s><s f="reset" u="mixed reset(array array_arg)">Set array argument's internal pointer to the first element and return it</s><s f="rsort" u="bool rsort(array array_arg [, int sort_flags])">Sort an array in reverse order</s><s f="shuffle" u="bool shuffle(array array_arg)">Randomly shuffle the contents of an array</s><s f="sort" u="bool sort(array array_arg [, int sort_flags])">Sort an array</s><s f="uasort" u="bool uasort(array array_arg, string cmp_function)">Sort an array with a user-defined comparison function and maintain index association</s><s f="uksort" u="bool uksort(array array_arg, string cmp_function)">Sort an array by keys using a user-defined comparison function</s><s f="usort" u="bool usort(array array_arg, string cmp_function)">Sort an array by values using a user-defined comparison function</s><s f="assert" u="int assert(string|bool assertion)">Checks if assertion is false</s><s f="assert_options" u="mixed assert_options(int what [, mixed value])">Set/get the various assert flags</s><s f="call_user_func" u="mixed call_user_func(string function_name [, mixed parmeter] [, mixed ...])">Call a user function which is the first parameter</s><s f="call_user_func_array" u="mixed call_user_func_array(string function_name, array parameters)">Call a user function which is the first parameter with the arguments contained in array</s><s f="call_user_method" u="mixed call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])">Call a user method on a specific object or class</s><s f="call_user_method_array" u="mixed call_user_method_array(string method_name, mixed object, array params)">Call a user method on a specific object or class using a parameter array</s><s f="connection_aborted" u="int connection_aborted(void)">Returns true if client disconnected</s><s f="connection_status" u="int connection_status(void)">Returns the connection status bitfield</s><s f="constant" u="mixed constant(string const_name)">Given the name of a constant this function will return the constants associated value</s><s f="error_log" u="bool error_log(string message [, int message_type [, string destination [, string extra_headers]]])">Send an error message somewhere</s><s f="flush" u="void flush(void)">Flush the output buffer</s><s f="get_cfg_var" u="string get_cfg_var(string option_name)">Get the value of a PHP configuration option</s><s f="get_current_user" u="string get_current_user(void)">Get the name of the owner of the current PHP script</s><s f="get_include_path" u="string get_include_path()">Get the current include_path configuration option</s><s f="get_magic_quotes_gpc" u="int get_magic_quotes_gpc(void)">Get the current active configuration setting of magic_quotes_gpc</s><s f="get_magic_quotes_runtime" u="int get_magic_quotes_runtime(void)">Get the current active configuration setting of magic_quotes_runtime</s><s f="getenv" u="string getenv(string varname)">Get the value of an environment variable</s><s f="getopt" u="array getopt(string options [, array longopts])">Get options from the command line argument list</s><s f="getprotobyname" u="int getprotobyname(string name)">Returns protocol number associated with name as per /etc/protocols</s><s f="getprotobynumber" u="string getprotobynumber(int proto)">Returns protocol name associated with protocol number proto</s><s f="getservbyname" u="int getservbyname(string service, string protocol)">Returns port associated with service. Protocol must be "tcp" or "udp"</s><s f="getservbyport" u="string getservbyport(int port, string protocol)">Returns service name associated with port. Protocol must be "tcp" or "udp"</s><s f="highlight_file" u="bool highlight_file(string file_name [, bool return] )">Syntax highlight a source file</s><s f="highlight_string" u="bool highlight_string(string string [, bool return] )">Syntax highlight a string or optionally return it</s><s f="ignore_user_abort" u="int ignore_user_abort(bool value)">Set whether we want to ignore a user abort event or not</s><s f="import_request_variables" u="bool import_request_variables(string types [, string prefix])">Import GET/POST/Cookie variables into the global scope</s><s f="ini_get" u="string ini_get(string varname)">Get a configuration option</s><s f="ini_get_all" u="array ini_get_all([string extension])">Get all configuration options</s><s f="ini_restore" u="void ini_restore(string varname)">Restore the value of a configuration option specified by varname</s><s f="ini_set" u="string ini_set(string varname, string newvalue)">Set a configuration option, returns false on error and the old value of the configuration option on success</s><s f="is_uploaded_file" u="bool is_uploaded_file(string path)">Check if file was created by rfc1867 upload</s><s f="move_uploaded_file" u="bool move_uploaded_file(string path, string new_path)">Move a file if and only if it was created by an upload</s><s f="parse_ini_file" u="array parse_ini_file(string filename [, bool process_sections])">Parse configuration file</s><s f="php_check_syntax" u="bool php_check_syntax(string file_name [, &amp;$error_message])">Check the syntax of the specified file.</s><s f="php_strip_whitespace" u="string php_strip_whitespace(string file_name)">Return source with stripped comments and whitespace</s><s f="print_r" u="mixed print_r(mixed var [, bool return])">Prints out or returns information about the specified variable</s><s f="putenv" u="bool putenv(string setting)">Set the value of an environment variable</s><s f="register_shutdown_function" u="void register_shutdown_function(string function_name)">Register a user-level function to be called on request termination</s><s f="register_tick_function" u="bool register_tick_function(string function_name [, mixed arg [, mixed ... ]])">Registers a tick callback function</s><s f="restore_include_path" u="void restore_include_path()">Restore the value of the include_path configuration option</s><s f="set_include_path" u="string set_include_path(string varname, string newvalue)">Sets the include_path configuration option</s><s f="set_magic_quotes_runtime" u="bool set_magic_quotes_runtime(int new_setting)">Set the current active configuration setting of magic_quotes_runtime and return previous</s><s f="sleep" u="void sleep(int seconds)">Delay for a given number of seconds</s><s f="time_nanosleep" u="mixed time_nanosleep(long seconds, long nanoseconds)">Delay for a number of seconds and nano seconds</s><s f="unregister_tick_function" u="void unregister_tick_function(string function_name)">Unregisters a tick callback function</s><s f="usleep" u="void usleep(int micro_seconds)">Delay for a given number of micro seconds</s><s f="get_browser" u="mixed get_browser([string browser_name [, bool return_array]])">Get information about the capabilities of a browser. If browser_name is omitted     or null, HTTP_USER_AGENT is used. Returns an object by default; if return_array     is true, returns an array.</s><s f="crypt" u="string crypt(string str [, string salt])">Encrypt a string</s><s f="convert_cyr_string" u="string convert_cyr_string(string str, string from, string to)">Convert from one Cyrillic character set to another</s><s f="checkdate" u="bool checkdate(int month, int day, int year)">Returns true(1) if it is a valid date in gregorian calendar</s><s f="date" u="string date(string format [, int timestamp])">Format a local time/date</s><s f="getdate" u="array getdate([int timestamp])">Get date/time information</s><s f="gmdate" u="string gmdate(string format [, int timestamp])">Format a GMT/UTC date/time</s><s f="gmmktime" u="int gmmktime(int hour, int min, int sec, int mon, int day, int year)">Get UNIX timestamp for a GMT date</s><s f="gmstrftime" u="string gmstrftime(string format [, int timestamp])">Format a GMT/UCT time/date according to locale settings</s><s f="idate" u="int idate(string format [, int timestamp])">Format a local time/date as integer</s><s f="localtime" u="array localtime([int timestamp [, bool associative_array]])">Returns the results of the C system call localtime as an associative array if the associative_array argument is set to 1 other wise it is a regular array</s><s f="mktime" u="int mktime(int hour, int min, int sec, int mon, int day, int year)">Get UNIX timestamp for a date</s><s f="strftime" u="string strftime(string format [, int timestamp])">Format a local time/date according to locale settings</s><s f="strtotime" u="int strtotime(string time, int now)">Convert string representation of date and time to a timestamp</s><s f="time" u="int time(void)">Return current UNIX timestamp</s><s f="chdir" u="bool chdir(string directory)">Change the current directory</s><s f="chroot" u="bool chroot(string directory)">Change root directory</s><s f="closedir" u="void closedir([resource dir_handle])">Close directory connection identified by the dir_handle</s><s f="dir" u="object dir(string directory[, resource context])">Directory class with properties, handle and class and methods read, rewind and close</s><s f="getcwd" u="mixed getcwd(void)">Gets the current directory</s><s f="glob" u="array glob(string pattern [, int flags])">Find pathnames matching a pattern</s><s f="opendir" u="mixed opendir(string path[, resource context])">Open a directory and return a dir_handle</s><s f="readdir" u="string readdir([resource dir_handle])">Read directory entry from dir_handle</s><s f="rewinddir" u="void rewinddir([resource dir_handle])">Rewind dir_handle back to the start</s><s f="scandir" u="array scandir(string dir [, int sorting_order [, resource context]])">List files &amp; directories inside the specified path</s><s f="dl" u="int dl(string extension_filename)">Load a PHP extension at runtime</s><s f="dns_check_record" u="int dns_check_record(string host [, string type])">Check DNS records corresponding to a given Internet host name or IP address</s><s f="dns_get_mx" u="bool dns_get_mx(string hostname, array mxhosts [, array weight])">Get MX records corresponding to a given Internet host name</s><s f="gethostbyaddr" u="string gethostbyaddr(string ip_address)">Get the Internet host name corresponding to a given IP address</s><s f="gethostbyname" u="string gethostbyname(string hostname)">Get the IP address corresponding to a given Internet host name</s><s f="gethostbynamel" u="array gethostbynamel(string hostname)">Return a list of IP addresses that a given hostname resolves to.</s><s f="escapeshellarg" u="string escapeshellarg(string arg)">Quote and escape an argument for use in a shell command</s><s f="escapeshellcmd" u="string escapeshellcmd(string command)">Escape shell metacharacters</s><s f="exec" u="string exec(string command [, array &amp;output [, int &amp;return_value]])">Execute an external program</s><s f="passthru" u="void passthru(string command [, int &amp;return_value])">Execute an external program and display raw output</s><s f="proc_nice" u="bool proc_nice(int priority)">Change the priority of the current process</s><s f="shell_exec" u="string shell_exec(string cmd)">Execute command via shell and return complete output as string</s><s f="system" u="int system(string command [, int &amp;return_value])">Execute an external program and display output</s><s f="copy" u="bool copy(string source_file, string destination_file)">Copy a file</s><s f="fclose" u="bool fclose(resource fp)">Close an open file pointer</s><s f="feof" u="bool feof(resource fp)">Test for end-of-file on a file pointer</s><s f="fflush" u="bool fflush(resource fp)">Flushes output</s><s f="fgetc" u="string fgetc(resource fp)">Get a character from file pointer</s><s f="fgetcsv" u="array fgetcsv(resource fp [,int length [, string delimiter [, string enclosure]]])">Get line from file pointer and parse for CSV fields</s><s f="fgets" u="string fgets(resource fp[, int length])">Get a line from file pointer</s><s f="fgetss" u="string fgetss(resource fp [, int length, string allowable_tags])">Get a line from file pointer and strip HTML tags</s><s f="file" u="array file(string filename [, int flags[, resource context]])">Read entire file into an array</s><s f="file_get_contents" u="string file_get_contents(string filename [, bool use_include_path [, resource context]])">Read the entire file into a string</s><s f="file_put_contents" u="int file_put_contents(string file, mixed data [, int flags [, resource context]])">Write/Create a file with contents data and return the number of bytes written</s><s f="flock" u="bool flock(resource fp, int operation [, int &amp;wouldblock])">Portable file locking</s><s f="fnmatch" u="bool fnmatch(string pattern, string filename [, int flags])">Match filename against pattern</s><s f="fopen" u="resource fopen(string filename, string mode [, bool use_include_path [, resource context]])">Open a file or a URL and return a file pointer</s><s f="fpassthru" u="int fpassthru(resource fp)">Output all remaining data from a file pointer</s><s f="fread" u="string fread(resource fp, int length)">Binary-safe file read</s><s f="fscanf" u="mixed fscanf(resource stream, string format [, string ...])">Implements a mostly ANSI compatible fscanf()</s><s f="fseek" u="int fseek(resource fp, int offset [, int whence])">Seek on a file pointer</s><s f="fstat" u="int fstat(resource fp)">Stat() on a filehandle</s><s f="ftell" u="int ftell(resource fp)">Get file pointer's read/write position</s><s f="ftruncate" u="bool ftruncate(resource fp, int size)">Truncate file to 'size' length</s><s f="fwrite" u="int fwrite(resource fp, string str [, int length])">Binary-safe file write</s><s f="get_meta_tags" u="array get_meta_tags(string filename [, bool use_include_path])">Extracts all meta tag content attributes from a file and returns an array</s><s f="mkdir" u="int mkdir(char *dir int mode)"></s><s f="mkdir" u="bool mkdir(string pathname [, int mode [, bool recursive [, resource context]]])">Create a directory</s><s f="pclose" u="int pclose(resource fp)">Close a file pointer opened by popen()</s><s f="popen" u="resource popen(string command, string mode)">Execute a command and open either a read or a write pipe to it</s><s f="readfile" u="int readfile(string filename [, bool use_include_path[, resource context]])">Output a file or a URL</s><s f="realpath" u="string realpath(string path)">Return the resolved path</s><s f="rename" u="bool rename(string old_name, string new_name[, resource context])">Rename a file</s><s f="rewind" u="bool rewind(resource fp)">Rewind the position of a file pointer</s><s f="rmdir" u="bool rmdir(string dirname[, resource context])">Remove a directory</s><s f="tempnam" u="string tempnam(string dir, string prefix)">Create a unique filename in a directory</s><s f="tmpfile" u="resource tmpfile(void)">Create a temporary file that will be deleted automatically after use</s><s f="umask" u="int umask([int mask])">Return or change the umask</s><s f="unlink" u="bool unlink(string filename[, context context])">Delete a file</s><s f="chgrp" u="bool chgrp(string filename, mixed group)">Change file group</s><s f="chmod" u="bool chmod(string filename, int mode)">Change file mode</s><s f="clearstatcache" u="void clearstatcache(void)">Clear file stat cache</s><s f="disk_free_space" u="float disk_free_space(string path)">Get free disk space for filesystem that path is on</s><s f="disk_total_space" u="float disk_total_space(string path)">Get total disk space for filesystem that path is on</s><s f="file_exists" u="bool file_exists(string filename)">Returns true if filename exists</s><s f="fileatime" u="int fileatime(string filename)">Get last access time of file</s><s f="filectime" u="int filectime(string filename)">Get inode modification time of file</s><s f="filegroup" u="int filegroup(string filename)">Get file group</s><s f="fileinode" u="int fileinode(string filename)">Get file inode</s><s f="filemtime" u="int filemtime(string filename)">Get last modification time of file</s><s f="fileowner" u="int fileowner(string filename)">Get file owner</s><s f="fileperms" u="int fileperms(string filename)">Get file permissions</s><s f="filesize" u="int filesize(string filename)">Get file size</s><s f="filetype" u="string filetype(string filename)">Get file type</s><s f="is_dir" u="bool is_dir(string filename)">Returns true if file is directory</s><s f="is_executable" u="bool is_executable(string filename)">Returns true if file is executable</s><s f="is_file" u="bool is_file(string filename)">Returns true if file is a regular file</s><s f="is_link" u="bool is_link(string filename)">Returns true if file is symbolic link</s><s f="is_readable" u="bool is_readable(string filename)">Returns true if file can be read</s><s f="is_writable" u="bool is_writable(string filename)">Returns true if file can be written</s><s f="lstat" u="array lstat(string filename)">Give information about a file or symbolic link</s><s f="stat" u="array stat(string filename)">Give information about a file</s><s f="touch" u="bool touch(string filename [, int time [, int atime]])">Set modification time of file</s><s f="fprintf" u="int fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])">Output a formatted string into a stream</s><s f="printf" u="int printf(string format [, mixed arg1 [, mixed ...]])">Output a formatted string</s><s f="sprintf" u="string sprintf(string format [, mixed arg1 [, mixed ...]])">Return a formatted string</s><s f="vfprintf" u="int vfprintf(resource stream, string format, array args)">Output a formatted string into a stream</s><s f="vprintf" u="int vprintf(string format, array args)">Output a formatted string</s><s f="vsprintf" u="string vsprintf(string format, array args)">Return a formatted string</s><s f="fsockopen" u="resource fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])">Open Internet or Unix domain socket connection</s><s f="pfsockopen" u="resource pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])">Open persistent Internet or Unix domain socket connection</s><s f="ftok" u="int ftok(string pathname, string proj)">Convert a pathname and a project identifier to a System V IPC key</s><s f="header" u="void header(string header [, bool replace, [int http_response_code]])">Sends a raw HTTP header</s><s f="headers_list" u="string headers_list(void)">Return list of headers to be sent / already sent</s><s f="headers_sent" u="bool headers_sent([string &amp;$file [, int &amp;$line]])">Returns true if headers have already been sent, false otherwise</s><s f="setcookie" u="bool setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])">Send a cookie</s><s f="setrawcookie" u="bool setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])">Send a cookie with no url encoding of the value</s><s f="get_html_translation_table" u="array get_html_translation_table([int table [, int quote_style]])">Returns the internal translation table used by htmlspecialchars and htmlentities</s><s f="html_entity_decode" u="string html_entity_decode(string string [, int quote_style][, string charset])">Convert all HTML entities to their applicable characters</s><s f="htmlentities" u="string htmlentities(string string [, int quote_style][, string charset])">Convert all applicable characters to HTML entities</s><s f="htmlspecialchars" u="string htmlspecialchars(string string [, int quote_style][, string charset])">Convert special characters to HTML entities</s><s f="http_build_query" u="string http_build_query(mixed formdata [, string prefix])">Generates a form-encoded query string from an associative array or object.</s><s f="getimagesize" u="array getimagesize(string imagefile [, array info])">Get the size of an image as 4-element array</s><s f="image_type_to_extension" u="string image_type_to_extension(int imagetype [, bool include_dot])">Get file extension for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype</s><s f="image_type_to_mime_type" u="string image_type_to_mime_type(int imagetype)">Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype</s><s f="php_egg_logo_guid" u="string php_egg_logo_guid(void)">Return the special ID used to request the PHP logo in phpinfo screens</s><s f="php_ini_scanned_files" u="string php_ini_scanned_files(void)">Return comma-separated string of .ini files parsed from the additional ini dir</s><s f="php_logo_guid" u="string php_logo_guid(void)">Return the special ID used to request the PHP logo in phpinfo screens</s><s f="php_real_logo_guid" u="string php_real_logo_guid(void)">Return the special ID used to request the PHP logo in phpinfo screens</s><s f="php_sapi_name" u="string php_sapi_name(void)">Return the current SAPI module name</s><s f="php_uname" u="string php_uname(void)">Return information about the system PHP was built on</s><s f="phpcredits" u="void phpcredits([int flag])">Prints the list of people who've contributed to the PHP project</s><s f="phpinfo" u="void phpinfo([int what])">Output a page of useful information about PHP and the current request</s><s f="phpversion" u="string phpversion([string extension])">Return the current PHP version</s><s f="zend_logo_guid" u="string zend_logo_guid(void)">Return the special ID used to request the Zend logo in phpinfo screens</s><s f="iptcembed" u="array iptcembed(string iptcdata, string jpeg_file_name [, int spool])">Embed binary IPTC data into a JPEG image.</s><s f="iptcparse" u="array iptcparse(string iptcdata)">Parse binary IPTC-data into associative array</s><s f="lcg_value" u="float lcg_value()">Returns a value from the combined linear congruential generator</s><s f="levenshtein" u="int levenshtein(string str1, string str2)">Calculate Levenshtein distance between two strings</s><s f="link" u="int link(string target, string link)">Create a hard link</s><s f="linkinfo" u="int linkinfo(string filename)">Returns the st_dev field of the UNIX C stat structure describing the link</s><s f="readlink" u="string readlink(string filename)">Return the target of a symbolic link</s><s f="symlink" u="int symlink(string target, string link)">Create a symbolic link</s><s f="ezmlm_hash" u="int ezmlm_hash(string addr)">Calculate EZMLM list hash value.</s><s f="mail" u="int mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])">Send an email message</s><s f="abs" u="int abs(int number)">Return the absolute value of the number</s><s f="acos" u="float acos(float number)">Return the arc cosine of the number in radians</s><s f="acosh" u="float acosh(float number)">Returns the inverse hyperbolic cosine of the number, i.e. the value whose hyperbolic cosine is number</s><s f="asin" u="float asin(float number)">Returns the arc sine of the number in radians</s><s f="asinh" u="float asinh(float number)">Returns the inverse hyperbolic sine of the number, i.e. the value whose hyperbolic sine is number</s><s f="atan" u="float atan(float number)">Returns the arc tangent of the number in radians</s><s f="atanh" u="float atanh(float number)">Returns the inverse hyperbolic tangent of the number, i.e. the value whose hyperbolic tangent is number</s><s f="base_convert" u="string base_convert(string number, int frombase, int tobase)">Converts a number in a string from any base &lt;= 36 to any base &lt;= 36</s><s f="bindec" u="int bindec(string binary_number)">Returns the decimal equivalent of the binary number</s><s f="ceil" u="float ceil(float number)">Returns the next highest integer value of the number</s><s f="cos" u="float cos(float number)">Returns the cosine of the number in radians</s><s f="cosh" u="float cosh(float number)">Returns the hyperbolic cosine of the number, defined as (exp(number)      exp(-number))/2</s><s f="decbin" u="string decbin(int decimal_number)">Returns a string containing a binary representation of the number</s><s f="dechex" u="string dechex(int decimal_number)">Returns a string containing a hexadecimal representation of the given number</s><s f="decoct" u="string decoct(int decimal_number)">Returns a string containing an octal representation of the given number</s><s f="exp" u="float exp(float number)">Returns e raised to the power of the number</s><s f="floor" u="float floor(float number)">Returns the next lowest integer value from the number</s><s f="fmod" u="float fmod(float x, float y)">Returns the remainder of dividing x by y as a float</s><s f="hexdec" u="int hexdec(string hexadecimal_number)">Returns the decimal equivalent of the hexadecimal number</s><s f="hypot" u="float hypot(float num1, float num2)">Returns sqrt(num1*num1      num2*num2)</s><s f="is_finite" u="bool is_finite(float val)">Returns whether argument is finite</s><s f="is_infinite" u="bool is_infinite(float val)">Returns whether argument is infinite</s><s f="is_nan" u="bool is_nan(float val)">Returns whether argument is not a number</s><s f="log" u="float log(float number, [float base])">Returns the natural logarithm of the number, or the base log if base is specified</s><s f="number_format" u="string number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])">Formats a number with grouped thousands</s><s f="octdec" u="int octdec(string octal_number)">Returns the decimal equivalent of an octal string</s><s f="pi" u="float pi(void)">Returns an approximation of pi</s><s f="pow" u="number pow(number base, number exponent)">Returns base raised to the power of exponent. Returns integer result when possible</s><s f="round" u="float round(float number [, int precision])">Returns the number rounded to specified precision</s><s f="sin" u="float sin(float number)">Returns the sine of the number in radians</s><s f="sinh" u="float sinh(float number)">Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2</s><s f="sqrt" u="float sqrt(float number)">Returns the square root of the number</s><s f="tan" u="float tan(float number)">Returns the tangent of the number in radians</s><s f="tanh" u="float tanh(float number)">Returns the hyperbolic tangent of the number, defined as sinh(number)/cosh(number)</s><s f="metaphone" u="string metaphone(string text, int phones)">Break english phrases down into their phonemes</s><s f="getrusage" u="array getrusage([int who])">Returns an array of usage statistics</s><s f="gettimeofday" u="array gettimeofday(void)">Returns the current time as array</s><s f="microtime" u="mixed microtime([bool get_as_float])">Returns either a string or a float containing the current time in seconds and microseconds</s><s f="pack" u="string pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])">Takes one or more arguments and packs them into a binary string according to the format argument</s><s f="unpack" u="array unpack(string format, string input)">Unpack binary string into named array elements according to format argument</s><s f="getlastmod" u="int getlastmod(void)">Get time of last page modification</s><s f="getmygid" u="int getmygid(void)">Get PHP script owner's GID</s><s f="getmyinode" u="int getmyinode(void)">Get the inode of the current script being parsed</s><s f="getmypid" u="int getmypid(void)">Get current process ID</s><s f="getmyuid" u="int getmyuid(void)">Get PHP script owner's UID</s><s f="proc_close" u="int proc_close(resource process)">close a process opened by proc_open</s><s f="proc_get_status" u="array proc_get_status(resource process)">get information about a process opened by proc_open</s><s f="proc_open" u="resource proc_open(string command, array descriptorspec, array &amp;pipes [, string cwd [, array env [, array other_options]]])">Run a process with more control over it's file descriptors</s><s f="proc_terminate" u="int proc_terminate(resource process [, long signal])">kill a process opened by proc_open</s><s f="quoted_printable_decode" u="string quoted_printable_decode(string str)">Convert a quoted-printable string to an 8 bit string</s><s f="getrandmax" u="int getrandmax(void)">Returns the maximum value a random number can have</s><s f="mt_getrandmax" u="int mt_getrandmax(void)">Returns the maximum value a random number from Mersenne Twister can have</s><s f="mt_rand" u="int mt_rand([int min, int max])">Returns a random number from Mersenne Twister</s><s f="mt_srand" u="void mt_srand([int seed])">Seeds Mersenne Twister random number generator</s><s f="rand" u="int rand([int min, int max])">Returns a random number</s><s f="srand" u="void srand([int seed])">Seeds random number generator</s><s f="ereg" u="int ereg(string pattern, string string [, array registers])">Regular expression match</s><s f="ereg_replace" u="string ereg_replace(string pattern, string replacement, string string)">Replace regular expression</s><s f="eregi" u="int eregi(string pattern, string string [, array registers])">Case-insensitive regular expression match</s><s f="eregi_replace" u="string eregi_replace(string pattern, string replacement, string string)">Case insensitive replace regular expression</s><s f="split" u="array split(string pattern, string string [, int limit])">Split string into array by regular expression</s><s f="spliti" u="array spliti(string pattern, string string [, int limit])">Split string into array by regular expression case-insensitive</s><s f="sql_regcase" u="string sql_regcase(string string)">Make regular expression for case insensitive match</s><s f="soundex" u="string soundex(string str)">Calculate the soundex key of a string</s><s f="set_socket_blocking" u="bool set_socket_blocking(resource socket, int mode)">Set blocking/non-blocking mode on a socket</s><s f="stream_context_create" u="resource stream_context_create([array options])">Create a file context and optionally set parameters</s><s f="stream_context_get_options" u="array stream_context_get_options(resource context|resource stream)">Retrieve options for a stream/wrapper/context</s><s f="stream_context_set_option" u="bool stream_context_set_option(resource context|resource stream, string wrappername, string optionname, mixed value)">Set an option for a wrapper</s><s f="stream_context_set_params" u="bool stream_context_set_params(resource context|resource stream, array options)">Set parameters for a file context</s><s f="stream_copy_to_stream" u="long stream_copy_to_stream(resource source, resource dest [, long maxlen ])">Reads up to maxlen bytes from source stream and writes them to dest stream.</s><s f="stream_filter_append" u="bool stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])">Append a filter to a stream</s><s f="stream_filter_prepend" u="bool stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])">Prepend a filter to a stream</s><s f="stream_get_contents" u="long stream_get_contents(resource source [, long maxlen ])">Reads all remaining bytes (or up to maxlen bytes) from a stream and returns them as a string.</s><s f="stream_get_line" u="string stream_get_line(resource stream, int maxlen, string ending)">Read up to maxlen bytes from a stream or until the ending string is found</s><s f="stream_get_meta_data" u="resource stream_get_meta_data(resource fp)">Retrieves header/meta data from streams/file pointers</s><s f="stream_get_transports" u="array stream_get_transports()">Retrieves list of registered socket transports</s><s f="stream_get_wrappers" u="array stream_get_wrappers()">Retrieves list of registered stream wrappers</s><s f="stream_select" u="int stream_select(array &amp;read_streams, array &amp;write_streams, array &amp;except_streams, int tv_sec[, int tv_usec])">Runs the select() system call on the sets of streams with a timeout specified by tv_sec and tv_usec</s><s f="stream_set_blocking" u="bool stream_set_blocking(resource socket, int mode)">Set blocking/non-blocking mode on a socket or stream</s><s f="stream_set_timeout" u="bool stream_set_timeout(resource stream, int seconds, int microseconds)">Set timeout on stream read to seconds      microseonds</s><s f="stream_set_write_buffer" u="int stream_set_write_buffer(resource fp, int buffer)">Set file write buffer</s><s f="stream_socket_accept" u="resource stream_socket_accept(resource serverstream, [ double timeout, string &amp;peername ])">Accept a client connection from a server socket</s><s f="stream_socket_client" u="resource stream_socket_client(string remoteaddress [, long &amp;errcode, string &amp;errstring, double timeout, long flags, resource context])">Open a client connection to a remote address</s><s f="stream_socket_get_name" u="string stream_socket_get_name(resource stream, bool want_peer)">Returns either the locally bound or remote name for a socket stream</s><s f="stream_socket_recvfrom" u="string stream_socket_recvfrom(resource stream, long amount [, long flags [, string &amp;remote_addr]])">Receives data from a socket stream</s><s f="stream_socket_sendto" u="long stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])">Send data to a socket stream.  If target_addr is specified it must be in dotted quad (or [ipv6]) format</s><s f="stream_socket_server" u="resource stream_socket_server(string localaddress [, long &amp;errcode, string &amp;errstring, long flags, resource context])">Create a server socket bound to localaddress</s><s f="addcslashes" u="string addcslashes(string str, string charlist)">Escapes all chars mentioned in charlist with backslash. It creates octal representations if asked to backslash characters with 8th bit set or with ASCII&lt;32 (except '\n', '\r', '\t' etc...)</s><s f="addslashes" u="string addslashes(string str)">Escapes single quote, double quotes and backslash characters in a string with backslashes</s><s f="basename" u="string basename(string path [, string suffix])">Returns the filename component of the path</s><s f="chr" u="string chr(int ascii)">Converts ASCII code to a character</s><s f="chunk_split" u="string chunk_split(string str [, int chunklen [, string ending]])">Returns split line</s><s f="count_chars" u="mixed count_chars(string input [, int mode])">Returns info about what characters are used in input</s><s f="dirname" u="string dirname(string path)">Returns the directory name component of the path</s><s f="explode" u="array explode(string separator, string str [, int limit])">Splits a string on string separator and return array of components</s><s f="hebrev" u="string hebrev(string str [, int max_chars_per_line])">Converts logical Hebrew text to visual text</s><s f="hebrevc" u="string hebrevc(string str [, int max_chars_per_line])">Converts logical Hebrew text to visual text with newline conversion</s><s f="implode" u="string implode([string glue,] array pieces)">Joins array elements placing glue string between items and return one string</s><s f="join" u="string join(array src, string glue)">An alias for implode</s><s f="localeconv" u="array localeconv(void)">Returns numeric formatting information based on the current locale</s><s f="ltrim" u="string ltrim(string str [, string character_mask])">Strips whitespace from the beginning of a string</s><s f="money_format" u="string money_format(string format , float value)">Convert monetary value(s) to string</s><s f="nl_langinfo" u="string nl_langinfo(int item)">Query language and locale information</s><s f="ord" u="int ord(string character)">Returns ASCII value of character</s><s f="parse_str" u="void parse_str(string encoded_string [, array result])">Parses GET/POST/COOKIE data and sets global variables</s><s f="pathinfo" u="array pathinfo(string path)">Returns information about a certain string</s><s f="quotemeta" u="string quotemeta(string str)">Quotes meta characters</s><s f="rtrim" u="string rtrim(string str [, string character_mask])">Removes trailing whitespace</s><s f="setlocale" u="string setlocale(mixed category, string locale [, string ...])">Set locale information</s><s f="similar_text" u="int similar_text(string str1, string str2 [, float percent])">Calculates the similarity between two strings</s><s f="sscanf" u="mixed sscanf(string str, string format [, string ...])">Implements an ANSI C compatible sscanf</s><s f="str_ireplace" u="mixed str_ireplace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])">Replaces all occurrences of search in haystack with replace / case-insensitive</s><s f="str_pad" u="string str_pad(string input, int pad_length [, string pad_string [, int pad_type]])">Returns input string padded on the left or right to specified length with pad_string</s><s f="str_repeat" u="string str_repeat(string input, int mult)">Returns the input string repeat mult times</s><s f="str_replace" u="mixed str_replace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])">Replaces all occurrences of search in haystack with replace</s><s f="str_shuffle" u="void str_shuffle(string str)">Shuffles string. One permutation of all possible is created</s><s f="str_split" u="array str_split(string str [, int split_length])">Convert a string to an array. If split_length is specified, break the string down into chunks each split_length characters long.</s><s f="str_word_count" u="mixed str_word_count(string str, [int format])">Counts the number of words inside a string. If format of 1 is specified,     	then the function will return an array containing all the words     	found inside the string. If format of 2 is specified, then the function     	will return an associated array where the position of the word is the key     	and the word itself is the value.     	     	For the purpose of this function, 'word' is defined as a locale dependent     	string containing alphabetic characters, which also may contain, but not start     	with "'" and "-" characters.</s><s f="strchr" u="string strchr(string haystack, string needle)">An alias for strstr</s><s f="strcoll" u="int strcoll(string str1, string str2)">Compares two strings using the current locale</s><s f="strcspn" u="int strcspn(string str, string mask [, start [, len]])">Finds length of initial segment consisting entirely of characters not found in mask. If start or/and length is provide works like strcspn(substr($s,$start,$len),$bad_chars)</s><s f="strip_tags" u="string strip_tags(string str [, string allowable_tags])">Strips HTML and PHP tags from a string</s><s f="stripcslashes" u="string stripcslashes(string str)">Strips backslashes from a string. Uses C-style conventions</s><s f="stripos" u="int stripos(string haystack, string needle [, int offset])">Finds position of first occurrence of a string within another, case insensitive</s><s f="stripslashes" u="string stripslashes(string str)">Strips backslashes from a string</s><s f="stristr" u="string stristr(string haystack, string needle)">Finds first occurrence of a string within another, case insensitive</s><s f="strnatcasecmp" u="int strnatcasecmp(string s1, string s2)">Returns the result of case-insensitive string comparison using 'natural' algorithm</s><s f="strnatcmp" u="int strnatcmp(string s1, string s2)">Returns the result of string comparison using 'natural' algorithm</s><s f="strpbrk" u="array strpbrk(string haystack, string char_list)">Search a string for any of a set of characters</s><s f="strpos" u="int strpos(string haystack, string needle [, int offset])">Finds position of first occurrence of a string within another</s><s f="strrchr" u="string strrchr(string haystack, string needle)">Finds the last occurrence of a character in a string within another</s><s f="strrev" u="string strrev(string str)">Reverse a string</s><s f="strripos" u="int strripos(string haystack, string needle [, int offset])">Finds position of last occurrence of a string within another string</s><s f="strrpos" u="int strrpos(string haystack, string needle [, int offset])">Finds position of last occurrence of a string within another string</s><s f="strspn" u="int strspn(string str, string mask [, start [, len]])">Finds length of initial segment consisting entirely of characters found in mask. If start or/and length is provided works like strspn(substr($s,$start,$len),$good_chars)</s><s f="strstr" u="string strstr(string haystack, string needle)">Finds first occurrence of a string within another</s><s f="strtok" u="string strtok([string str,] string token)">Tokenize a string</s><s f="strtolower" u="string strtolower(string str)">Makes a string lowercase</s><s f="strtoupper" u="string strtoupper(string str)">Makes a string uppercase</s><s f="strtr" u="string strtr(string str, string from, string to)">Translates characters in str using given translation tables</s><s f="substr" u="string substr(string str, int start [, int length])">Returns part of a string</s><s f="substr_compare" u="int substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])">Binary safe optionally case insensitive comparison of 2 strings from an offset, up to length characters</s><s f="substr_count" u="int substr_count(string haystack, string needle)">Returns the number of times a substring occurs in the string</s><s f="substr_replace" u="mixed substr_replace(mixed str, mixed repl, mixed start [, mixed length])">Replaces part of a string with another string</s><s f="trim" u="string trim(string str [, string character_mask])">Strips whitespace from the beginning and end of a string</s><s f="ucfirst" u="string ucfirst(string str)">Makes a string's first character uppercase</s><s f="ucwords" u="string ucwords(string str)">Uppercase the first character of every word in a string</s><s f="wordwrap" u="string wordwrap(string str [, int width [, string break [, boolean cut]]])">Wraps buffer to selected number of characters using string break char</s><s f="date_sunrise" u="mixed date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])">Returns time of sunrise for a given day &amp; location</s><s f="date_sunset" u="mixed date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])">Returns time of sunset for a given day &amp; location</s><s f="closelog" u="bool closelog(void)">Close connection to system logger</s><s f="define_syslog_variables" u="void define_syslog_variables(void)">Initializes all syslog-related variables</s><s f="openlog" u="bool openlog(string ident, int option, int facility)">Open connection to system logger</s><s f="syslog" u="bool syslog(int priority, string message)">Generate a system log message</s><s f="floatval" u="float floatval(mixed var)">Get the float value of a variable</s><s f="gettype" u="string gettype(mixed var)">Returns the type of the variable</s><s f="intval" u="int intval(mixed var [, int base])">Get the integer value of a variable using the optional base for the conversion</s><s f="is_array" u="bool is_array(mixed var)">Returns true if variable is an array</s><s f="is_bool" u="bool is_bool(mixed var)">Returns true if variable is a boolean</s><s f="is_callable" u="bool is_callable(mixed var [, bool syntax_only [, string callable_name]])">Returns true if var is callable.</s><s f="is_float" u="bool is_float(mixed var)">Returns true if variable is float point</s><s f="is_int" u="bool is_int(mixed var)">Returns true if variable is a int (integer)</s><s f="is_long" u="bool is_long(mixed var)">Returns true if variable is a long (integer)</s><s f="is_null" u="bool is_null(mixed var)">Returns true if variable is null</s><s f="is_numeric" u="bool is_numeric(mixed value)">Returns true if value is a number or a numeric string</s><s f="is_object" u="bool is_object(mixed var)">Returns true if variable is an object</s><s f="is_resource" u="bool is_resource(mixed var)">Returns true if variable is a resource</s><s f="is_scalar" u="bool is_scalar(mixed value)">Returns true if value is a scalar</s><s f="is_string" u="bool is_string(mixed var)">Returns true if variable is a string</s><s f="settype" u="bool settype(mixed var, string type)">Set the type of the variable</s><s f="strval" u="string strval(mixed var)">Get the string value of a variable</s><s f="uniqid" u="string uniqid([string prefix , bool more_entropy])">Generates a unique ID</s><s f="get_headers" u="array get_headers(string url)">fetches all the headers sent by the server in response to a HTTP request</s><s f="parse_url" u="array parse_url(string url)">Parse a URL and return its components</s><s f="rawurldecode" u="string rawurldecode(string str)">Decodes URL-encodes string</s><s f="rawurlencode" u="string rawurlencode(string str)">URL-encodes string</s><s f="urldecode" u="string urldecode(string str)">Decodes URL-encoded string</s><s f="urlencode" u="string urlencode(string str)">URL-encodes string</s><s f="stream_bucket_append" u="void stream_bucket_append(resource brigade, resource bucket)">Append bucket to brigade</s><s f="stream_bucket_make_writeable" u="object stream_bucket_make_writeable(resource brigade)">Return a bucket object from the brigade for operating on</s><s f="stream_bucket_new" u="resource stream_bucket_new(resource stream, string buffer)">Create a new bucket for use on the current stream</s><s f="stream_bucket_prepend" u="void stream_bucket_prepend(resource brigade, resource bucket)">Prepend bucket to brigade</s><s f="stream_filter_register" u="bool stream_filter_register(string filtername, string classname)">Registers a custom filter handler class</s><s f="stream_get_filters" u="array stream_get_filters(void)">Returns a list of registered filters</s><s f="uudecode" u="string uudecode(string data)">decode a uuencoded string</s><s f="uuencode" u="string uuencode(string data)">uuencode a string</s><s f="debug_zval_dump" u="void debug_zval_dump(mixed var)">Dumps a string representation of an internal zend value to output.</s><s f="memory_get_usage" u="int memory_get_usage()">Returns the allocated by PHP memory</s><s f="serialize" u="string serialize(mixed variable)">Returns a string representation of variable (which can later be unserialized)</s><s f="unserialize" u="mixed unserialize(string variable_representation)">Takes a string representation of variable and recreates it</s><s f="var_dump" u="void var_dump(mixed var)">Dumps a string representation of variable to output</s><s f="var_export" u="mixed var_export(mixed var [, bool return])">Outputs or returns a string representation of a variable</s><s f="version_compare" u="int version_compare(string ver1, string ver2 [, string oper])">Compares two "PHP-standardized" version number strings</s><s f="sybase_affected_rows" u="int sybase_affected_rows([int link_id])">Get number of affected rows in last query</s><s f="sybase_close" u="bool sybase_close([int link_id])">Close Sybase connection</s><s f="sybase_connect" u="int sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open Sybase server connection</s><s f="sybase_data_seek" u="bool sybase_data_seek(int result, int offset)">Move internal row pointer</s><s f="sybase_fetch_array" u="array sybase_fetch_array(int result)">Fetch row as array</s><s f="sybase_fetch_field" u="object sybase_fetch_field(int result [, int offset])">Get field information</s><s f="sybase_fetch_object" u="object sybase_fetch_object(int result)">Fetch row as object</s><s f="sybase_fetch_row" u="array sybase_fetch_row(int result)">Get row as enumerated array</s><s f="sybase_field_seek" u="bool sybase_field_seek(int result, int offset)">Set field offset</s><s f="sybase_free_result" u="bool sybase_free_result(int result)">Free result memory</s><s f="sybase_get_last_message" u="string sybase_get_last_message(void)">Returns the last message from server (over min_message_severity)</s><s f="sybase_min_error_severity" u="void sybase_min_error_severity(int severity)">Sets the minimum error severity</s><s f="sybase_min_message_severity" u="void sybase_min_message_severity(int severity)">Sets the minimum message severity</s><s f="sybase_num_fields" u="int sybase_num_fields(int result)">Get number of fields in result</s><s f="sybase_num_rows" u="int sybase_num_rows(int result)">Get number of rows in result</s><s f="sybase_pconnect" u="int sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open persistent Sybase connection</s><s f="sybase_query" u="int sybase_query(string query [, int link_id])">Send Sybase query</s><s f="sybase_result" u="string sybase_result(int result, int row, mixed field)">Get result data</s><s f="sybase_select_db" u="bool sybase_select_db(string database [, int link_id])">Select Sybase database</s><s f="sybase_affected_rows" u="int sybase_affected_rows([int link_id])">Get number of affected rows in last query</s><s f="sybase_close" u="bool sybase_close([int link_id])">Close Sybase connection</s><s f="sybase_connect" u="int sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open Sybase server connection</s><s f="sybase_data_seek" u="bool sybase_data_seek(int result, int offset)">Move internal row pointer</s><s f="sybase_deadlock_retry_count" u="void sybase_deadlock_retry_count(int retry_count)">Sets deadlock retry count</s><s f="sybase_fetch_array" u="array sybase_fetch_array(int result)">Fetch row as array</s><s f="sybase_fetch_assoc" u="array sybase_fetch_assoc(int result)">Fetch row as array without numberic indices</s><s f="sybase_fetch_field" u="object sybase_fetch_field(int result [, int offset])">Get field information</s><s f="sybase_fetch_object" u="object sybase_fetch_object(int result [, mixed object])">Fetch row as object</s><s f="sybase_fetch_row" u="array sybase_fetch_row(int result)">Get row as enumerated array</s><s f="sybase_field_seek" u="bool sybase_field_seek(int result, int offset)">Set field offset</s><s f="sybase_free_result" u="bool sybase_free_result(int result)">Free result memory</s><s f="sybase_get_last_message" u="string sybase_get_last_message(void)">Returns the last message from server (over min_message_severity)</s><s f="sybase_min_client_severity" u="void sybase_min_client_severity(int severity)">Sets minimum client severity</s><s f="sybase_min_server_severity" u="void sybase_min_server_severity(int severity)">Sets minimum server severity</s><s f="sybase_num_fields" u="int sybase_num_fields(int result)">Get number of fields in result</s><s f="sybase_num_rows" u="int sybase_num_rows(int result)">Get number of rows in result</s><s f="sybase_pconnect" u="int sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])">Open persistent Sybase connection</s><s f="sybase_query" u="int sybase_query(string query [, int link_id])">Send Sybase query</s><s f="sybase_result" u="string sybase_result(int result, int row, mixed field)">Get result data</s><s f="sybase_select_db" u="bool sybase_select_db(string database [, int link_id])">Select Sybase database</s><s f="sybase_set_message_handler" u="bool sybase_set_message_handler(mixed error_func [, resource connection])">Set the error handler, to be called when a server message is raised.      If error_func is NULL the handler will be deleted</s><s f="sybase_unbuffered_query" u="int sybase_unbuffered_query(string query [, int link_id])">Send Sybase query</s><s f="msg_get_queue" u="resource msg_get_queue(int key [, int perms])">Attach to a message queue</s><s f="msg_receive" u="mixed msg_receive(resource queue, int desiredmsgtype, int &amp;msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])">Send a message of type msgtype (must be &gt; 0) to a message queue</s><s f="msg_remove_queue" u="bool msg_remove_queue(resource queue)">Destroy the queue</s><s f="msg_send" u="bool msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])">Send a message of type msgtype (must be &gt; 0) to a message queue</s><s f="msg_set_queue" u="bool msg_set_queue(resource queue, array data)">Set information for a message queue</s><s f="msg_stat_queue" u="array msg_stat_queue(resource queue)">Returns information about a message queue</s><s f="sem_acquire" u="bool sem_acquire(resource id)">Acquires the semaphore with the given id, blocking if necessary</s><s f="sem_get" u="resource sem_get(int key [, int max_acquire [, int perm [, int auto_release]])">Return an id for the semaphore with the given key, and allow max_acquire (default 1) processes to acquire it simultaneously</s><s f="sem_release" u="bool sem_release(resource id)">Releases the semaphore with the given id</s><s f="sem_remove" u="bool sem_remove(resource id)">Removes semaphore from Unix systems</s><s f="shm_attach" u="int shm_attach(int key [, int memsize [, int perm]])">Creates or open a shared memory segment</s><s f="shm_detach" u="bool shm_detach(int shm_identifier)">Disconnects from shared memory segment</s><s f="shm_get_var" u="mixed shm_get_var(int id, int variable_key)">Returns a variable from shared memory</s><s f="shm_put_var" u="bool shm_put_var(int shm_identifier, int variable_key, mixed variable)">Inserts or updates a variable in shared memory</s><s f="shm_remove" u="bool shm_remove(int shm_identifier)">Removes shared memory from Unix systems</s><s f="shm_remove_var" u="bool shm_remove_var(int id, int variable_key)">Removes variable from shared memory</s><s f="tidy_access_count" u="int tidy_access_count()">Returns the Number of Tidy accessibility warnings encountered for specified document.</s><s f="tidy_clean_repair" u="boolean tidy_clean_repair()">Execute configured cleanup and repair operations on parsed markup</s><s f="tidy_config_count" u="int tidy_config_count()">Returns the Number of Tidy configuration errors encountered for specified document.</s><s f="tidy_diagnose" u="boolean tidy_diagnose()">Run configured diagnostics on parsed and repaired markup.</s><s f="tidy_error_count" u="int tidy_error_count()">Returns the Number of Tidy errors encountered for specified document.</s><s f="tidy_get_body" u="TidyNode tidy_get_body(resource tidy)">Returns a TidyNode Object starting from the &lt;BODY&gt; tag of the tidy parse tree</s><s f="tidy_get_config" u="array tidy_get_config()">Get current Tidy configuarion</s><s f="tidy_get_error_buffer" u="string tidy_get_error_buffer([boolean detailed])">Return warnings and errors which occured parsing the specified document</s><s f="tidy_get_head" u="TidyNode tidy_get_head()">Returns a TidyNode Object starting from the &lt;HEAD&gt; tag of the tidy parse tree</s><s f="tidy_get_html" u="TidyNode tidy_get_html()">Returns a TidyNode Object starting from the &lt;HTML&gt; tag of the tidy parse tree</s><s f="tidy_get_html_ver" u="int tidy_get_html_ver()">Get the Detected HTML version for the specified document.</s><s f="tidy_get_output" u="string tidy_get_output()">Return a string representing the parsed tidy markup</s><s f="tidy_get_release" u="string tidy_get_release()">Get release date (version) for Tidy library</s><s f="tidy_get_root" u="TidyNode tidy_get_root()">Returns a TidyNode Object representing the root of the tidy parse tree</s><s f="tidy_get_status" u="int tidy_get_status()">Get status of specfied document.</s><s f="tidy_getopt" u="mixed tidy_getopt(string option)">Returns the value of the specified configuration option for the tidy document.</s><s f="tidy_is_xhtml" u="boolean tidy_is_xhtml()">Indicates if the document is a XHTML document.</s><s f="tidy_is_xhtml" u="boolean tidy_is_xhtml()">Indicates if the document is a generic (non HTML/XHTML) XML document.</s><s f="tidy_parse_file" u="boolean tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])">Parse markup in file or URI</s><s f="tidy_parse_string" u="bool tidy_parse_string(string input [, mixed config_options [, string encoding]])">Parse a document stored in a string</s><s f="tidy_repair_file" u="boolean tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])">Repair a file using an optionally provided configuration file</s><s f="tidy_repair_string" u="boolean tidy_repair_string(string data [, mixed config_file [, string encoding]])">Repair a string using an optionally provided configuration file</s><s f="tidy_warning_count" u="int tidy_warning_count()">Returns the Number of Tidy warnings encountered for specified document.</s><s f="token_get_all" u="array token_get_all(string source)"></s><s f="token_name" u="string token_name(int type)"></s><s f="wddx_add_vars" u="int wddx_add_vars(int packet_id,  mixed var_names [, mixed ...])">Serializes given variables and adds them to packet given by packet_id</s><s f="wddx_deserialize" u="mixed wddx_deserialize(mixed packet)">Deserializes given packet and returns a PHP value</s><s f="wddx_packet_end" u="string wddx_packet_end(int packet_id)">Ends specified WDDX packet and returns the string containing the packet</s><s f="wddx_packet_start" u="int wddx_packet_start([string comment])">Starts a WDDX packet with optional comment and returns the packet id</s><s f="wddx_serialize_value" u="string wddx_serialize_value(mixed var [, string comment])">Creates a new packet and serializes the given value</s><s f="wddx_serialize_vars" u="string wddx_serialize_vars(mixed var_name [, mixed ...])">Creates a new packet and serializes given variables into a struct</s><s f="xml_error_string" u="string xml_error_string(int code)">Get XML parser error string</s><s f="xml_get_current_byte_index" u="int xml_get_current_byte_index(resource parser)">Get current byte index for an XML parser</s><s f="xml_get_current_column_number" u="int xml_get_current_column_number(resource parser)">Get current column number for an XML parser</s><s f="xml_get_current_line_number" u="int xml_get_current_line_number(resource parser)">Get current line number for an XML parser</s><s f="xml_get_error_code" u="int xml_get_error_code(resource parser)">Get XML parser error code</s><s f="xml_parse" u="int xml_parse(resource parser, string data [, int isFinal])">Start parsing an XML document</s><s f="xml_parse_into_struct" u="int xml_parse_into_struct(resource parser, string data, array &amp;struct, array &amp;index)">Parsing a XML document</s><s f="xml_parser_create" u="resource xml_parser_create([string encoding])">Create an XML parser</s><s f="xml_parser_create_ns" u="resource xml_parser_create_ns([string encoding [, string sep]])">Create an XML parser</s><s f="xml_parser_free" u="int xml_parser_free(resource parser)">Free an XML parser</s><s f="xml_parser_get_option" u="int xml_parser_get_option(resource parser, int option)">Get options from an XML parser</s><s f="xml_parser_set_option" u="int xml_parser_set_option(resource parser, int option, mixed value)">Set options in an XML parser</s><s f="xml_set_character_data_handler" u="int xml_set_character_data_handler(resource parser, string hdl)">Set up character data handler</s><s f="xml_set_default_handler" u="int xml_set_default_handler(resource parser, string hdl)">Set up default handler</s><s f="xml_set_element_handler" u="int xml_set_element_handler(resource parser, string shdl, string ehdl)">Set up start and end element handlers</s><s f="xml_set_end_namespace_decl_handler" u="int xml_set_end_namespace_decl_handler(resource parser, string hdl)">Set up character data handler</s><s f="xml_set_external_entity_ref_handler" u="int xml_set_external_entity_ref_handler(resource parser, string hdl)">Set up external entity reference handler</s><s f="xml_set_notation_decl_handler" u="int xml_set_notation_decl_handler(resource parser, string hdl)">Set up notation declaration handler</s><s f="xml_set_object" u="int xml_set_object(resource parser, object &amp;obj)">Set up object which should be used for callbacks</s><s f="xml_set_processing_instruction_handler" u="int xml_set_processing_instruction_handler(resource parser, string hdl)">Set up processing instruction (PI) handler</s><s f="xml_set_start_namespace_decl_handler" u="int xml_set_start_namespace_decl_handler(resource parser, string hdl)">Set up character data handler</s><s f="xml_set_unparsed_entity_decl_handler" u="int xml_set_unparsed_entity_decl_handler(resource parser, string hdl)">Set up unparsed entity declaration handler</s><s f="xmlrpc_decode" u="array xmlrpc_decode(string xml [, string encoding])">Decodes XML into native PHP types</s><s f="xmlrpc_decode_request" u="array xmlrpc_decode_request(string xml, string&amp; method [, string encoding])">Decodes XML into native PHP types</s><s f="xmlrpc_encode" u="string xmlrpc_encode(mixed value)">Generates XML for a PHP value</s><s f="xmlrpc_encode_request" u="string xmlrpc_encode_request(string method, mixed params)">Generates XML for a method request</s><s f="xmlrpc_get_type" u="string xmlrpc_get_type(mixed value)">Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings</s><s f="xmlrpc_is_fault" u="bool xmlrpc_is_fault(array)">Determines if an array value represents an XMLRPC fault.</s><s f="xmlrpc_parse_method_descriptions" u="array xmlrpc_parse_method_descriptions(string xml)">Decodes XML into a list of method descriptions</s><s f="xmlrpc_server_add_introspection_data" u="int xmlrpc_server_add_introspection_data(resource server, array desc)">Adds introspection documentation</s><s f="xmlrpc_server_call_method" u="mixed xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])">Parses XML requests and call methods</s><s f="xmlrpc_server_create" u="resource xmlrpc_server_create(void)">Creates an xmlrpc server</s><s f="xmlrpc_server_destroy" u="int xmlrpc_server_destroy(resource server)">Destroys server resources</s><s f="xmlrpc_server_register_introspection_callback" u="bool xmlrpc_server_register_introspection_callback(resource server, string function)">Register a PHP function to generate documentation</s><s f="xmlrpc_server_register_method" u="bool xmlrpc_server_register_method(resource server, string method_name, string function)">Register a PHP function to handle method matching method_name</s><s f="xmlrpc_set_type" u="bool xmlrpc_set_type(string value, string type)">Sets xmlrpc type, base64 or datetime, for a PHP string value</s><s f="yp_all" u="bool yp_all(string domain, string map, string callback)">Traverse the map and call a function on each entry</s><s f="yp_cat" u="array yp_cat(string domain, string map)">Return an array containing the entire map</s><s f="yp_err_string" u="string yp_err_string(int errorcode)">Returns the corresponding error string for the given error code</s><s f="yp_errno" u="int yp_errno()">Returns the error code from the last call or 0 if no error occured</s><s f="yp_first" u="array yp_first(string domain, string map)">Returns the first key as array with $var[$key] and the the line as the value</s><s f="yp_get_default_domain" u="string yp_get_default_domain(void)">Returns the domain or false</s><s f="yp_master" u="string yp_master(string domain, string map)">Returns the machine name of the master</s><s f="yp_match" u="string yp_match(string domain, string map, string key)">Returns the matched line or false</s><s f="yp_next" u="array yp_next(string domain, string map, string key)">Returns an array with $var[$key] and the the line as the value</s><s f="yp_order" u="int yp_order(string domain, string map)">Returns the order number or false</s><s f="gzcompress" u="string gzcompress(string data [, int level])">Gzip-compress a string</s><s f="gzdeflate" u="string gzdeflate(string data [, int level])">Gzip-compress a string</s><s f="gzencode" u="string gzencode(string data [, int level [, int encoding_mode]])">GZ encode a string</s><s f="gzfile" u="array gzfile(string filename [, int use_include_path])">Read und uncompress entire .gz-file into an array</s><s f="gzinflate" u="string gzinflate(string data [, int length])">Unzip a gzip-compressed string</s><s f="gzopen" u="resource gzopen(string filename, string mode [, int use_include_path])">Open a .gz-file and return a .gz-file pointer</s><s f="gzuncompress" u="string gzuncompress(string data [, int length])">Unzip a gzip-compressed string</s><s f="ob_gzhandler" u="string ob_gzhandler(string str, int mode)">Encode str based on accept-encoding setting - designed to be called from ob_start()</s><s f="readgzfile" u="int readgzfile(string filename [, int use_include_path])">Output a .gz-file</s><s f="zlib_get_coding_type" u="string zlib_get_coding_type(void)">Returns the coding type used for output compression</s><s f="set_time_limit" u="bool set_time_limit(int seconds)">Sets the maximum time a script can run</s><s f="ob_clean" u="bool ob_clean(void)">Clean (delete) the current output buffer</s><s f="ob_end_clean" u="bool ob_end_clean(void)">Clean the output buffer, and delete current output buffer</s><s f="ob_end_flush" u="bool ob_end_flush(void)">Flush (send) the output buffer, and delete current output buffer</s><s f="ob_flush" u="bool ob_flush(void)">Flush (send) contents of the output buffer. The last buffer content is sent to next buffer</s><s f="ob_get_clean" u="bool ob_get_clean(void)">Get current buffer contents and delete current output buffer</s><s f="ob_get_contents" u="string ob_get_contents(void)">Return the contents of the output buffer</s><s f="ob_get_flush" u="bool ob_get_flush(void)">Get current buffer contents, flush (send) the output buffer, and delete current output buffer</s><s f="ob_get_length" u="int ob_get_length(void)">Return the length of the output buffer</s><s f="ob_get_level" u="int ob_get_level(void)">Return the nesting level of the output buffer</s><s f="ob_implicit_flush" u="void ob_implicit_flush([int flag])">Turn implicit flush on/off and is equivalent to calling flush() after every output call</s><s f="ob_start" u="bool ob_start([ string|array user_function [, int chunk_size [, bool erase]]])">Turn on Output Buffering (specifying an optional output handler).</s><s f="output_add_rewrite_var" u="bool output_add_rewrite_var(string name, string value)">Add URL rewriter values</s><s f="output_reset_rewrite_vars" u="bool output_reset_rewrite_vars(void)">Reset(clear) URL rewriter values</s><s f="stream_wrapper_register" u="bool stream_wrapper_register(string protocol, string classname)">Registers a custom URL protocol handler class</s><s f="apache_child_terminate" u="bool apache_child_terminate(void)">Terminate apache process after this request</s><s f="apache_get_modules" u="array apache_get_modules(void)">Get a list of loaded Apache modules</s><s f="apache_get_version" u="string apache_get_version(void)">Fetch Apache version</s><s f="apache_lookup_uri" u="object apache_lookup_uri(string URI)">Perform a partial request of the given URI to obtain information about it</s><s f="apache_note" u="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</s><s f="apache_request_headers" u="array apache_request_headers(void)">Fetch all HTTP request headers</s><s f="apache_response_headers" u="array apache_response_headers(void)">Fetch all HTTP response headers</s><s f="apache_setenv" u="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</s><s f="getallheaders" u="array getallheaders(void)">Alias for apache_request_headers()</s><s f="virtual" u="bool virtual(string filename)">Perform an Apache sub-request</s><s f="apache_get_modules" u="array apache_get_modules(void)">Get a list of loaded Apache modules</s><s f="apache_get_version" u="string apache_get_version(void)">Fetch Apache version</s><s f="apache_getenv" u="bool apache_getenv(string variable [, bool walk_to_top])">Get an Apache subprocess_env variable</s><s f="apache_note" u="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</s><s f="apache_response_headers" u="array apache_response_headers(void)">Fetch all HTTP response headers</s><s f="apache_setenv" u="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</s><s f="getallheaders" u="array getallheaders(void)">Fetch all HTTP request headers</s><s f="virtual" u="bool virtual(string uri)">Perform an apache sub-request</s><s f="apache_get_modules" u="array apache_get_modules(void)">Get a list of loaded Apache modules</s><s f="apache_get_version" u="string apache_get_version(void)">Fetch Apache version</s><s f="apache_getenv" u="bool apache_getenv(string variable [, bool walk_to_top])">Get an Apache subprocess_env variable</s><s f="apache_note" u="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</s><s f="apache_response_headers" u="array apache_response_headers(void)">Fetch all HTTP response headers</s><s f="apache_setenv" u="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</s><s f="getallheaders" u="array getallheaders(void)">Fetch all HTTP request headers</s><s f="virtual" u="bool virtual(string uri)">Perform an apache sub-request</s><s f="apache_child_terminate" u="bool apache_child_terminate(void)">Terminate apache process after this request</s><s f="apache_get_modules" u="array apache_get_modules(void)">Get a list of loaded Apache modules</s><s f="apache_get_version" u="string apache_get_version(void)">Fetch Apache version</s><s f="apache_lookup_uri" u="object apache_lookup_uri(string URI)">Perform a partial request of the given URI to obtain information about it</s><s f="apache_note" u="string apache_note(string note_name [, string note_value])">Get and set Apache request notes</s><s f="apache_request_auth_name" u="string apache_request_auth_name()"></s><s f="apache_request_auth_type" u="string apache_request_auth_type()"></s><s f="apache_request_discard_request_body" u="long apache_request_discard_request_body()"></s><s f="apache_request_err_headers_out" u="array apache_request_err_headers_out([{string name|array list} [, string value [, bool replace = false]]])">* fetch all headers that go out in case of an error or a subrequest</s><s f="apache_request_headers" u="array apache_request_headers(void)">Fetch all HTTP request headers</s><s f="apache_request_headers_in" u="array apache_request_headers_in()">* fetch all incoming request headers</s><s f="apache_request_headers_out" u="array apache_request_headers_out([{string name|array list} [, string value [, bool replace = false]]])">* fetch all outgoing request headers</s><s f="apache_request_is_initial_req" u="bool apache_request_is_initial_req()"></s><s f="apache_request_log_error" u="boolean apache_request_log_error(string message, [long facility])"></s><s f="apache_request_meets_conditions" u="long apache_request_meets_conditions()"></s><s f="apache_request_remote_host" u="int apache_request_remote_host([int type])"></s><s f="apache_request_run" u="long apache_request_run()">This is a wrapper for ap_sub_run_req and ap_destory_sub_req.  It takes       sub_request, runs it, destroys it, and returns it's status.</s><s f="apache_request_satisfies" u="long apache_request_satisfies()"></s><s f="apache_request_server_port" u="int apache_request_server_port()"></s><s f="apache_request_set_etag" u="void apache_request_set_etag()"></s><s f="apache_request_set_last_modified" u="void apache_request_set_last_modified()"></s><s f="apache_request_some_auth_required" u="bool apache_request_some_auth_required()"></s><s f="apache_request_sub_req_lookup_file" u="object apache_request_sub_req_lookup_file(string file)">Returns sub-request for the specified file.  You would      need to run it yourself with run().</s><s f="apache_request_sub_req_lookup_uri" u="object apache_request_sub_req_lookup_uri(string uri)">Returns sub-request for the specified uri.  You would      need to run it yourself with run()</s><s f="apache_request_sub_req_method_uri" u="object apache_request_sub_req_method_uri(string method, string uri)">Returns sub-request for the specified file.  You would      need to run it yourself with run().</s><s f="apache_request_update_mtime" u="long apache_request_update_mtime([int dependency_mtime])"></s><s f="apache_response_headers" u="array apache_response_headers(void)">Fetch all HTTP response headers</s><s f="apache_setenv" u="bool apache_setenv(string variable, string value [, bool walk_to_top])">Set an Apache subprocess_env variable</s><s f="getallheaders" u="array getallheaders(void)"></s><s f="virtual" u="bool virtual(string filename)">Perform an Apache sub-request</s><s f="smfi_addheader" u="string smfi_addheader(string headerf, string headerv)">Adds a header to the current message.</s><s f="smfi_addrcpt" u="string smfi_addrcpt(string rcpt)">Add a recipient to the message envelope.</s><s f="smfi_chgheader" u="string smfi_chgheader(string headerf, string headerv)">Changes a header's value for the current message.</s><s f="smfi_delrcpt" u="string smfi_delrcpt(string rcpt)">Removes the named recipient from the current message's envelope.</s><s f="smfi_getsymval" u="string smfi_getsymval(string macro)">Returns the value of the given macro or NULL if the macro is not defined.</s><s f="smfi_replacebody" u="string smfi_replacebody(string body)">Replaces the body of the current message. If called more than once,     subsequent calls result in data being appended to the new body.</s><s f="smfi_setflags" u="string smfi_setflags(long flags)">Sets the flags describing the actions the filter may take.</s><s f="smfi_setreply" u="string smfi_setreply(string rcode, string xcode, string message)">Directly set the SMTP error reply code for this connection.     This code will be used on subsequent error replies resulting from actions taken by this filter.</s><s f="smfi_settimeout" u="string smfi_settimeout(long timeout)">Sets the number of seconds libmilter will wait for an MTA connection before timing out a socket.</s><s f="nsapi_request_headers" u="array nsapi_request_headers(void)">Get all headers from the request</s><s f="nsapi_response_headers" u="array nsapi_response_headers(void)">Get all headers from the response</s><s f="nsapi_virtual" u="bool nsapi_virtual(string uri)">Perform an NSAPI sub-request</s><s k="if" u="if - "/><s k="elseif" u="elseif - "/><s k="else" u="else - "/><s k="endif" u="endif - "/><s k="for" u="for - "/><s k="endfor" u="endfor - "/><s k="while" u="while - "/><s k="endwhile" u="endwhile - "/><s k="switch" u="switch - "/><s k="case" u="case - "/><s k="endswitch" u="endswitch - "/><s k="break" u="break - "/><s k="continue" u="continue - "/><s k="return" u="return - "/><s k="include" u="include - "/><s k="include_once" u="include_once - "/><s k="require" u="require - "/><s k="require_once" u="require_once - "/><s k="function" u="function - "/><s k="class" u="class - "/><s k="new" u="new - "/><s k="do" u="do - "/><s k="old_function" u="old_function - "/><s k="default" u="default - "/><s k="global" u="global - "/><s k="static" u="static - "/><s k="foreach" u="foreach - "/><s k="endforeach" u="endforeach - "/><s k="extends" u="extends - "/><s k="empty" u="empty - "/><s k="array" u="array - "/><s k="echo" u="echo - "/><s k="var" u="var - "/><s k="as" u="as - "/><s k="print" u="print - "/><s k="unset" u="unset - "/><s k="exit" u="exit - "/><s k="and" u="and - "/><s k="or" u="or - "/><s k="xor" u="xor - "/><s k="list" u="list - "/><s k="null" u="null - "/><s k="false" u="false - "/><s k="true" u="true - "/><s k="AND" u="AND - "/><s k="OR" u="OR - "/><s k="NULL" u="NULL - "/><s k="FALSE" u="FALSE - "/><s k="TRUE" u="TRUE - "/><s k="abstract" u="abstract - "/><s k="catch" u="catch - "/><s k="finally" u="finally - "/><s k="try" u="try - "/><s k="private" u="private - "/><s k="protected" u="protected - "/><s k="public" u="public - "/><s k="interface" u="interface - "/><s k="implements" u="implements - "/><s k="instanceof" u="instanceof - "/><s k="super" u="super - "/><s k="throw" u="throw - "/><s k="clone" u="clone - "/><s k="const" u="const - "/><s k="declare" u="declare - "/><s k="enddeclare" u="enddeclare - "/><s k="eval" u="eval - "/><s k="use" u="use - "/><s k="isset" u="isset - "/><s k="final" u="final - "/><s k="__FUNCTION__" u="__FUNCTION__ - "/><s k="__CLASS__" u="__CLASS__ - "/><s k="__METHOD__" u="__METHOD__ - "/><s k="__FILE__" u="__FILE__ - "/><s k="__LINE__" u="__LINE__ - "/><s k="__FUNCTION__" u="__FUNCTION__ - "/><s k="php_user_filter" u="php_user_filter - "/><s k="cfunction" u="cfunction - "/><s k="old_function" u="old_function - "/><s k="exception" u="exception - "/><s k="die" u="die - "/><s t="string" u="string - "/><s t="unset" u="unset - "/><s t="object" u="object - "/><s t="bool" u="bool - "/><s t="boolean" u="boolean - "/><s t="real" u="real - "/><s t="double" u="double - "/><s t="float" u="float - "/><s t="int" u="int - "/><s t="integer" u="integer - "/><s c="CASE_LOWER" u="CASE_LOWER - "></s><s c="CASE_UPPER" u="CASE_UPPER - "></s><s c="SORT_ASC" u="SORT_ASC - "></s><s c="SORT_DESC" u="SORT_DESC - "></s><s c="SORT_REGULAR" u="SORT_REGULAR - "></s><s c="SORT_NUMERIC" u="SORT_NUMERIC - "></s><s c="SORT_STRING" u="SORT_STRING - "></s><s c="COUNT_NORMAL" u="COUNT_NORMAL - "></s><s c="COUNT_RECURSIVE" u="COUNT_RECURSIVE - "></s><s c="EXTR_OVERWRITE" u="EXTR_OVERWRITE - "></s><s c="EXTR_SKIP" u="EXTR_SKIP - "></s><s c="EXTR_PREFIX_SAME" u="EXTR_PREFIX_SAME - "></s><s c="EXTR_PREFIX_ALL" u="EXTR_PREFIX_ALL - "></s><s c="EXTR_PREFIX_INVALID" u="EXTR_PREFIX_INVALID - "></s><s c="EXTR_PREFIX_IF_EXISTS" u="EXTR_PREFIX_IF_EXISTS - "></s><s c="EXTR_IF_EXISTS" u="EXTR_IF_EXISTS - "></s><s c="EXTR_REFS" u="EXTR_REFS - "></s><s c="CAL_GREGORIAN" u="CAL_GREGORIAN - "></s><s c="CAL_JULIAN" u="CAL_JULIAN - "></s><s c="CAL_JEWISH" u="CAL_JEWISH - "></s><s c="CAL_FRENCH" u="CAL_FRENCH - "></s><s c="CAL_NUM_CALS" u="CAL_NUM_CALS - "></s><s c="CAL_DOW_DAYNO" u="CAL_DOW_DAYNO - "></s><s c="CAL_DOW_SHORT" u="CAL_DOW_SHORT - "></s><s c="CAL_DOW_LONG" u="CAL_DOW_LONG - "></s><s c="CAL_MONTH_GREGORIAN_SHORT" u="CAL_MONTH_GREGORIAN_SHORT - "></s><s c="CAL_MONTH_GREGORIAN_LONG" u="CAL_MONTH_GREGORIAN_LONG - "></s><s c="CAL_MONTH_JULIAN_SHORT" u="CAL_MONTH_JULIAN_SHORT - "></s><s c="CAL_MONTH_JULIAN_LONG" u="CAL_MONTH_JULIAN_LONG - "></s><s c="CAL_MONTH_JEWISH" u="CAL_MONTH_JEWISH - "></s><s c="CAL_MONTH_FRENCH" u="CAL_MONTH_FRENCH - "></s><s c="CAL_EASTER_DEFAULT" u="CAL_EASTER_DEFAULT - "></s><s c="CAL_EASTER_ROMAN" u="CAL_EASTER_ROMAN - "></s><s c="CAL_EASTER_ALWAYS_GREGORIAN" u="CAL_EASTER_ALWAYS_GREGORIAN - "></s><s c="CAL_EASTER_ALWAYS_JULIAN" u="CAL_EASTER_ALWAYS_JULIAN - "></s><s c="CAL_JEWISH_ADD_ALAFIM_GERESH" u="CAL_JEWISH_ADD_ALAFIM_GERESH - "></s><s c="CAL_JEWISH_ADD_ALAFIM" u="CAL_JEWISH_ADD_ALAFIM - "></s><s c="CAL_JEWISH_ADD_GERESHAYIM" u="CAL_JEWISH_ADD_GERESHAYIM - "></s><s c="CLSCTX_INPROC_SERVER" u="CLSCTX_INPROC_SERVER - "></s><s c="CLSCTX_INPROC_HANDLER" u="CLSCTX_INPROC_HANDLER - "></s><s c="CLSCTX_LOCAL_SERVER" u="CLSCTX_LOCAL_SERVER - "></s><s c="CLSCTX_REMOTE_SERVER" u="CLSCTX_REMOTE_SERVER - "></s><s c="CLSCTX_SERVER" u="CLSCTX_SERVER - "></s><s c="CLSCTX_ALL" u="CLSCTX_ALL - "></s><s c="VT_NULL" u="VT_NULL - "></s><s c="VT_EMPTY" u="VT_EMPTY - "></s><s c="VT_UI1" u="VT_UI1 - "></s><s c="VT_I2" u="VT_I2 - "></s><s c="VT_I4" u="VT_I4 - "></s><s c="VT_R4" u="VT_R4 - "></s><s c="VT_R8" u="VT_R8 - "></s><s c="VT_BOOL" u="VT_BOOL - "></s><s c="VT_ERROR" u="VT_ERROR - "></s><s c="VT_CY" u="VT_CY - "></s><s c="VT_DATE" u="VT_DATE - "></s><s c="VT_BSTR" u="VT_BSTR - "></s><s c="VT_DECIMAL" u="VT_DECIMAL - "></s><s c="VT_UNKNOWN" u="VT_UNKNOWN - "></s><s c="VT_DISPATCH" u="VT_DISPATCH - "></s><s c="VT_VARIANT" u="VT_VARIANT - "></s><s c="VT_I1" u="VT_I1 - "></s><s c="VT_UI2" u="VT_UI2 - "></s><s c="VT_UI4" u="VT_UI4 - "></s><s c="VT_INT" u="VT_INT - "></s><s c="VT_UINT" u="VT_UINT - "></s><s c="VT_ARRAY" u="VT_ARRAY - "></s><s c="VT_BYREF" u="VT_BYREF - "></s><s c="CP_ACP" u="CP_ACP - "></s><s c="CP_MACCP" u="CP_MACCP - "></s><s c="CP_OEMCP" u="CP_OEMCP - "></s><s c="CP_UTF7" u="CP_UTF7 - "></s><s c="CP_UTF8" u="CP_UTF8 - "></s><s c="CP_SYMBOL" u="CP_SYMBOL - "></s><s c="CP_THREAD_ACP" u="CP_THREAD_ACP - "></s><s c="VARCMP_LT" u="VARCMP_LT - "></s><s c="VARCMP_EQ" u="VARCMP_EQ - "></s><s c="VARCMP_GT" u="VARCMP_GT - "></s><s c="VARCMP_NULL" u="VARCMP_NULL - "></s><s c="NORM_IGNORECASE" u="NORM_IGNORECASE - "></s><s c="NORM_IGNORENONSPACE" u="NORM_IGNORENONSPACE - "></s><s c="NORM_IGNORESYMBOLS" u="NORM_IGNORESYMBOLS - "></s><s c="NORM_IGNOREWIDTH" u="NORM_IGNOREWIDTH - "></s><s c="NORM_IGNOREKANATYPE" u="NORM_IGNOREKANATYPE - "></s><s c="NORM_IGNOREKASHIDA" u="NORM_IGNOREKASHIDA - "></s><s c="DISP_E_DIVBYZERO" u="DISP_E_DIVBYZERO - "></s><s c="DISP_E_OVERFLOW" u="DISP_E_OVERFLOW - "></s><s c="MK_E_UNAVAILABLE" u="MK_E_UNAVAILABLE - "></s><s c="CPDF_PM_NONE" u="CPDF_PM_NONE - "></s><s c="CPDF_PM_OUTLINES" u="CPDF_PM_OUTLINES - "></s><s c="CPDF_PM_THUMBS" u="CPDF_PM_THUMBS - "></s><s c="CPDF_PM_FULLSCREEN" u="CPDF_PM_FULLSCREEN - "></s><s c="CPDF_PL_SINGLE" u="CPDF_PL_SINGLE - "></s><s c="CPDF_PL_1COLUMN" u="CPDF_PL_1COLUMN - "></s><s c="CPDF_PL_2LCOLUMN" u="CPDF_PL_2LCOLUMN - "></s><s c="CPDF_PL_2RCOLUMN" u="CPDF_PL_2RCOLUMN - "></s><s c="CURLOPT_PORT" u="CURLOPT_PORT - "></s><s c="CURLOPT_FILE" u="CURLOPT_FILE - "></s><s c="CURLOPT_INFILE" u="CURLOPT_INFILE - "></s><s c="CURLOPT_INFILESIZE" u="CURLOPT_INFILESIZE - "></s><s c="CURLOPT_URL" u="CURLOPT_URL - "></s><s c="CURLOPT_PROXY" u="CURLOPT_PROXY - "></s><s c="CURLOPT_VERBOSE" u="CURLOPT_VERBOSE - "></s><s c="CURLOPT_HEADER" u="CURLOPT_HEADER - "></s><s c="CURLOPT_HTTPHEADER" u="CURLOPT_HTTPHEADER - "></s><s c="CURLOPT_NOPROGRESS" u="CURLOPT_NOPROGRESS - "></s><s c="CURLOPT_NOBODY" u="CURLOPT_NOBODY - "></s><s c="CURLOPT_FAILONERROR" u="CURLOPT_FAILONERROR - "></s><s c="CURLOPT_UPLOAD" u="CURLOPT_UPLOAD - "></s><s c="CURLOPT_POST" u="CURLOPT_POST - "></s><s c="CURLOPT_FTPLISTONLY" u="CURLOPT_FTPLISTONLY - "></s><s c="CURLOPT_FTPAPPEND" u="CURLOPT_FTPAPPEND - "></s><s c="CURLOPT_NETRC" u="CURLOPT_NETRC - "></s><s c="CURLOPT_FOLLOWLOCATION" u="CURLOPT_FOLLOWLOCATION - "></s><s c="CURLOPT_FTPASCII" u="CURLOPT_FTPASCII - "></s><s c="CURLOPT_PUT" u="CURLOPT_PUT - "></s><s c="CURLOPT_MUTE" u="CURLOPT_MUTE - "></s><s c="CURLOPT_USERPWD" u="CURLOPT_USERPWD - "></s><s c="CURLOPT_PROXYUSERPWD" u="CURLOPT_PROXYUSERPWD - "></s><s c="CURLOPT_RANGE" u="CURLOPT_RANGE - "></s><s c="CURLOPT_TIMEOUT" u="CURLOPT_TIMEOUT - "></s><s c="CURLOPT_POSTFIELDS" u="CURLOPT_POSTFIELDS - "></s><s c="CURLOPT_REFERER" u="CURLOPT_REFERER - "></s><s c="CURLOPT_USERAGENT" u="CURLOPT_USERAGENT - "></s><s c="CURLOPT_FTPPORT" u="CURLOPT_FTPPORT - "></s><s c="CURLOPT_LOW_SPEED_LIMIT" u="CURLOPT_LOW_SPEED_LIMIT - "></s><s c="CURLOPT_LOW_SPEED_TIME" u="CURLOPT_LOW_SPEED_TIME - "></s><s c="CURLOPT_RESUME_FROM" u="CURLOPT_RESUME_FROM - "></s><s c="CURLOPT_COOKIE" u="CURLOPT_COOKIE - "></s><s c="CURLOPT_SSLCERT" u="CURLOPT_SSLCERT - "></s><s c="CURLOPT_SSLCERTPASSWD" u="CURLOPT_SSLCERTPASSWD - "></s><s c="CURLOPT_WRITEHEADER" u="CURLOPT_WRITEHEADER - "></s><s c="CURLOPT_SSL_VERIFYHOST" u="CURLOPT_SSL_VERIFYHOST - "></s><s c="CURLOPT_COOKIEFILE" u="CURLOPT_COOKIEFILE - "></s><s c="CURLOPT_SSLVERSION" u="CURLOPT_SSLVERSION - "></s><s c="CURLOPT_TIMECONDITION" u="CURLOPT_TIMECONDITION - "></s><s c="CURLOPT_TIMEVALUE" u="CURLOPT_TIMEVALUE - "></s><s c="CURLOPT_CUSTOMREQUEST" u="CURLOPT_CUSTOMREQUEST - "></s><s c="CURLOPT_STDERR" u="CURLOPT_STDERR - "></s><s c="CURLOPT_TRANSFERTEXT" u="CURLOPT_TRANSFERTEXT - "></s><s c="CURLOPT_RETURNTRANSFER" u="CURLOPT_RETURNTRANSFER - "></s><s c="CURLOPT_QUOTE" u="CURLOPT_QUOTE - "></s><s c="CURLOPT_POSTQUOTE" u="CURLOPT_POSTQUOTE - "></s><s c="CURLOPT_INTERFACE" u="CURLOPT_INTERFACE - "></s><s c="CURLOPT_KRB4LEVEL" u="CURLOPT_KRB4LEVEL - "></s><s c="CURLOPT_HTTPPROXYTUNNEL" u="CURLOPT_HTTPPROXYTUNNEL - "></s><s c="CURLOPT_FILETIME" u="CURLOPT_FILETIME - "></s><s c="CURLOPT_WRITEFUNCTION" u="CURLOPT_WRITEFUNCTION - "></s><s c="CURLOPT_READFUNCTION" u="CURLOPT_READFUNCTION - "></s><s c="CURLOPT_PASSWDFUNCTION" u="CURLOPT_PASSWDFUNCTION - "></s><s c="CURLOPT_HEADERFUNCTION" u="CURLOPT_HEADERFUNCTION - "></s><s c="CURLOPT_MAXREDIRS" u="CURLOPT_MAXREDIRS - "></s><s c="CURLOPT_MAXCONNECTS" u="CURLOPT_MAXCONNECTS - "></s><s c="CURLOPT_CLOSEPOLICY" u="CURLOPT_CLOSEPOLICY - "></s><s c="CURLOPT_FRESH_CONNECT" u="CURLOPT_FRESH_CONNECT - "></s><s c="CURLOPT_FORBID_REUSE" u="CURLOPT_FORBID_REUSE - "></s><s c="CURLOPT_RANDOM_FILE" u="CURLOPT_RANDOM_FILE - "></s><s c="CURLOPT_EGDSOCKET" u="CURLOPT_EGDSOCKET - "></s><s c="CURLOPT_CONNECTTIMEOUT" u="CURLOPT_CONNECTTIMEOUT - "></s><s c="CURLOPT_SSL_VERIFYPEER" u="CURLOPT_SSL_VERIFYPEER - "></s><s c="CURLOPT_CAINFO" u="CURLOPT_CAINFO - "></s><s c="CURLOPT_COOKIEJAR" u="CURLOPT_COOKIEJAR - "></s><s c="CURLOPT_SSL_CIPHER_LIST" u="CURLOPT_SSL_CIPHER_LIST - "></s><s c="CURLOPT_BINARYTRANSFER" u="CURLOPT_BINARYTRANSFER - "></s><s c="CURLCLOSEPOLICY_LEAST_RECENTLY_USED" u="CURLCLOSEPOLICY_LEAST_RECENTLY_USED - "></s><s c="CURLCLOSEPOLICY_LEAST_TRAFFIC" u="CURLCLOSEPOLICY_LEAST_TRAFFIC - "></s><s c="CURLCLOSEPOLICY_SLOWEST" u="CURLCLOSEPOLICY_SLOWEST - "></s><s c="CURLCLOSEPOLICY_CALLBACK" u="CURLCLOSEPOLICY_CALLBACK - "></s><s c="CURLCLOSEPOLICY_OLDEST" u="CURLCLOSEPOLICY_OLDEST - "></s><s c="CURLINFO_EFFECTIVE_URL" u="CURLINFO_EFFECTIVE_URL - "></s><s c="CURLINFO_HTTP_CODE" u="CURLINFO_HTTP_CODE - "></s><s c="CURLINFO_HEADER_SIZE" u="CURLINFO_HEADER_SIZE - "></s><s c="CURLINFO_REQUEST_SIZE" u="CURLINFO_REQUEST_SIZE - "></s><s c="CURLINFO_TOTAL_TIME" u="CURLINFO_TOTAL_TIME - "></s><s c="CURLINFO_NAMELOOKUP_TIME" u="CURLINFO_NAMELOOKUP_TIME - "></s><s c="CURLINFO_CONNECT_TIME" u="CURLINFO_CONNECT_TIME - "></s><s c="CURLINFO_PRETRANSFER_TIME" u="CURLINFO_PRETRANSFER_TIME - "></s><s c="CURLINFO_SIZE_UPLOAD" u="CURLINFO_SIZE_UPLOAD - "></s><s c="CURLINFO_SIZE_DOWNLOAD" u="CURLINFO_SIZE_DOWNLOAD - "></s><s c="CURLINFO_SPEED_DOWNLOAD" u="CURLINFO_SPEED_DOWNLOAD - "></s><s c="CURLINFO_SPEED_UPLOAD" u="CURLINFO_SPEED_UPLOAD - "></s><s c="CURLINFO_FILETIME" u="CURLINFO_FILETIME - "></s><s c="CURLINFO_SSL_VERIFYRESULT" u="CURLINFO_SSL_VERIFYRESULT - "></s><s c="CURLINFO_CONTENT_LENGTH_DOWNLOAD" u="CURLINFO_CONTENT_LENGTH_DOWNLOAD - "></s><s c="CURLINFO_CONTENT_LENGTH_UPLOAD" u="CURLINFO_CONTENT_LENGTH_UPLOAD - "></s><s c="CURLE_OK" u="CURLE_OK - "></s><s c="CURLE_UNSUPPORTED_PROTOCOL" u="CURLE_UNSUPPORTED_PROTOCOL - "></s><s c="CURLE_FAILED_INIT" u="CURLE_FAILED_INIT - "></s><s c="CURLE_URL_MALFORMAT" u="CURLE_URL_MALFORMAT - "></s><s c="CURLE_URL_MALFORMAT_USER" u="CURLE_URL_MALFORMAT_USER - "></s><s c="CURLE_COULDNT_RESOLVE_PROXY" u="CURLE_COULDNT_RESOLVE_PROXY - "></s><s c="CURLE_COULDNT_RESOLVE_HOST" u="CURLE_COULDNT_RESOLVE_HOST - "></s><s c="CURLE_COULDNT_CONNECT" u="CURLE_COULDNT_CONNECT - "></s><s c="CURLE_FTP_WEIRD_SERVER_REPLY" u="CURLE_FTP_WEIRD_SERVER_REPLY - "></s><s c="CURLE_FTP_ACCESS_DENIED" u="CURLE_FTP_ACCESS_DENIED - "></s><s c="CURLE_FTP_USER_PASSWORD_INCORRECT" u="CURLE_FTP_USER_PASSWORD_INCORRECT - "></s><s c="CURLE_FTP_WEIRD_PASS_REPLY" u="CURLE_FTP_WEIRD_PASS_REPLY - "></s><s c="CURLE_FTP_WEIRD_USER_REPLY" u="CURLE_FTP_WEIRD_USER_REPLY - "></s><s c="CURLE_FTP_WEIRD_PASV_REPLY" u="CURLE_FTP_WEIRD_PASV_REPLY - "></s><s c="CURLE_FTP_WEIRD_227_FORMAT" u="CURLE_FTP_WEIRD_227_FORMAT - "></s><s c="CURLE_FTP_CANT_GET_HOST" u="CURLE_FTP_CANT_GET_HOST - "></s><s c="CURLE_FTP_CANT_RECONNECT" u="CURLE_FTP_CANT_RECONNECT - "></s><s c="CURLE_FTP_COULDNT_SET_BINARY" u="CURLE_FTP_COULDNT_SET_BINARY - "></s><s c="CURLE_PARTIAL_FILE" u="CURLE_PARTIAL_FILE - "></s><s c="CURLE_FTP_COULDNT_RETR_FILE" u="CURLE_FTP_COULDNT_RETR_FILE - "></s><s c="CURLE_FTP_WRITE_ERROR" u="CURLE_FTP_WRITE_ERROR - "></s><s c="CURLE_FTP_QUOTE_ERROR" u="CURLE_FTP_QUOTE_ERROR - "></s><s c="CURLE_HTTP_NOT_FOUND" u="CURLE_HTTP_NOT_FOUND - "></s><s c="CURLE_WRITE_ERROR" u="CURLE_WRITE_ERROR - "></s><s c="CURLE_MALFORMAT_USER" u="CURLE_MALFORMAT_USER - "></s><s c="CURLE_FTP_COULDNT_STOR_FILE" u="CURLE_FTP_COULDNT_STOR_FILE - "></s><s c="CURLE_READ_ERROR" u="CURLE_READ_ERROR - "></s><s c="CURLE_OUT_OF_MEMORY" u="CURLE_OUT_OF_MEMORY - "></s><s c="CURLE_OPERATION_TIMEOUTED" u="CURLE_OPERATION_TIMEOUTED - "></s><s c="CURLE_FTP_COULDNT_SET_ASCII" u="CURLE_FTP_COULDNT_SET_ASCII - "></s><s c="CURLE_FTP_PORT_FAILED" u="CURLE_FTP_PORT_FAILED - "></s><s c="CURLE_FTP_COULDNT_USE_REST" u="CURLE_FTP_COULDNT_USE_REST - "></s><s c="CURLE_FTP_COULDNT_GET_SIZE" u="CURLE_FTP_COULDNT_GET_SIZE - "></s><s c="CURLE_HTTP_RANGE_ERROR" u="CURLE_HTTP_RANGE_ERROR - "></s><s c="CURLE_HTTP_POST_ERROR" u="CURLE_HTTP_POST_ERROR - "></s><s c="CURLE_SSL_CONNECT_ERROR" u="CURLE_SSL_CONNECT_ERROR - "></s><s c="CURLE_FTP_BAD_DOWNLOAD_RESUME" u="CURLE_FTP_BAD_DOWNLOAD_RESUME - "></s><s c="CURLE_FILE_COULDNT_READ_FILE" u="CURLE_FILE_COULDNT_READ_FILE - "></s><s c="CURLE_LDAP_CANNOT_BIND" u="CURLE_LDAP_CANNOT_BIND - "></s><s c="CURLE_LDAP_SEARCH_FAILED" u="CURLE_LDAP_SEARCH_FAILED - "></s><s c="CURLE_LIBRARY_NOT_FOUND" u="CURLE_LIBRARY_NOT_FOUND - "></s><s c="CURLE_FUNCTION_NOT_FOUND" u="CURLE_FUNCTION_NOT_FOUND - "></s><s c="CURLE_ABORTED_BY_CALLBACK" u="CURLE_ABORTED_BY_CALLBACK - "></s><s c="CURLE_BAD_FUNCTION_ARGUMENT" u="CURLE_BAD_FUNCTION_ARGUMENT - "></s><s c="CURLE_BAD_CALLING_ORDER" u="CURLE_BAD_CALLING_ORDER - "></s><s c="CURLE_HTTP_PORT_FAILED" u="CURLE_HTTP_PORT_FAILED - "></s><s c="CURLE_BAD_PASSWORD_ENTERED" u="CURLE_BAD_PASSWORD_ENTERED - "></s><s c="CURLE_TOO_MANY_REDIRECTS" u="CURLE_TOO_MANY_REDIRECTS - "></s><s c="CURLE_UNKNOWN_TELNET_OPTION" u="CURLE_UNKNOWN_TELNET_OPTION - "></s><s c="CURLE_TELNET_OPTION_SYNTAX" u="CURLE_TELNET_OPTION_SYNTAX - "></s><s c="CURLE_OBSOLETE" u="CURLE_OBSOLETE - "></s><s c="CURLE_SSL_PEER_CERTIFICATE" u="CURLE_SSL_PEER_CERTIFICATE - "></s><s c="CYRUS_CONN_NONSYNCLITERAL" u="CYRUS_CONN_NONSYNCLITERAL - "></s><s c="CYRUS_CONN_INITIALRESPONSE" u="CYRUS_CONN_INITIALRESPONSE - "></s><s c="CYRUS_CALLBACK_NUMBERED" u="CYRUS_CALLBACK_NUMBERED - "></s><s c="CYRUS_CALLBACK_NOLITERAL" u="CYRUS_CALLBACK_NOLITERAL - "></s><s c="DBPLUS_ERR_NOERR" u="DBPLUS_ERR_NOERR - ">ERR_NOERR</s><s c="DBPLUS_ERR_DUPLICATE" u="DBPLUS_ERR_DUPLICATE - ">ERR_DUPLICATE</s><s c="DBPLUS_ERR_EOSCAN" u="DBPLUS_ERR_EOSCAN - ">ERR_EOSCAN</s><s c="DBPLUS_ERR_EMPTY" u="DBPLUS_ERR_EMPTY - ">ERR_EMPTY</s><s c="DBPLUS_ERR_CLOSE" u="DBPLUS_ERR_CLOSE - ">ERR_CLOSE</s><s c="DBPLUS_ERR_WLOCKED" u="DBPLUS_ERR_WLOCKED - ">ERR_WLOCKED</s><s c="DBPLUS_ERR_LOCKED" u="DBPLUS_ERR_LOCKED - ">ERR_LOCKED</s><s c="DBPLUS_ERR_NOLOCK" u="DBPLUS_ERR_NOLOCK - ">ERR_NOLOCK</s><s c="DBPLUS_ERR_READ" u="DBPLUS_ERR_READ - ">ERR_READ</s><s c="DBPLUS_ERR_WRITE" u="DBPLUS_ERR_WRITE - ">ERR_WRITE</s><s c="DBPLUS_ERR_CREATE" u="DBPLUS_ERR_CREATE - ">ERR_CREATE</s><s c="DBPLUS_ERR_LSEEK" u="DBPLUS_ERR_LSEEK - ">ERR_LSEEK</s><s c="DBPLUS_ERR_LENGTH" u="DBPLUS_ERR_LENGTH - ">ERR_LENGTH</s><s c="DBPLUS_ERR_OPEN" u="DBPLUS_ERR_OPEN - ">ERR_OPEN</s><s c="DBPLUS_ERR_WOPEN" u="DBPLUS_ERR_WOPEN - ">ERR_WOPEN</s><s c="DBPLUS_ERR_MAGIC" u="DBPLUS_ERR_MAGIC - ">ERR_MAGIC</s><s c="DBPLUS_ERR_VERSION" u="DBPLUS_ERR_VERSION - ">ERR_VERSION</s><s c="DBPLUS_ERR_PGSIZE" u="DBPLUS_ERR_PGSIZE - ">ERR_PGSIZE</s><s c="DBPLUS_ERR_CRC" u="DBPLUS_ERR_CRC - ">ERR_CRC</s><s c="DBPLUS_ERR_PIPE" u="DBPLUS_ERR_PIPE - ">ERR_PIPE</s><s c="DBPLUS_ERR_NIDX" u="DBPLUS_ERR_NIDX - ">ERR_NIDX</s><s c="DBPLUS_ERR_MALLOC" u="DBPLUS_ERR_MALLOC - ">ERR_MALLOC</s><s c="DBPLUS_ERR_NUSERS" u="DBPLUS_ERR_NUSERS - ">ERR_NUSERS</s><s c="DBPLUS_ERR_PREEXIT" u="DBPLUS_ERR_PREEXIT - ">ERR_PREEXIT</s><s c="DBPLUS_ERR_ONTRAP" u="DBPLUS_ERR_ONTRAP - ">ERR_ONTRAP</s><s c="DBPLUS_ERR_PREPROC" u="DBPLUS_ERR_PREPROC - ">ERR_PREPROC</s><s c="DBPLUS_ERR_DBPARSE" u="DBPLUS_ERR_DBPARSE - ">ERR_DBPARSE</s><s c="DBPLUS_ERR_DBRUNERR" u="DBPLUS_ERR_DBRUNERR - ">ERR_DBRUNERR</s><s c="DBPLUS_ERR_DBPREEXIT" u="DBPLUS_ERR_DBPREEXIT - ">ERR_DBPREEXIT</s><s c="DBPLUS_ERR_WAIT" u="DBPLUS_ERR_WAIT - ">ERR_WAIT</s><s c="DBPLUS_ERR_CORRUPT_TUPLE" u="DBPLUS_ERR_CORRUPT_TUPLE - ">ERR_CORRUPT_TUPLE</s><s c="DBPLUS_ERR_WARNING0" u="DBPLUS_ERR_WARNING0 - ">ERR_WARNING0</s><s c="DBPLUS_ERR_PANIC" u="DBPLUS_ERR_PANIC - ">ERR_PANIC</s><s c="DBPLUS_ERR_FIFO" u="DBPLUS_ERR_FIFO - ">ERR_FIFO</s><s c="DBPLUS_ERR_PERM" u="DBPLUS_ERR_PERM - ">ERR_PERM</s><s c="DBPLUS_ERR_TCL" u="DBPLUS_ERR_TCL - ">ERR_TCL</s><s c="DBPLUS_ERR_RESTRICTED" u="DBPLUS_ERR_RESTRICTED - ">ERR_RESTRICTED</s><s c="DBPLUS_ERR_USER" u="DBPLUS_ERR_USER - ">ERR_USER</s><s c="DBPLUS_ERR_UNKNOWN" u="DBPLUS_ERR_UNKNOWN - ">ERR_UNKNOWN</s><s c="DBX_MYSQL" u="DBX_MYSQL - "></s><s c="DBX_ODBC" u="DBX_ODBC - "></s><s c="DBX_PGSQL" u="DBX_PGSQL - "></s><s c="DBX_MSSQL" u="DBX_MSSQL - "></s><s c="DBX_FBSQL" u="DBX_FBSQL - "></s><s c="DBX_OCI8" u="DBX_OCI8 - "></s><s c="DBX_SYBASECT" u="DBX_SYBASECT - "></s><s c="DBX_SQLITE" u="DBX_SQLITE - "></s><s c="DBX_PERSISTENT" u="DBX_PERSISTENT - "></s><s c="DBX_RESULT_INFO" u="DBX_RESULT_INFO - "></s><s c="DBX_RESULT_INDEX" u="DBX_RESULT_INDEX - "></s><s c="DBX_RESULT_ASSOC" u="DBX_RESULT_ASSOC - "></s><s c="DBX_RESULT_UNBUFFERED" u="DBX_RESULT_UNBUFFERED - "></s><s c="DBX_COLNAMES_UNCHANGED" u="DBX_COLNAMES_UNCHANGED - "></s><s c="DBX_COLNAMES_UPPERCASE" u="DBX_COLNAMES_UPPERCASE - "></s><s c="DBX_COLNAMES_LOWERCASE" u="DBX_COLNAMES_LOWERCASE - "></s><s c="DBX_CMP_NATIVE" u="DBX_CMP_NATIVE - "></s><s c="DBX_CMP_TEXT" u="DBX_CMP_TEXT - "></s><s c="DBX_CMP_NUMBER" u="DBX_CMP_NUMBER - "></s><s c="DBX_CMP_ASC" u="DBX_CMP_ASC - "></s><s c="DBX_CMP_DESC" u="DBX_CMP_DESC - "></s><s c="DIRECTORY_SEPARATOR" u="DIRECTORY_SEPARATOR - "></s><s c="PATH_SEPARATOR" u="PATH_SEPARATOR - "></s><s c="XML_ELEMENT_NODE" u="XML_ELEMENT_NODE - ">1</s><s c="XML_ATTRIBUTE_NODE" u="XML_ATTRIBUTE_NODE - ">2</s><s c="XML_TEXT_NODE" u="XML_TEXT_NODE - ">3</s><s c="XML_CDATA_SECTION_NODE" u="XML_CDATA_SECTION_NODE - ">4</s><s c="XML_ENTITY_REF_NODE" u="XML_ENTITY_REF_NODE - ">5</s><s c="XML_ENTITY_NODE" u="XML_ENTITY_NODE - ">6</s><s c="XML_PI_NODE" u="XML_PI_NODE - ">7</s><s c="XML_COMMENT_NODE" u="XML_COMMENT_NODE - ">8</s><s c="XML_DOCUMENT_NODE" u="XML_DOCUMENT_NODE - ">9</s><s c="XML_DOCUMENT_TYPE_NODE" u="XML_DOCUMENT_TYPE_NODE - ">10</s><s c="XML_DOCUMENT_FRAG_NODE" u="XML_DOCUMENT_FRAG_NODE - ">11</s><s c="XML_NOTATION_NODE" u="XML_NOTATION_NODE - ">12</s><s c="XML_HTML_DOCUMENT_NODE" u="XML_HTML_DOCUMENT_NODE - ">13</s><s c="XML_DTD_NODE" u="XML_DTD_NODE - ">14</s><s c="XML_ELEMENT_DECL_NODE" u="XML_ELEMENT_DECL_NODE - ">15</s><s c="XML_ATTRIBUTE_DECL_NODE" u="XML_ATTRIBUTE_DECL_NODE - ">16</s><s c="XML_ENTITY_DECL_NODE" u="XML_ENTITY_DECL_NODE - ">17</s><s c="XML_NAMESPACE_DECL_NODE" u="XML_NAMESPACE_DECL_NODE - ">18</s><s c="XML_ATTRIBUTE_CDATA" u="XML_ATTRIBUTE_CDATA - ">1</s><s c="XML_ATTRIBUTE_ID" u="XML_ATTRIBUTE_ID - ">2</s><s c="XML_ATTRIBUTE_IDREF" u="XML_ATTRIBUTE_IDREF - ">3</s><s c="XML_ATTRIBUTE_IDREFS" u="XML_ATTRIBUTE_IDREFS - ">4</s><s c="XML_ATTRIBUTE_ENTITY" u="XML_ATTRIBUTE_ENTITY - ">5</s><s c="XML_ATTRIBUTE_NMTOKEN" u="XML_ATTRIBUTE_NMTOKEN - ">7</s><s c="XML_ATTRIBUTE_NMTOKENS" u="XML_ATTRIBUTE_NMTOKENS - ">8</s><s c="XML_ATTRIBUTE_ENUMERATION" u="XML_ATTRIBUTE_ENUMERATION - ">9</s><s c="XML_ATTRIBUTE_NOTATION" u="XML_ATTRIBUTE_NOTATION - ">10</s><s c="DOM_INDEX_SIZE_ERR" u="DOM_INDEX_SIZE_ERR - ">1</s><s c="DOMSTRING_SIZE_ERR" u="DOMSTRING_SIZE_ERR - ">2</s><s c="DOM_HIERARCHY_REQUEST_ERR" u="DOM_HIERARCHY_REQUEST_ERR - ">3</s><s c="DOM_WRONG_DOCUMENT_ERR" u="DOM_WRONG_DOCUMENT_ERR - ">4</s><s c="DOM_INVALID_CHARACTER_ERR" u="DOM_INVALID_CHARACTER_ERR - ">5</s><s c="DOM_NO_DATA_ALLOWED_ERR" u="DOM_NO_DATA_ALLOWED_ERR - ">6</s><s c="DOM_NO_MODIFICATION_ALLOWED_ERR" u="DOM_NO_MODIFICATION_ALLOWED_ERR - ">7</s><s c="DOM_NOT_FOUND_ERR" u="DOM_NOT_FOUND_ERR - ">8</s><s c="DOM_NOT_SUPPORTED_ERR" u="DOM_NOT_SUPPORTED_ERR - ">9</s><s c="DOM_INUSE_ATTRIBUTE_ERR" u="DOM_INUSE_ATTRIBUTE_ERR - ">10</s><s c="DOM_INVALID_STATE_ERR" u="DOM_INVALID_STATE_ERR - ">11</s><s c="DOM_SYNTAX_ERR" u="DOM_SYNTAX_ERR - ">12</s><s c="DOM_INVALID_MODIFICATION_ERR" u="DOM_INVALID_MODIFICATION_ERR - ">13</s><s c="DOM_NAMESPACE_ERR" u="DOM_NAMESPACE_ERR - ">14</s><s c="DOM_INVALID_ACCESS_ERR" u="DOM_INVALID_ACCESS_ERR - ">15</s><s c="DOM_VALIDATION_ERR" u="DOM_VALIDATION_ERR - ">16</s><s c="XML_ELEMENT_NODE" u="XML_ELEMENT_NODE - ">1</s><s c="XML_ATTRIBUTE_NODE" u="XML_ATTRIBUTE_NODE - ">2</s><s c="XML_TEXT_NODE" u="XML_TEXT_NODE - ">3</s><s c="XML_CDATA_SECTION_NODE" u="XML_CDATA_SECTION_NODE - ">4</s><s c="XML_ENTITY_REF_NODE" u="XML_ENTITY_REF_NODE - ">5</s><s c="XML_ENTITY_NODE" u="XML_ENTITY_NODE - ">6</s><s c="XML_PI_NODE" u="XML_PI_NODE - ">7</s><s c="XML_COMMENT_NODE" u="XML_COMMENT_NODE - ">8</s><s c="XML_DOCUMENT_NODE" u="XML_DOCUMENT_NODE - ">9</s><s c="XML_DOCUMENT_TYPE_NODE" u="XML_DOCUMENT_TYPE_NODE - ">10</s><s c="XML_DOCUMENT_FRAG_NODE" u="XML_DOCUMENT_FRAG_NODE - ">11</s><s c="XML_NOTATION_NODE" u="XML_NOTATION_NODE - ">12</s><s c="XML_GLOBAL_NAMESPACE" u="XML_GLOBAL_NAMESPACE - ">1</s><s c="XML_LOCAL_NAMESPACE" u="XML_LOCAL_NAMESPACE - ">2</s><s c="XML_HTML_DOCUMENT_NODE" u="XML_HTML_DOCUMENT_NODE - "></s><s c="XML_DTD_NODE" u="XML_DTD_NODE - "></s><s c="XML_ELEMENT_DECL_NODE" u="XML_ELEMENT_DECL_NODE - "></s><s c="XML_ATTRIBUTE_DECL_NODE" u="XML_ATTRIBUTE_DECL_NODE - "></s><s c="XML_ENTITY_DECL_NODE" u="XML_ENTITY_DECL_NODE - "></s><s c="XML_NAMESPACE_DECL_NODE" u="XML_NAMESPACE_DECL_NODE - "></s><s c="XML_ATTRIBUTE_CDATA" u="XML_ATTRIBUTE_CDATA - "></s><s c="XML_ATTRIBUTE_ID" u="XML_ATTRIBUTE_ID - "></s><s c="XML_ATTRIBUTE_IDREF" u="XML_ATTRIBUTE_IDREF - "></s><s c="XML_ATTRIBUTE_IDREFS" u="XML_ATTRIBUTE_IDREFS - "></s><s c="XML_ATTRIBUTE_ENTITY" u="XML_ATTRIBUTE_ENTITY - "></s><s c="XML_ATTRIBUTE_NMTOKEN" u="XML_ATTRIBUTE_NMTOKEN - "></s><s c="XML_ATTRIBUTE_NMTOKENS" u="XML_ATTRIBUTE_NMTOKENS - "></s><s c="XML_ATTRIBUTE_ENUMERATION" u="XML_ATTRIBUTE_ENUMERATION - "></s><s c="XML_ATTRIBUTE_NOTATION" u="XML_ATTRIBUTE_NOTATION - "></s><s c="XPATH_UNDEFINED" u="XPATH_UNDEFINED - "></s><s c="XPATH_NODESET" u="XPATH_NODESET - "></s><s c="XPATH_BOOLEAN" u="XPATH_BOOLEAN - "></s><s c="XPATH_NUMBER" u="XPATH_NUMBER - "></s><s c="XPATH_STRING" u="XPATH_STRING - "></s><s c="XPATH_POINT" u="XPATH_POINT - "></s><s c="XPATH_RANGE" u="XPATH_RANGE - "></s><s c="XPATH_LOCATIONSET" u="XPATH_LOCATIONSET - "></s><s c="XPATH_USERS" u="XPATH_USERS - "></s><s c="XPATH_NUMBER" u="XPATH_NUMBER - "></s><s c="E_ERROR" u="E_ERROR - ">Fatal run-time errors. These indicate errors that can not be
      recovered from, such as a memory allocation problem.
      Execution of the script is halted.</s><s c="FAMC" u="FAMC - ">Some value which can be obtained with fstat(1) changed for a
       file or directory.</s><s c="FAMD" u="FAMD - ">A file or directory was deleted or renamed.</s><s c="FAMC" u="FAMC - ">A file was created in a directory.</s><s c="FAMM" u="FAMM - ">This event never occurs.</s><s c="FAMA" u="FAMA - ">An event in response to fam_cancel_monitor.</s><s c="FAME" u="FAME - ">An event upon request to monitor a file or directory. When a
       directory is monitored, an event for that directory and every file
       contained in that directory is issued.</s><s c="FBSQL_ASSOC" u="FBSQL_ASSOC - "></s><s c="FBSQL_NUM" u="FBSQL_NUM - "></s><s c="FBSQL_BOTH" u="FBSQL_BOTH - "></s><s c="FBSQL_LOCK_DEFERRED" u="FBSQL_LOCK_DEFERRED - "></s><s c="FBSQL_LOCK_OPTIMISTIC" u="FBSQL_LOCK_OPTIMISTIC - "></s><s c="FBSQL_LOCK_PESSIMISTIC" u="FBSQL_LOCK_PESSIMISTIC - "></s><s c="FBSQL_ISO_READ_UNCOMMITTED" u="FBSQL_ISO_READ_UNCOMMITTED - "></s><s c="FBSQL_ISO_READ_COMMITTED" u="FBSQL_ISO_READ_COMMITTED - "></s><s c="FBSQL_ISO_REPEATABLE_READ" u="FBSQL_ISO_REPEATABLE_READ - "></s><s c="FBSQL_ISO_SERIALIZABLE" u="FBSQL_ISO_SERIALIZABLE - "></s><s c="FBSQL_ISO_VERSIONED" u="FBSQL_ISO_VERSIONED - "></s><s c="FBSQL_UNKNOWN" u="FBSQL_UNKNOWN - "></s><s c="FBSQL_STOPPED" u="FBSQL_STOPPED - "></s><s c="FBSQL_STARTING" u="FBSQL_STARTING - "></s><s c="FBSQL_RUNNING" u="FBSQL_RUNNING - "></s><s c="FBSQL_STOPPING" u="FBSQL_STOPPING - "></s><s c="FBSQL_NOEXEC" u="FBSQL_NOEXEC - "></s><s c="FBSQL_LOB_DIRECT" u="FBSQL_LOB_DIRECT - "></s><s c="FBSQL_LOB_HANDLE" u="FBSQL_LOB_HANDLE - "></s><s c="FDFValue" u="FDFValue - "></s><s c="FDFStatus" u="FDFStatus - "></s><s c="FDFFile" u="FDFFile - "></s><s c="FDFID" u="FDFID - "></s><s c="FDFFf" u="FDFFf - "></s><s c="FDFSetFf" u="FDFSetFf - "></s><s c="FDFClearFf" u="FDFClearFf - "></s><s c="FDFFlags" u="FDFFlags - "></s><s c="FDFSetF" u="FDFSetF - "></s><s c="FDFClrF" u="FDFClrF - "></s><s c="FDFAP" u="FDFAP - "></s><s c="FDFAS" u="FDFAS - "></s><s c="FDFAction" u="FDFAction - "></s><s c="FDFAA" u="FDFAA - "></s><s c="FDFAPRef" u="FDFAPRef - "></s><s c="FDFIF" u="FDFIF - "></s><s c="FDFEnter" u="FDFEnter - "></s><s c="FDFExit" u="FDFExit - "></s><s c="FDFDown" u="FDFDown - "></s><s c="FDFUp" u="FDFUp - "></s><s c="FDFFormat" u="FDFFormat - "></s><s c="FDFValidate" u="FDFValidate - "></s><s c="FDFKeystroke" u="FDFKeystroke - "></s><s c="FDFCalculate" u="FDFCalculate - "></s><s c="FDFNormalAP" u="FDFNormalAP - "></s><s c="FDFRolloverAP" u="FDFRolloverAP - "></s><s c="FDFDownAP" u="FDFDownAP - "></s><s c="GLOB_BRACE" u="GLOB_BRACE - "></s><s c="GLOB_ONLYDIR" u="GLOB_ONLYDIR - "></s><s c="GLOB_MARK" u="GLOB_MARK - "></s><s c="GLOB_NOSORT" u="GLOB_NOSORT - "></s><s c="GLOB_NOCHECK" u="GLOB_NOCHECK - "></s><s c="GLOB_NOESCAPE" u="GLOB_NOESCAPE - "></s><s c="PATHINFO_DIRNAME" u="PATHINFO_DIRNAME - "></s><s c="PATHINFO_BASENAME" u="PATHINFO_BASENAME - "></s><s c="PATHINFO_EXTENSION" u="PATHINFO_EXTENSION - "></s><s c="FILE_USE_INCLUDE_PATH" u="FILE_USE_INCLUDE_PATH - "></s><s c="FILE_APPEND" u="FILE_APPEND - "></s><s c="FILE_IGNORE_NEW_LINES" u="FILE_IGNORE_NEW_LINES - "></s><s c="FILE_SKIP_EMPTY_LINES" u="FILE_SKIP_EMPTY_LINES - "></s><s c="FRIBIDI_CHARSET_UTF8" u="FRIBIDI_CHARSET_UTF8 - "></s><s c="FRIBIDI_CHARSET_8859_6" u="FRIBIDI_CHARSET_8859_6 - "></s><s c="FRIBIDI_CHARSET_8859_8" u="FRIBIDI_CHARSET_8859_8 - "></s><s c="FRIBIDI_CHARSET_CP1255" u="FRIBIDI_CHARSET_CP1255 - "></s><s c="FRIBIDI_CHARSET_CP1256" u="FRIBIDI_CHARSET_CP1256 - "></s><s c="FRIBIDI_CHARSET_ISIRI_3342" u="FRIBIDI_CHARSET_ISIRI_3342 - "></s><s c="FTP_ASCII" u="FTP_ASCII - "></s><s c="FTP_TEXT" u="FTP_TEXT - "></s><s c="FTP_BINARY" u="FTP_BINARY - "></s><s c="FTP_IMAGE" u="FTP_IMAGE - "></s><s c="FTP_TIMEOUT_SEC" u="FTP_TIMEOUT_SEC - "></s><s c="FTP_AUTOSEEK" u="FTP_AUTOSEEK - "></s><s c="FTP_AUTORESUME" u="FTP_AUTORESUME - "></s><s c="FTP_FAILED" u="FTP_FAILED - "></s><s c="FTP_FINISHED" u="FTP_FINISHED - "></s><s c="FTP_MOREDATA" u="FTP_MOREDATA - "></s><s c="GMP_ROUND_ZERO" u="GMP_ROUND_ZERO - "></s><s c="GMP_ROUND_PLUSINF" u="GMP_ROUND_PLUSINF - "></s><s c="GMP_ROUND_MINUSINF" u="GMP_ROUND_MINUSINF - "></s><s c="HW_ATTR_LANG" u="HW_ATTR_LANG - "></s><s c="HW_ATTR_NR" u="HW_ATTR_NR - "></s><s c="HW_ATTR_NONE" u="HW_ATTR_NONE - "></s><s c="IBASE_DEFAULT" u="IBASE_DEFAULT - ">The default transaction settings are to be used. This default is
       determined by the client library, which defines it as
       IBASE_WRITE|IBASE_CONCURRENCY|IBASE_WAIT in most cases.</s><s c="IBASE_READ" u="IBASE_READ - ">Starts a read-only transaction.</s><s c="IBASE_WRITE" u="IBASE_WRITE - ">Starts a read-write transaction.</s><s c="IBASE_CONSISTENCY" u="IBASE_CONSISTENCY - ">Starts a transaction with the isolation level set to
       'consistency', which means the transaction cannot read from tables
       that are being modified by other concurrent transactions.</s><s c="IBASE_CONCURRENCY" u="IBASE_CONCURRENCY - ">Starts a transaction with the isolation level set to
       'concurrency' (or 'snapshot'), which means the transaction
       has access to all tables, but cannot see changes that were committed
       by other transactions after the transaction was started.</s><s c="IBASE_COMMITTED" u="IBASE_COMMITTED - ">Starts a transaction with the isolation level set to
       'read committed'. This flag should be combined with either
       IBASE_REC_VERSION or
       IBASE_REC_NO_VERSION. This isolation level
       allows access to changes that were committed after the transaction
       was started. If IBASE_REC_NO_VERSION was
       specified, only the latest version of a row can be read. If
       IBASE_REC_VERSION was specified, a row can
       even be read when a modification to it is pending in a concurrent
       transaction.</s><s c="IBASE_WAIT" u="IBASE_WAIT - ">Indicated that a transaction should wait and retry when a
       conflict occurs.</s><s c="IBASE_NOWAIT" u="IBASE_NOWAIT - ">Indicated that a transaction should fail immediately when a
       conflict occurs.</s><s c="IBASE_FETCH_BLOBS" u="IBASE_FETCH_BLOBS - ">Also available as IBASE_TEXTfor backward
       compatibility. Causes BLOB contents to be fetched inline, instead of
       being fetched as BLOB identifiers.</s><s c="IBASE_FETCH_ARRAYS" u="IBASE_FETCH_ARRAYS - ">Causes arrays to be fetched inline. Otherwise, array
       identifiers are returned. Array identifiers can only be used as
       arguments to INSERT operations, as no functions to handle array
       identifiers are currently available.</s><s c="IBASE_UNIXTIME" u="IBASE_UNIXTIME - ">Causes date and time fields not to be returned as strings,
       but as UNIX timestamps (the number of seconds since the epoch, which
       is 1-Jan-1970 0:00 UTC). Might be problematic if used with dates
       before 1970 on some systems.</s><s c="ICONV_IMPL" u="ICONV_IMPL - ">string</s><s c="ICONV_VERSION" u="ICONV_VERSION - ">string</s><s c="ICONV_MIME_DECODE_STRICT" u="ICONV_MIME_DECODE_STRICT - ">integer</s><s c="ICONV_MIME_DECODE_CONTINUE_ON_ERROR" u="ICONV_MIME_DECODE_CONTINUE_ON_ERROR - ">integer</s><s c="IMG_GIF" u="IMG_GIF - "></s><s c="IMG_JPG" u="IMG_JPG - "></s><s c="IMG_JPEG" u="IMG_JPEG - "></s><s c="IMG_PNG" u="IMG_PNG - "></s><s c="IMG_WBMP" u="IMG_WBMP - "></s><s c="IMG_XPM" u="IMG_XPM - "></s><s c="IMG_COLOR_TILED" u="IMG_COLOR_TILED - "></s><s c="IMG_COLOR_STYLED" u="IMG_COLOR_STYLED - "></s><s c="IMG_COLOR_BRUSHED" u="IMG_COLOR_BRUSHED - "></s><s c="IMG_COLOR_STYLEDBRUSHED" u="IMG_COLOR_STYLEDBRUSHED - "></s><s c="IMG_COLOR_TRANSPARENT" u="IMG_COLOR_TRANSPARENT - "></s><s c="IMG_ARC_ROUNDED" u="IMG_ARC_ROUNDED - "></s><s c="IMG_ARC_PIE" u="IMG_ARC_PIE - "></s><s c="IMG_ARC_CHORD" u="IMG_ARC_CHORD - "></s><s c="IMG_ARC_NOFILL" u="IMG_ARC_NOFILL - "></s><s c="IMG_ARC_EDGED" u="IMG_ARC_EDGED - "></s><s c="IMAGETYPE_GIF" u="IMAGETYPE_GIF - "></s><s c="IMAGETYPE_JPEG" u="IMAGETYPE_JPEG - "></s><s c="IMAGETYPE_PNG" u="IMAGETYPE_PNG - "></s><s c="IMAGETYPE_SWF" u="IMAGETYPE_SWF - "></s><s c="IMAGETYPE_PSD" u="IMAGETYPE_PSD - "></s><s c="IMAGETYPE_BMP" u="IMAGETYPE_BMP - "></s><s c="IMAGETYPE_WBMP" u="IMAGETYPE_WBMP - "></s><s c="IMAGETYPE_XBM" u="IMAGETYPE_XBM - "></s><s c="IMAGETYPE_TIFF_II" u="IMAGETYPE_TIFF_II - "></s><s c="IMAGETYPE_TIFF_MM" u="IMAGETYPE_TIFF_MM - "></s><s c="IMAGETYPE_IFF" u="IMAGETYPE_IFF - "></s><s c="IMAGETYPE_JB2" u="IMAGETYPE_JB2 - "></s><s c="IMAGETYPE_JPC" u="IMAGETYPE_JPC - "></s><s c="IMAGETYPE_JP2" u="IMAGETYPE_JP2 - "></s><s c="IMAGETYPE_JPX" u="IMAGETYPE_JPX - "></s><s c="IMAGETYPE_SWC" u="IMAGETYPE_SWC - "></s><s c="NIL" u="NIL - "></s><s c="OP_DEBUG" u="OP_DEBUG - "></s><s c="OP_READONLY" u="OP_READONLY - "></s><s c="OP_ANONYMOUS" u="OP_ANONYMOUS - "></s><s c="OP_SHORTCACHE" u="OP_SHORTCACHE - "></s><s c="OP_SILENT" u="OP_SILENT - "></s><s c="OP_PROTOTYPE" u="OP_PROTOTYPE - "></s><s c="OP_HALFOPEN" u="OP_HALFOPEN - "></s><s c="OP_EXPUNGE" u="OP_EXPUNGE - "></s><s c="OP_SECURE" u="OP_SECURE - "></s><s c="CL_EXPUNGE" u="CL_EXPUNGE - "></s><s c="FT_UID" u="FT_UID - "></s><s c="FT_PEEK" u="FT_PEEK - "></s><s c="FT_NOT" u="FT_NOT - "></s><s c="FT_INTERNAL" u="FT_INTERNAL - "></s><s c="FT_PREFETCHTEXT" u="FT_PREFETCHTEXT - "></s><s c="ST_UID" u="ST_UID - "></s><s c="ST_SILENT" u="ST_SILENT - "></s><s c="ST_SET" u="ST_SET - "></s><s c="CP_UID" u="CP_UID - "></s><s c="CP_MOVE" u="CP_MOVE - "></s><s c="SE_UID" u="SE_UID - "></s><s c="SE_FREE" u="SE_FREE - "></s><s c="SE_NOPREFETCH" u="SE_NOPREFETCH - "></s><s c="SO_FREE" u="SO_FREE - "></s><s c="SO_NOSERVER" u="SO_NOSERVER - "></s><s c="SA_MESSAGES" u="SA_MESSAGES - "></s><s c="SA_RECENT" u="SA_RECENT - "></s><s c="SA_UNSEEN" u="SA_UNSEEN - "></s><s c="SA_UIDNEXT" u="SA_UIDNEXT - "></s><s c="SA_UIDVALIDITY" u="SA_UIDVALIDITY - "></s><s c="SA_ALL" u="SA_ALL - "></s><s c="LATT_NOINFERIORS" u="LATT_NOINFERIORS - "></s><s c="LATT_NOSELECT" u="LATT_NOSELECT - "></s><s c="LATT_MARKED" u="LATT_MARKED - "></s><s c="LATT_UNMARKED" u="LATT_UNMARKED - "></s><s c="SORTDATE" u="SORTDATE - "></s><s c="SORTARRIVAL" u="SORTARRIVAL - "></s><s c="SORTFROM" u="SORTFROM - "></s><s c="SORTSUBJECT" u="SORTSUBJECT - "></s><s c="SORTTO" u="SORTTO - "></s><s c="SORTCC" u="SORTCC - "></s><s c="SORTSIZE" u="SORTSIZE - "></s><s c="TYPETEXT" u="TYPETEXT - "></s><s c="TYPEMULTIPART" u="TYPEMULTIPART - "></s><s c="TYPEMESSAGE" u="TYPEMESSAGE - "></s><s c="TYPEAPPLICATION" u="TYPEAPPLICATION - "></s><s c="TYPEAUDIO" u="TYPEAUDIO - "></s><s c="TYPEIMAGE" u="TYPEIMAGE - "></s><s c="TYPEVIDEO" u="TYPEVIDEO - "></s><s c="TYPEOTHER" u="TYPEOTHER - "></s><s c="ENC7BIT" u="ENC7BIT - "></s><s c="ENC8BIT" u="ENC8BIT - "></s><s c="ENCBINARY" u="ENCBINARY - "></s><s c="ENCBASE64" u="ENCBASE64 - "></s><s c="ENCQUOTEDPRINTABLE" u="ENCQUOTEDPRINTABLE - "></s><s c="ENCOTHER" u="ENCOTHER - "></s><s c="CREDITS_GROUP" u="CREDITS_GROUP - ">1</s><s c="CREDITS_GENERAL" u="CREDITS_GENERAL - ">2</s><s c="CREDITS_SAPI" u="CREDITS_SAPI - ">4</s><s c="CREDITS_MODULES" u="CREDITS_MODULES - ">8</s><s c="CREDITS_DOCS" u="CREDITS_DOCS - ">16</s><s c="CREDITS_FULLPAGE" u="CREDITS_FULLPAGE - ">32</s><s c="CREDITS_QA" u="CREDITS_QA - ">64</s><s c="CREDITS_ALL" u="CREDITS_ALL - ">-1</s><s c="INFO_GENERAL" u="INFO_GENERAL - ">1</s><s c="INFO_CREDITS" u="INFO_CREDITS - ">2</s><s c="INFO_CONFIGURATION" u="INFO_CONFIGURATION - ">4</s><s c="INFO_MODULES" u="INFO_MODULES - ">8</s><s c="INFO_ENVIRONMENT" u="INFO_ENVIRONMENT - ">16</s><s c="INFO_VARIABLES" u="INFO_VARIABLES - ">32</s><s c="INFO_LICENSE" u="INFO_LICENSE - ">64</s><s c="INFO_ALL" u="INFO_ALL - ">-1</s><s c="INGRES_ASSOC" u="INGRES_ASSOC - "></s><s c="INGRES_NUM" u="INGRES_NUM - "></s><s c="INGRES_BOTH" u="INGRES_BOTH - "></s><s c="LDAP_DEREF_NEVER" u="LDAP_DEREF_NEVER - "></s><s c="LDAP_DEREF_SEARCHING" u="LDAP_DEREF_SEARCHING - "></s><s c="LDAP_DEREF_FINDING" u="LDAP_DEREF_FINDING - "></s><s c="LDAP_DEREF_ALWAYS" u="LDAP_DEREF_ALWAYS - "></s><s c="LDAP_OPT_DEREF" u="LDAP_OPT_DEREF - "></s><s c="LDAP_OPT_SIZELIMIT" u="LDAP_OPT_SIZELIMIT - "></s><s c="LDAP_OPT_TIMELIMIT" u="LDAP_OPT_TIMELIMIT - "></s><s c="LDAP_OPT_PROTOCOL_VERSION" u="LDAP_OPT_PROTOCOL_VERSION - "></s><s c="LDAP_OPT_ERROR_NUMBER" u="LDAP_OPT_ERROR_NUMBER - "></s><s c="LDAP_OPT_REFERRALS" u="LDAP_OPT_REFERRALS - "></s><s c="LDAP_OPT_RESTART" u="LDAP_OPT_RESTART - "></s><s c="LDAP_OPT_HOST_NAME" u="LDAP_OPT_HOST_NAME - "></s><s c="LDAP_OPT_ERROR_STRING" u="LDAP_OPT_ERROR_STRING - "></s><s c="LDAP_OPT_MATCHED_DN" u="LDAP_OPT_MATCHED_DN - "></s><s c="LDAP_OPT_SERVER_CONTROLS" u="LDAP_OPT_SERVER_CONTROLS - "></s><s c="LDAP_OPT_CLIENT_CONTROLS" u="LDAP_OPT_CLIENT_CONTROLS - "></s><s c="LDAP_OPT_DEBUG_LEVEL" u="LDAP_OPT_DEBUG_LEVEL - "></s><s c="GSLC_SSL_NO_AUTH" u="GSLC_SSL_NO_AUTH - "></s><s c="GSLC_SSL_ONEWAY_AUTH" u="GSLC_SSL_ONEWAY_AUTH - "></s><s c="GSLC_SSL_TWOWAY_AUTH" u="GSLC_SSL_TWOWAY_AUTH - "></s><s c="M_PI" u="M_PI - ">3.14159265358979323846</s><s c="M_E" u="M_E - ">2.7182818284590452354</s><s c="M_LOG2E" u="M_LOG2E - ">1.4426950408889634074</s><s c="M_LOG10E" u="M_LOG10E - ">0.43429448190325182765</s><s c="M_LN2" u="M_LN2 - ">0.69314718055994530942</s><s c="M_LN10" u="M_LN10 - ">2.30258509299404568402</s><s c="M_PI_2" u="M_PI_2 - ">1.57079632679489661923</s><s c="M_PI_4" u="M_PI_4 - ">0.78539816339744830962</s><s c="M_1_PI" u="M_1_PI - ">0.31830988618379067154</s><s c="M_2_PI" u="M_2_PI - ">0.63661977236758134308</s><s c="M_SQRTPI" u="M_SQRTPI - ">1.77245385090551602729</s><s c="M_2_SQRTPI" u="M_2_SQRTPI - ">1.12837916709551257390</s><s c="M_SQRT2" u="M_SQRT2 - ">1.41421356237309504880</s><s c="M_SQRT3" u="M_SQRT3 - ">1.73205080756887729352</s><s c="M_SQRT1_2" u="M_SQRT1_2 - ">0.70710678118654752440</s><s c="M_LNPI" u="M_LNPI - ">1.14472988584940017414</s><s c="M_EULER" u="M_EULER - ">0.57721566490153286061</s><s c="MB_OVERLOAD_MAIL" u="MB_OVERLOAD_MAIL - "></s><s c="MB_OVERLOAD_STRING" u="MB_OVERLOAD_STRING - "></s><s c="MB_OVERLOAD_REGEX" u="MB_OVERLOAD_REGEX - "></s><s c="MCAL_SUNDAY" u="MCAL_SUNDAY - "></s><s c="MCAL_MONDAY" u="MCAL_MONDAY - "></s><s c="MCAL_TUESDAY" u="MCAL_TUESDAY - "></s><s c="MCAL_WEDNESDAY" u="MCAL_WEDNESDAY - "></s><s c="MCAL_THURSDAY" u="MCAL_THURSDAY - "></s><s c="MCAL_FRIDAY" u="MCAL_FRIDAY - "></s><s c="MCAL_SATURDAY" u="MCAL_SATURDAY - "></s><s c="MCAL_JANUARY" u="MCAL_JANUARY - "></s><s c="MCAL_FEBRUARY" u="MCAL_FEBRUARY - "></s><s c="MCAL_MARCH" u="MCAL_MARCH - "></s><s c="MCAL_APRIL" u="MCAL_APRIL - "></s><s c="MCAL_MAY" u="MCAL_MAY - "></s><s c="MCAL_JUNE" u="MCAL_JUNE - "></s><s c="MCAL_JULY" u="MCAL_JULY - "></s><s c="MCAL_AUGUST" u="MCAL_AUGUST - "></s><s c="MCAL_SEPTEMBER" u="MCAL_SEPTEMBER - "></s><s c="MCAL_OCTOBER" u="MCAL_OCTOBER - "></s><s c="MCAL_NOVEMBER" u="MCAL_NOVEMBER - "></s><s c="MCAL_DECEMBER" u="MCAL_DECEMBER - "></s><s c="MCAL_RECUR_NONE" u="MCAL_RECUR_NONE - "></s><s c="MCAL_RECUR_DAILY" u="MCAL_RECUR_DAILY - "></s><s c="MCAL_RECUR_WEEKLY" u="MCAL_RECUR_WEEKLY - "></s><s c="MCAL_RECUR_MONTHLY_MDAY" u="MCAL_RECUR_MONTHLY_MDAY - "></s><s c="MCAL_RECUR_MONTHLY_WDAY" u="MCAL_RECUR_MONTHLY_WDAY - "></s><s c="MCAL_RECUR_YEARLY" u="MCAL_RECUR_YEARLY - "></s><s c="MCAL_M_SUNDAY" u="MCAL_M_SUNDAY - "></s><s c="MCAL_M_MONDAY" u="MCAL_M_MONDAY - "></s><s c="MCAL_M_TUESDAY" u="MCAL_M_TUESDAY - "></s><s c="MCAL_M_WEDNESDAY" u="MCAL_M_WEDNESDAY - "></s><s c="MCAL_M_THURSDAY" u="MCAL_M_THURSDAY - "></s><s c="MCAL_M_FRIDAY" u="MCAL_M_FRIDAY - "></s><s c="MCAL_M_SATURDAY" u="MCAL_M_SATURDAY - "></s><s c="MCAL_M_WEEKDAYS" u="MCAL_M_WEEKDAYS - "></s><s c="MCAL_M_WEEKEND" u="MCAL_M_WEEKEND - "></s><s c="MCAL_M_ALLDAYS" u="MCAL_M_ALLDAYS - "></s><s c="MCRYPT_ENCRYPT" u="MCRYPT_ENCRYPT - "></s><s c="MCRYPT_DECRYPT" u="MCRYPT_DECRYPT - "></s><s c="MCRYPT_DEV_RANDOM" u="MCRYPT_DEV_RANDOM - "></s><s c="MCRYPT_DEV_URANDOM" u="MCRYPT_DEV_URANDOM - "></s><s c="MCRYPT_RAND" u="MCRYPT_RAND - "></s><s c="MC_TRANTYPE" u="MC_TRANTYPE - "></s><s c="MC_USERNAME" u="MC_USERNAME - "></s><s c="MC_PASSWORD" u="MC_PASSWORD - "></s><s c="MC_ACCOUNT" u="MC_ACCOUNT - "></s><s c="MC_TRACKDATA" u="MC_TRACKDATA - "></s><s c="MC_EXPDATE" u="MC_EXPDATE - "></s><s c="MC_STREET" u="MC_STREET - "></s><s c="MC_ZIP" u="MC_ZIP - "></s><s c="MC_CV" u="MC_CV - "></s><s c="MC_COMMENTS" u="MC_COMMENTS - "></s><s c="MC_CLERKID" u="MC_CLERKID - "></s><s c="MC_STATIONID" u="MC_STATIONID - "></s><s c="MC_APPRCODE" u="MC_APPRCODE - "></s><s c="MC_AMOUNT" u="MC_AMOUNT - "></s><s c="MC_PTRANNUM" u="MC_PTRANNUM - "></s><s c="MC_TTID" u="MC_TTID - "></s><s c="MC_USER" u="MC_USER - "></s><s c="MC_PWD" u="MC_PWD - "></s><s c="MC_ACCT" u="MC_ACCT - "></s><s c="MC_BDATE" u="MC_BDATE - "></s><s c="MC_EDATE" u="MC_EDATE - "></s><s c="MC_BATCH" u="MC_BATCH - "></s><s c="MC_FILE" u="MC_FILE - "></s><s c="MC_ADMIN" u="MC_ADMIN - "></s><s c="MC_AUDITTYPE" u="MC_AUDITTYPE - "></s><s c="MC_CUSTOM" u="MC_CUSTOM - "></s><s c="MC_EXAMOUNT" u="MC_EXAMOUNT - "></s><s c="MC_EXCHARGES" u="MC_EXCHARGES - "></s><s c="MC_RATE" u="MC_RATE - "></s><s c="MC_RENTERNAME" u="MC_RENTERNAME - "></s><s c="MC_RETURNCITY" u="MC_RETURNCITY - "></s><s c="MC_RETURNSTATE" u="MC_RETURNSTATE - "></s><s c="MC_RETURNLOCATION" u="MC_RETURNLOCATION - "></s><s c="MC_PRIORITY" u="MC_PRIORITY - "></s><s c="MC_INQUIRY" u="MC_INQUIRY - "></s><s c="MC_CARDTYPES" u="MC_CARDTYPES - "></s><s c="MC_SUB" u="MC_SUB - "></s><s c="MC_MARKER" u="MC_MARKER - "></s><s c="MC_DEVICETYPE" u="MC_DEVICETYPE - "></s><s c="MC_ERRORCODE" u="MC_ERRORCODE - "></s><s c="MC_NEWBATCH" u="MC_NEWBATCH - "></s><s c="MC_CURR" u="MC_CURR - "></s><s c="MC_DESCMERCH" u="MC_DESCMERCH - "></s><s c="MC_DESCLOC" u="MC_DESCLOC - "></s><s c="MC_ORIGTYPE" u="MC_ORIGTYPE - "></s><s c="MC_PIN" u="MC_PIN - "></s><s c="MC_VOIDORIGTYPE" u="MC_VOIDORIGTYPE - "></s><s c="MC_TIMESTAMP" u="MC_TIMESTAMP - "></s><s c="MC_PRIO_HIGH" u="MC_PRIO_HIGH - "></s><s c="MC_PRIO_NORMAL" u="MC_PRIO_NORMAL - "></s><s c="MC_PRIO_LOW" u="MC_PRIO_LOW - "></s><s c="MC_USER_PROC" u="MC_USER_PROC - "></s><s c="MC_USER_USER" u="MC_USER_USER - "></s><s c="MC_USER_PWD" u="MC_USER_PWD - "></s><s c="MC_USER_INDCODE" u="MC_USER_INDCODE - "></s><s c="MC_USER_MERCHID" u="MC_USER_MERCHID - "></s><s c="MC_USER_BANKID" u="MC_USER_BANKID - "></s><s c="MC_USER_TERMID" u="MC_USER_TERMID - "></s><s c="MC_USER_CLIENTNUM" u="MC_USER_CLIENTNUM - "></s><s c="MC_USER_STOREID" u="MC_USER_STOREID - "></s><s c="MC_USER_AGENTID" u="MC_USER_AGENTID - "></s><s c="MC_USER_CHAINID" u="MC_USER_CHAINID - "></s><s c="MC_USER_ZIPCODE" u="MC_USER_ZIPCODE - "></s><s c="MC_USER_TIMEZONE" u="MC_USER_TIMEZONE - "></s><s c="MC_USER_MERCHCAT" u="MC_USER_MERCHCAT - "></s><s c="MC_USER_MERNAME" u="MC_USER_MERNAME - "></s><s c="MC_USER_MERCHLOC" u="MC_USER_MERCHLOC - "></s><s c="MC_USER_STATECODE" u="MC_USER_STATECODE - "></s><s c="MC_USER_PHONE" u="MC_USER_PHONE - "></s><s c="MC_USER_SUB" u="MC_USER_SUB - "></s><s c="MC_USER_CARDTYPES" u="MC_USER_CARDTYPES - "></s><s c="MC_USER_MODE" u="MC_USER_MODE - "></s><s c="MC_USER_VNUMBER" u="MC_USER_VNUMBER - "></s><s c="MC_USER_ROUTINGID" u="MC_USER_ROUTINGID - "></s><s c="MC_USER_PPROPERTY" u="MC_USER_PPROPERTY - "></s><s c="MC_USER_PID" u="MC_USER_PID - "></s><s c="MC_USER_PIDPWD" u="MC_USER_PIDPWD - "></s><s c="MC_USER_SMID" u="MC_USER_SMID - "></s><s c="MC_USER_SMIDPWD" u="MC_USER_SMIDPWD - "></s><s c="MC_USER_USDDIV" u="MC_USER_USDDIV - "></s><s c="MC_USER_AUDDIV" u="MC_USER_AUDDIV - "></s><s c="MC_USER_DKKDIV" u="MC_USER_DKKDIV - "></s><s c="MC_USER_GBPDIV" u="MC_USER_GBPDIV - "></s><s c="MC_USER_HKDDIV" u="MC_USER_HKDDIV - "></s><s c="MC_USER_JPYDIV" u="MC_USER_JPYDIV - "></s><s c="MC_USER_NZDDIV" u="MC_USER_NZDDIV - "></s><s c="MC_USER_NOKDIV" u="MC_USER_NOKDIV - "></s><s c="MC_USER_SGDDIV" u="MC_USER_SGDDIV - "></s><s c="MC_USER_ZARDIV" u="MC_USER_ZARDIV - "></s><s c="MC_USER_SEKDIV" u="MC_USER_SEKDIV - "></s><s c="MC_USER_CHFDIV" u="MC_USER_CHFDIV - "></s><s c="MC_USER_CADDIV" u="MC_USER_CADDIV - "></s><s c="MC_USER_DIVNUM" u="MC_USER_DIVNUM - "></s><s c="MC_CARD_VISA" u="MC_CARD_VISA - "></s><s c="MC_CARD_MC" u="MC_CARD_MC - "></s><s c="MC_CARD_AMEX" u="MC_CARD_AMEX - "></s><s c="MC_CARD_DISC" u="MC_CARD_DISC - "></s><s c="MC_CARD_JCB" u="MC_CARD_JCB - "></s><s c="MC_CARD_CB" u="MC_CARD_CB - "></s><s c="MC_CARD_DC" u="MC_CARD_DC - "></s><s c="MC_CARD_GIFT" u="MC_CARD_GIFT - "></s><s c="MC_CARD_OTHER" u="MC_CARD_OTHER - "></s><s c="MC_CARD_ALL" u="MC_CARD_ALL - "></s><s c="MC_MODE_AUTH" u="MC_MODE_AUTH - "></s><s c="MC_MODE_SETTLE" u="MC_MODE_SETTLE - "></s><s c="MC_MODE_BOTH" u="MC_MODE_BOTH - "></s><s c="MC_MODE_ALL" u="MC_MODE_ALL - "></s><s c="MC_EXCHARGES_REST" u="MC_EXCHARGES_REST - "></s><s c="MC_EXCHARGES_GIFT" u="MC_EXCHARGES_GIFT - "></s><s c="MC_EXCHARGES_MINI" u="MC_EXCHARGES_MINI - "></s><s c="MC_EXCHARGES_TELE" u="MC_EXCHARGES_TELE - "></s><s c="MC_EXCHARGES_OTHER" u="MC_EXCHARGES_OTHER - "></s><s c="MC_EXCHARGES_LAUND" u="MC_EXCHARGES_LAUND - "></s><s c="MC_EXCHARGES_NONE" u="MC_EXCHARGES_NONE - "></s><s c="MC_EXCHARGES_GAS" u="MC_EXCHARGES_GAS - "></s><s c="MC_EXCHARGES_MILE" u="MC_EXCHARGES_MILE - "></s><s c="MC_EXCHARGES_LATE" u="MC_EXCHARGES_LATE - "></s><s c="MC_EXCHARGES_1WAY" u="MC_EXCHARGES_1WAY - "></s><s c="MC_EXCHARGES_VIOL" u="MC_EXCHARGES_VIOL - "></s><s c="MC_TRAN_SALE" u="MC_TRAN_SALE - "></s><s c="MC_TRAN_REDEMPTION" u="MC_TRAN_REDEMPTION - "></s><s c="MC_TRAN_PREAUTH" u="MC_TRAN_PREAUTH - "></s><s c="MC_TRAN_VOID" u="MC_TRAN_VOID - "></s><s c="MC_TRAN_PREAUTHCOMPLETE" u="MC_TRAN_PREAUTHCOMPLETE - "></s><s c="MC_TRAN_FORCE" u="MC_TRAN_FORCE - "></s><s c="MC_TRAN_OVERRIDE" u="MC_TRAN_OVERRIDE - "></s><s c="MC_TRAN_RETURN" u="MC_TRAN_RETURN - "></s><s c="MC_TRAN_RELOAD" u="MC_TRAN_RELOAD - "></s><s c="MC_TRAN_CREDIT" u="MC_TRAN_CREDIT - "></s><s c="MC_TRAN_SETTLE" u="MC_TRAN_SETTLE - "></s><s c="MC_TRAN_INCREMENTAL" u="MC_TRAN_INCREMENTAL - "></s><s c="MC_TRAN_REVERSAL" u="MC_TRAN_REVERSAL - "></s><s c="MC_TRAN_ACTIVATE" u="MC_TRAN_ACTIVATE - "></s><s c="MC_TRAN_BALANCEINQ" u="MC_TRAN_BALANCEINQ - "></s><s c="MC_TRAN_CASHOUT" u="MC_TRAN_CASHOUT - "></s><s c="MC_TRAN_TOREVERSAL" u="MC_TRAN_TOREVERSAL - "></s><s c="MC_TRAN_SETTLERFR" u="MC_TRAN_SETTLERFR - "></s><s c="MC_TRAN_ISSUE" u="MC_TRAN_ISSUE - "></s><s c="MC_TRAN_TIP" u="MC_TRAN_TIP - "></s><s c="MC_TRAN_MERCHRETURN" u="MC_TRAN_MERCHRETURN - "></s><s c="MC_TRAN_IVRREQ" u="MC_TRAN_IVRREQ - "></s><s c="MC_TRAN_IVRRESP" u="MC_TRAN_IVRRESP - "></s><s c="MC_TRAN_ADMIN" u="MC_TRAN_ADMIN - "></s><s c="MC_TRAN_PING" u="MC_TRAN_PING - "></s><s c="MC_TRAN_CHKPWD" u="MC_TRAN_CHKPWD - "></s><s c="MC_TRAN_CHNGPWD" u="MC_TRAN_CHNGPWD - "></s><s c="MC_TRAN_LISTSTATS" u="MC_TRAN_LISTSTATS - "></s><s c="MC_TRAN_LISTUSERS" u="MC_TRAN_LISTUSERS - "></s><s c="MC_TRAN_GETUSERINFO" u="MC_TRAN_GETUSERINFO - "></s><s c="MC_TRAN_ADDUSER" u="MC_TRAN_ADDUSER - "></s><s c="MC_TRAN_EDITUSER" u="MC_TRAN_EDITUSER - "></s><s c="MC_TRAN_DELUSER" u="MC_TRAN_DELUSER - "></s><s c="MC_TRAN_ENABLEUSER" u="MC_TRAN_ENABLEUSER - "></s><s c="MC_TRAN_DISABLEUSER" u="MC_TRAN_DISABLEUSER - "></s><s c="MC_TRAN_IMPORT" u="MC_TRAN_IMPORT - "></s><s c="MC_TRAN_EXPORT" u="MC_TRAN_EXPORT - "></s><s c="MC_TRAN_ERRORLOG" u="MC_TRAN_ERRORLOG - "></s><s c="MC_TRAN_CLEARERRORLOG" u="MC_TRAN_CLEARERRORLOG - "></s><s c="MC_TRAN_GETSUBACCTS" u="MC_TRAN_GETSUBACCTS - "></s><s c="MC_ADMIN_GUT" u="MC_ADMIN_GUT - "></s><s c="MC_ADMIN_GL" u="MC_ADMIN_GL - "></s><s c="MC_ADMIN_GFT" u="MC_ADMIN_GFT - "></s><s c="MC_ADMIN_BT" u="MC_ADMIN_BT - "></s><s c="MC_ADMIN_UB" u="MC_ADMIN_UB - "></s><s c="MC_ADMIN_QC" u="MC_ADMIN_QC - "></s><s c="MC_ADMIN_RS" u="MC_ADMIN_RS - "></s><s c="MC_ADMIN_CTH" u="MC_ADMIN_CTH - "></s><s c="MC_ADMIN_CFH" u="MC_ADMIN_CFH - "></s><s c="MC_ADMIN_FORCESETTLE" u="MC_ADMIN_FORCESETTLE - "></s><s c="MC_ADMIN_SETBATCHNUM" u="MC_ADMIN_SETBATCHNUM - "></s><s c="MC_ADMIN_RENUMBERBATCH" u="MC_ADMIN_RENUMBERBATCH - "></s><s c="MC_ADMIN_FIELDEDIT" u="MC_ADMIN_FIELDEDIT - "></s><s c="MC_ADMIN_CLOSEBATCH" u="MC_ADMIN_CLOSEBATCH - "></s><s c="MCVE_UNUSED" u="MCVE_UNUSED - "></s><s c="MCVE_NEW" u="MCVE_NEW - "></s><s c="MCVE_PENDING" u="MCVE_PENDING - "></s><s c="MCVE_DONE" u="MCVE_DONE - "></s><s c="MCVE_GOOD" u="MCVE_GOOD - "></s><s c="MCVE_BAD" u="MCVE_BAD - "></s><s c="MCVE_STREET" u="MCVE_STREET - "></s><s c="MCVE_ZIP" u="MCVE_ZIP - "></s><s c="MCVE_UNKNOWN" u="MCVE_UNKNOWN - "></s><s c="MCVE_ERROR" u="MCVE_ERROR - "></s><s c="MCVE_FAIL" u="MCVE_FAIL - "></s><s c="MCVE_SUCCESS" u="MCVE_SUCCESS - "></s><s c="MCVE_AUTH" u="MCVE_AUTH - "></s><s c="MCVE_DENY" u="MCVE_DENY - "></s><s c="MCVE_CALL" u="MCVE_CALL - "></s><s c="MCVE_DUPL" u="MCVE_DUPL - "></s><s c="MCVE_PKUP" u="MCVE_PKUP - "></s><s c="MCVE_RETRY" u="MCVE_RETRY - "></s><s c="MCVE_SETUP" u="MCVE_SETUP - "></s><s c="MCVE_TIMEOUT" u="MCVE_TIMEOUT - "></s><s c="MCVE_SALE" u="MCVE_SALE - "></s><s c="MCVE_PREAUTH" u="MCVE_PREAUTH - "></s><s c="MCVE_FORCE" u="MCVE_FORCE - "></s><s c="MCVE_OVERRIDE" u="MCVE_OVERRIDE - "></s><s c="MCVE_RETURN" u="MCVE_RETURN - "></s><s c="MCVE_SETTLE" u="MCVE_SETTLE - "></s><s c="MCVE_PROC" u="MCVE_PROC - "></s><s c="MCVE_USER" u="MCVE_USER - "></s><s c="MCVE_PWD" u="MCVE_PWD - "></s><s c="MCVE_INDCODE" u="MCVE_INDCODE - "></s><s c="MCVE_MERCHID" u="MCVE_MERCHID - "></s><s c="MCVE_BANKID" u="MCVE_BANKID - "></s><s c="MCVE_TERMID" u="MCVE_TERMID - "></s><s c="MCVE_CLIENTNUM" u="MCVE_CLIENTNUM - "></s><s c="MCVE_STOREID" u="MCVE_STOREID - "></s><s c="MCVE_AGENTID" u="MCVE_AGENTID - "></s><s c="MCVE_CHAINID" u="MCVE_CHAINID - "></s><s c="MCVE_ZIPCODE" u="MCVE_ZIPCODE - "></s><s c="MCVE_TIMEZONE" u="MCVE_TIMEZONE - "></s><s c="MCVE_MERCHCAT" u="MCVE_MERCHCAT - "></s><s c="MCVE_MERNAME" u="MCVE_MERNAME - "></s><s c="MCVE_MERCHLOC" u="MCVE_MERCHLOC - "></s><s c="MCVE_STATECODE" u="MCVE_STATECODE - "></s><s c="MCVE_SERVICEPHONE" u="MCVE_SERVICEPHONE - "></s><s c="MHASH_MD5" u="MHASH_MD5 - "></s><s c="MHASH_SHA1" u="MHASH_SHA1 - "></s><s c="MHASH_HAVAL256" u="MHASH_HAVAL256 - "></s><s c="MHASH_HAVAL192" u="MHASH_HAVAL192 - "></s><s c="MHASH_HAVAL160" u="MHASH_HAVAL160 - "></s><s c="MHASH_HAVAL128" u="MHASH_HAVAL128 - "></s><s c="MHASH_RIPEMD160" u="MHASH_RIPEMD160 - "></s><s c="MHASH_GOST" u="MHASH_GOST - "></s><s c="MHASH_TIGER" u="MHASH_TIGER - "></s><s c="MHASH_CRC32" u="MHASH_CRC32 - "></s><s c="MHASH_CRC32B" u="MHASH_CRC32B - "></s><s c="SWFBUTTON_HIT" u="SWFBUTTON_HIT - "></s><s c="SWFBUTTON_DOWN" u="SWFBUTTON_DOWN - "></s><s c="SWFBUTTON_OVER" u="SWFBUTTON_OVER - "></s><s c="SWFBUTTON_UP" u="SWFBUTTON_UP - "></s><s c="SWFBUTTON_MOUSEUPOUTSIDE" u="SWFBUTTON_MOUSEUPOUTSIDE - "></s><s c="SWFBUTTON_DRAGOVER" u="SWFBUTTON_DRAGOVER - "></s><s c="SWFBUTTON_DRAGOUT" u="SWFBUTTON_DRAGOUT - "></s><s c="SWFBUTTON_MOUSEUP" u="SWFBUTTON_MOUSEUP - "></s><s c="SWFBUTTON_MOUSEDOWN" u="SWFBUTTON_MOUSEDOWN - "></s><s c="SWFBUTTON_MOUSEOUT" u="SWFBUTTON_MOUSEOUT - "></s><s c="SWFBUTTON_MOUSEOVER" u="SWFBUTTON_MOUSEOVER - "></s><s c="SWFFILL_RADIAL_GRADIENT" u="SWFFILL_RADIAL_GRADIENT - "></s><s c="SWFFILL_LINEAR_GRADIENT" u="SWFFILL_LINEAR_GRADIENT - "></s><s c="SWFFILL_TILED_BITMAP" u="SWFFILL_TILED_BITMAP - "></s><s c="SWFFILL_CLIPPED_BITMAP" u="SWFFILL_CLIPPED_BITMAP - "></s><s c="SWFTEXTFIELD_HASLENGTH" u="SWFTEXTFIELD_HASLENGTH - "></s><s c="SWFTEXTFIELD_NOEDIT" u="SWFTEXTFIELD_NOEDIT - "></s><s c="SWFTEXTFIELD_PASSWORD" u="SWFTEXTFIELD_PASSWORD - "></s><s c="SWFTEXTFIELD_MULTILINE" u="SWFTEXTFIELD_MULTILINE - "></s><s c="SWFTEXTFIELD_WORDWRAP" u="SWFTEXTFIELD_WORDWRAP - "></s><s c="SWFTEXTFIELD_DRAWBOX" u="SWFTEXTFIELD_DRAWBOX - "></s><s c="SWFTEXTFIELD_NOSELECT" u="SWFTEXTFIELD_NOSELECT - "></s><s c="SWFTEXTFIELD_HTML" u="SWFTEXTFIELD_HTML - "></s><s c="SWFTEXTFIELD_ALIGN_LEFT" u="SWFTEXTFIELD_ALIGN_LEFT - "></s><s c="SWFTEXTFIELD_ALIGN_RIGHT" u="SWFTEXTFIELD_ALIGN_RIGHT - "></s><s c="SWFTEXTFIELD_ALIGN_CENTER" u="SWFTEXTFIELD_ALIGN_CENTER - "></s><s c="SWFTEXTFIELD_ALIGN_JUSTIFY" u="SWFTEXTFIELD_ALIGN_JUSTIFY - "></s><s c="SWFACTION_ONLOAD" u="SWFACTION_ONLOAD - "></s><s c="SWFACTION_ENTERFRAME" u="SWFACTION_ENTERFRAME - "></s><s c="SWFACTION_UNLOAD" u="SWFACTION_UNLOAD - "></s><s c="SWFACTION_MOUSEMOVE" u="SWFACTION_MOUSEMOVE - "></s><s c="SWFACTION_MOUSEDOWN" u="SWFACTION_MOUSEDOWN - "></s><s c="SWFACTION_MOUSEUP" u="SWFACTION_MOUSEUP - "></s><s c="SWFACTION_KEYDOWN" u="SWFACTION_KEYDOWN - "></s><s c="SWFACTION_KEYUP" u="SWFACTION_KEYUP - "></s><s c="SWFACTION_DATA" u="SWFACTION_DATA - "></s><s c="CONNECTION_ABORTED" u="CONNECTION_ABORTED - "></s><s c="CONNECTION_NORMAL" u="CONNECTION_NORMAL - "></s><s c="CONNECTION_TIMEOUT" u="CONNECTION_TIMEOUT - "></s><s c="UDM_FIELD_URLID" u="UDM_FIELD_URLID - "></s><s c="UDM_FIELD_URL" u="UDM_FIELD_URL - "></s><s c="UDM_FIELD_CONTENT" u="UDM_FIELD_CONTENT - "></s><s c="UDM_FIELD_TITLE" u="UDM_FIELD_TITLE - "></s><s c="UDM_FIELD_KEYWORDS" u="UDM_FIELD_KEYWORDS - "></s><s c="UDM_FIELD_DESC" u="UDM_FIELD_DESC - "></s><s c="UDM_FIELD_DESCRIPTION" u="UDM_FIELD_DESCRIPTION - "></s><s c="UDM_FIELD_TEXT" u="UDM_FIELD_TEXT - "></s><s c="UDM_FIELD_SIZE" u="UDM_FIELD_SIZE - "></s><s c="UDM_FIELD_RATING" u="UDM_FIELD_RATING - "></s><s c="UDM_FIELD_SCORE" u="UDM_FIELD_SCORE - "></s><s c="UDM_FIELD_MODIFIED" u="UDM_FIELD_MODIFIED - "></s><s c="UDM_FIELD_ORDER" u="UDM_FIELD_ORDER - "></s><s c="UDM_FIELD_CRC" u="UDM_FIELD_CRC - "></s><s c="UDM_FIELD_CATEGORY" u="UDM_FIELD_CATEGORY - "></s><s c="UDM_FIELD_LANG" u="UDM_FIELD_LANG - "></s><s c="UDM_FIELD_CHARSET" u="UDM_FIELD_CHARSET - "></s><s c="UDM_PARAM_PAGE_SIZE" u="UDM_PARAM_PAGE_SIZE - "></s><s c="UDM_PARAM_PAGE_NUM" u="UDM_PARAM_PAGE_NUM - "></s><s c="UDM_PARAM_SEARCH_MODE" u="UDM_PARAM_SEARCH_MODE - "></s><s c="UDM_PARAM_CACHE_MODE" u="UDM_PARAM_CACHE_MODE - "></s><s c="UDM_PARAM_TRACK_MODE" u="UDM_PARAM_TRACK_MODE - "></s><s c="UDM_PARAM_PHRASE_MODE" u="UDM_PARAM_PHRASE_MODE - "></s><s c="UDM_PARAM_CHARSET" u="UDM_PARAM_CHARSET - "></s><s c="UDM_PARAM_LOCAL_CHARSET" u="UDM_PARAM_LOCAL_CHARSET - "></s><s c="UDM_PARAM_BROWSER_CHARSET" u="UDM_PARAM_BROWSER_CHARSET - "></s><s c="UDM_PARAM_STOPTABLE" u="UDM_PARAM_STOPTABLE - "></s><s c="UDM_PARAM_STOP_TABLE" u="UDM_PARAM_STOP_TABLE - "></s><s c="UDM_PARAM_STOPFILE" u="UDM_PARAM_STOPFILE - "></s><s c="UDM_PARAM_STOP_FILE" u="UDM_PARAM_STOP_FILE - "></s><s c="UDM_PARAM_WEIGHT_FACTOR" u="UDM_PARAM_WEIGHT_FACTOR - "></s><s c="UDM_PARAM_WORD_MATCH" u="UDM_PARAM_WORD_MATCH - "></s><s c="UDM_PARAM_MAX_WORD_LEN" u="UDM_PARAM_MAX_WORD_LEN - "></s><s c="UDM_PARAM_MAX_WORDLEN" u="UDM_PARAM_MAX_WORDLEN - "></s><s c="UDM_PARAM_MIN_WORD_LEN" u="UDM_PARAM_MIN_WORD_LEN - "></s><s c="UDM_PARAM_MIN_WORDLEN" u="UDM_PARAM_MIN_WORDLEN - "></s><s c="UDM_PARAM_ISPELL_PREFIXES" u="UDM_PARAM_ISPELL_PREFIXES - "></s><s c="UDM_PARAM_ISPELL_PREFIX" u="UDM_PARAM_ISPELL_PREFIX - "></s><s c="UDM_PARAM_PREFIXES" u="UDM_PARAM_PREFIXES - "></s><s c="UDM_PARAM_PREFIX" u="UDM_PARAM_PREFIX - "></s><s c="UDM_PARAM_CROSS_WORDS" u="UDM_PARAM_CROSS_WORDS - "></s><s c="UDM_PARAM_CROSSWORDS" u="UDM_PARAM_CROSSWORDS - "></s><s c="UDM_PARAM_VARDIR" u="UDM_PARAM_VARDIR - "></s><s c="UDM_PARAM_DATADIR" u="UDM_PARAM_DATADIR - "></s><s c="UDM_PARAM_HLBEG" u="UDM_PARAM_HLBEG - "></s><s c="UDM_PARAM_HLEND" u="UDM_PARAM_HLEND - "></s><s c="UDM_PARAM_SYNONYM" u="UDM_PARAM_SYNONYM - "></s><s c="UDM_PARAM_SEARCHD" u="UDM_PARAM_SEARCHD - "></s><s c="UDM_PARAM_QSTRING" u="UDM_PARAM_QSTRING - "></s><s c="UDM_PARAM_REMOTE_ADDR" u="UDM_PARAM_REMOTE_ADDR - "></s><s c="UDM_LIMIT_CAT" u="UDM_LIMIT_CAT - "></s><s c="UDM_LIMIT_URL" u="UDM_LIMIT_URL - "></s><s c="UDM_LIMIT_TAG" u="UDM_LIMIT_TAG - "></s><s c="UDM_LIMIT_LANG" u="UDM_LIMIT_LANG - "></s><s c="UDM_LIMIT_DATE" u="UDM_LIMIT_DATE - "></s><s c="UDM_PARAM_FOUND" u="UDM_PARAM_FOUND - "></s><s c="UDM_PARAM_NUM_ROWS" u="UDM_PARAM_NUM_ROWS - "></s><s c="UDM_PARAM_WORDINFO" u="UDM_PARAM_WORDINFO - "></s><s c="UDM_PARAM_WORD_INFO" u="UDM_PARAM_WORD_INFO - "></s><s c="UDM_PARAM_SEARCHTIME" u="UDM_PARAM_SEARCHTIME - "></s><s c="UDM_PARAM_SEARCH_TIME" u="UDM_PARAM_SEARCH_TIME - "></s><s c="UDM_PARAM_FIRST_DOC" u="UDM_PARAM_FIRST_DOC - "></s><s c="UDM_PARAM_LAST_DOC" u="UDM_PARAM_LAST_DOC - "></s><s c="UDM_MODE_ALL" u="UDM_MODE_ALL - "></s><s c="UDM_MODE_ANY" u="UDM_MODE_ANY - "></s><s c="UDM_MODE_BOOL" u="UDM_MODE_BOOL - "></s><s c="UDM_MODE_PHRASE" u="UDM_MODE_PHRASE - "></s><s c="UDM_CACHE_ENABLED" u="UDM_CACHE_ENABLED - "></s><s c="UDM_CACHE_DISABLED" u="UDM_CACHE_DISABLED - "></s><s c="UDM_TRACK_ENABLED" u="UDM_TRACK_ENABLED - "></s><s c="UDM_TRACK_DISABLED" u="UDM_TRACK_DISABLED - "></s><s c="UDM_PHRASE_ENABLED" u="UDM_PHRASE_ENABLED - "></s><s c="UDM_PHRASE_DISABLED" u="UDM_PHRASE_DISABLED - "></s><s c="UDM_CROSS_WORDS_ENABLED" u="UDM_CROSS_WORDS_ENABLED - "></s><s c="UDM_CROSSWORDS_ENABLED" u="UDM_CROSSWORDS_ENABLED - "></s><s c="UDM_CROSS_WORDS_DISABLED" u="UDM_CROSS_WORDS_DISABLED - "></s><s c="UDM_CROSSWORDS_DISABLED" u="UDM_CROSSWORDS_DISABLED - "></s><s c="UDM_PREFIXES_ENABLED" u="UDM_PREFIXES_ENABLED - "></s><s c="UDM_PREFIX_ENABLED" u="UDM_PREFIX_ENABLED - "></s><s c="UDM_ISPELL_PREFIXES_ENABLED" u="UDM_ISPELL_PREFIXES_ENABLED - "></s><s c="UDM_ISPELL_PREFIX_ENABLED" u="UDM_ISPELL_PREFIX_ENABLED - "></s><s c="UDM_PREFIXES_DISABLED" u="UDM_PREFIXES_DISABLED - "></s><s c="UDM_PREFIX_DISABLED" u="UDM_PREFIX_DISABLED - "></s><s c="UDM_ISPELL_PREFIXES_DISABLED" u="UDM_ISPELL_PREFIXES_DISABLED - "></s><s c="UDM_ISPELL_PREFIX_DISABLED" u="UDM_ISPELL_PREFIX_DISABLED - "></s><s c="UDM_ISPELL_TYPE_AFFIX" u="UDM_ISPELL_TYPE_AFFIX - "></s><s c="UDM_ISPELL_TYPE_SPELL" u="UDM_ISPELL_TYPE_SPELL - "></s><s c="UDM_ISPELL_TYPE_DB" u="UDM_ISPELL_TYPE_DB - "></s><s c="UDM_ISPELL_TYPE_SERVER" u="UDM_ISPELL_TYPE_SERVER - "></s><s c="UDM_MATCH_WORD" u="UDM_MATCH_WORD - "></s><s c="UDM_MATCH_BEGIN" u="UDM_MATCH_BEGIN - "></s><s c="UDM_MATCH_SUBSTR" u="UDM_MATCH_SUBSTR - "></s><s c="UDM_MATCH_END" u="UDM_MATCH_END - "></s><s c="MSQL_ASSOC" u="MSQL_ASSOC - "></s><s c="MSQL_NUM" u="MSQL_NUM - "></s><s c="MSQL_BOTH" u="MSQL_BOTH - "></s><s c="MSSQL_ASSOC" u="MSSQL_ASSOC - "></s><s c="MSSQL_NUM" u="MSSQL_NUM - "></s><s c="MSSQL_BOTH" u="MSSQL_BOTH - "></s><s c="SQLTEXT" u="SQLTEXT - "></s><s c="SQLVARCHAR" u="SQLVARCHAR - "></s><s c="SQLCHAR" u="SQLCHAR - "></s><s c="SQLINT1" u="SQLINT1 - "></s><s c="SQLINT2" u="SQLINT2 - "></s><s c="SQLINT4" u="SQLINT4 - "></s><s c="SQLBIT" u="SQLBIT - "></s><s c="SQLFLT8" u="SQLFLT8 - "></s><s c="MYSQL_CLIENT_COMPRESS" u="MYSQL_CLIENT_COMPRESS - ">Use compression protocol</s><s c="MYSQL_CLIENT_IGNORE_SPACE" u="MYSQL_CLIENT_IGNORE_SPACE - ">Allow space after function names</s><s c="MYSQL_CLIENT_INTERACTIVE" u="MYSQL_CLIENT_INTERACTIVE - ">Allow interactive_timeout seconds (instead of wait_timeout) of
        inactivity before closing the connection.</s><s c="MYSQL_ASSOC" u="MYSQL_ASSOC - ">Columns are returned into the array having the fieldname as the array
       index.</s><s c="MYSQL_BOTH" u="MYSQL_BOTH - ">Columns are returned into the array having both a numerical index
       and the fieldname as the array index.</s><s c="MYSQL_NUM" u="MYSQL_NUM - ">Columns are returned into the array having a numerical index to the
       fields. This index starts with 0, the first field in the result.</s><s c="MYSQLI_READ_DEFAULT_GROUP" u="MYSQLI_READ_DEFAULT_GROUP - ">Read options from the named group from `my.cnf' or the file specified with MYSQLI_READ_DEFAULT_FILE</s><s c="MYSQLI_READ_DEFAULT_FILE" u="MYSQLI_READ_DEFAULT_FILE - ">Read options from the named option file instead of from my.cnf</s><s c="MYSQLI_OPT_CONNECT_TIMEOUT" u="MYSQLI_OPT_CONNECT_TIMEOUT - ">Connect timeout in seconds</s><s c="MYSQLI_OPT_LOCAL_INFILE" u="MYSQLI_OPT_LOCAL_INFILE - ">Enables command LOAD LOCAL INFILE</s><s c="MYSQLI_INIT_COMMAND" u="MYSQLI_INIT_COMMAND - ">Command to execute when connecting to MySQL server. Will automatically be re-executed when reconnecting.</s><s c="MYSQLI_CLIENT_SSL" u="MYSQLI_CLIENT_SSL - ">Use SSL (encrypted protocol). This option should not be set by application programs;
       it is set internally in the MySQL client library</s><s c="MYSQLI_CLIENT_COMPRESS" u="MYSQLI_CLIENT_COMPRESS - ">Use compression protocol</s><s c="MYSQLI_CLIENT_INTERACTIVE" u="MYSQLI_CLIENT_INTERACTIVE - ">Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection. The client's session wait_timeout variable will be set to the value of the session interactive_timeout variable.</s><s c="MYSQLI_CLIENT_IGNORE_SPACE" u="MYSQLI_CLIENT_IGNORE_SPACE - ">Allow spaces after function names. Makes all functions names reserved words.</s><s c="MYSQLI_CLIENT_NO_SCHEMA" u="MYSQLI_CLIENT_NO_SCHEMA - ">Don't allow the db_name.tbl_name.col_name syntax.</s><s c="MYSQLI_CLIENT_MULTI_QUERIES" u="MYSQLI_CLIENT_MULTI_QUERIES - "></s><s c="MYSQLI_STORE_RESULT" u="MYSQLI_STORE_RESULT - ">For using buffered resultsets</s><s c="MYSQLI_USE_RESULT" u="MYSQLI_USE_RESULT - ">For using unbuffered resultsets</s><s c="MYSQLI_ASSOC" u="MYSQLI_ASSOC - ">Columns are returned into the array having the fieldname as the array index.</s><s c="MYSQLI_NUM" u="MYSQLI_NUM - ">Columns are returned into the array having an enumerated index.</s><s c="MYSQLI_BOTH" u="MYSQLI_BOTH - ">Columns are returned into the array having both a numerical index and the fieldname as the associative index.</s><s c="MYSQLI_NOT_NULL_FLAG" u="MYSQLI_NOT_NULL_FLAG - ">Indicates that a field is defined as NOT NULL</s><s c="MYSQLI_PRI_KEY_FLAG" u="MYSQLI_PRI_KEY_FLAG - ">Field is part of a primary index</s><s c="MYSQLI_UNIQUE_KEY_FLAG" u="MYSQLI_UNIQUE_KEY_FLAG - ">Field is part of an unique index.</s><s c="MYSQLI_MULTIPLE_KEY_FLAG" u="MYSQLI_MULTIPLE_KEY_FLAG - ">Field is part of an index.</s><s c="MYSQLI_BLOB_FLAG" u="MYSQLI_BLOB_FLAG - ">Field is defined as BLOB</s><s c="MYSQLI_UNSIGNED_FLAG" u="MYSQLI_UNSIGNED_FLAG - ">Field is defined as UNSIGNED</s><s c="MYSQLI_ZEROFILL_FLAG" u="MYSQLI_ZEROFILL_FLAG - ">Field is defined as ZEROFILL</s><s c="MYSQLI_AUTO_INCREMENT_FLAG" u="MYSQLI_AUTO_INCREMENT_FLAG - ">Field is defined as AUTO_INCREMENT</s><s c="MYSQLI_TIMESTAMP_FLAG" u="MYSQLI_TIMESTAMP_FLAG - ">Field is defined as TIMESTAMP</s><s c="MYSQLI_SET_FLAG" u="MYSQLI_SET_FLAG - ">Field is defined as SET</s><s c="MYSQLI_NUM_FLAG" u="MYSQLI_NUM_FLAG - ">Field is defined as NUMERIC</s><s c="MYSQLI_PART_KEY_FLAG" u="MYSQLI_PART_KEY_FLAG - ">Field is part of an multi-index</s><s c="MYSQLI_GROUP_FLAG" u="MYSQLI_GROUP_FLAG - ">Field is part of GROUP BY</s><s c="MYSQLI_TYPE_DECIMAL" u="MYSQLI_TYPE_DECIMAL - ">Field is defined as DECIMAL</s><s c="MYSQLI_TYPE_TINY" u="MYSQLI_TYPE_TINY - ">Field is defined as TINYINT</s><s c="MYSQLI_TYPE_SHORT" u="MYSQLI_TYPE_SHORT - ">Field is defined as INT</s><s c="MYSQLI_TYPE_LONG" u="MYSQLI_TYPE_LONG - ">Field is defined as INT</s><s c="MYSQLI_TYPE_FLOAT" u="MYSQLI_TYPE_FLOAT - ">Field is defined as FLOAT</s><s c="MYSQLI_TYPE_DOUBLE" u="MYSQLI_TYPE_DOUBLE - ">Field is defined as DOUBLE</s><s c="MYSQLI_TYPE_NULL" u="MYSQLI_TYPE_NULL - ">Field is defined as DEFAULT NULL</s><s c="MYSQLI_TYPE_TIMESTAMP" u="MYSQLI_TYPE_TIMESTAMP - ">Field is defined as TIMESTAMP</s><s c="MYSQLI_TYPE_LONGLONG" u="MYSQLI_TYPE_LONGLONG - ">Field is defined as BIGINT</s><s c="MYSQLI_TYPE_INT24" u="MYSQLI_TYPE_INT24 - ">Field is defined as MEDIUMINT</s><s c="MYSQLI_TYPE_DATE" u="MYSQLI_TYPE_DATE - ">Field is defined as DATE</s><s c="MYSQLI_TYPE_TIME" u="MYSQLI_TYPE_TIME - ">Field is defined as TIME</s><s c="MYSQLI_TYPE_DATETIME" u="MYSQLI_TYPE_DATETIME - ">Field is defined as DATETIME</s><s c="MYSQLI_TYPE_YEAR" u="MYSQLI_TYPE_YEAR - ">Field is defined as YEAR</s><s c="MYSQLI_TYPE_NEWDATE" u="MYSQLI_TYPE_NEWDATE - ">Field is defined as DATE</s><s c="MYSQLI_TYPE_ENUM" u="MYSQLI_TYPE_ENUM - ">Field is defined as ENUM</s><s c="MYSQLI_TYPE_SET" u="MYSQLI_TYPE_SET - ">Field is defined as SET</s><s c="MYSQLI_TYPE_TINY_BLOB" u="MYSQLI_TYPE_TINY_BLOB - ">Field is defined as TINYBLOB</s><s c="MYSQLI_TYPE_MEDIUM_BLOB" u="MYSQLI_TYPE_MEDIUM_BLOB - ">Field is defined as MEDIUMBLOB</s><s c="MYSQLI_TYPE_LONG_BLOB" u="MYSQLI_TYPE_LONG_BLOB - ">Field is defined as LONGBLOB</s><s c="MYSQLI_TYPE_BLOB" u="MYSQLI_TYPE_BLOB - ">Field is defined as BLOB</s><s c="MYSQLI_TYPE_STRING" u="MYSQLI_TYPE_STRING - ">Field is defined as VARCHAR</s><s c="MYSQLI_TYPE_CHAR" u="MYSQLI_TYPE_CHAR - ">Field is defined as CHAR</s><s c="MYSQLI_TYPE_GEOMETRY" u="MYSQLI_TYPE_GEOMETRY - ">Field is defined as GEOMETRY</s><s c="MYSQLI_NEED_DATA" u="MYSQLI_NEED_DATA - ">More data available for bind variable</s><s c="MYSQLI_NO_DATA" u="MYSQLI_NO_DATA - ">No more data available for bind variable</s><s c="NCURSES_COLOR_BLACK" u="NCURSES_COLOR_BLACK - ">no color (black)</s><s c="NCURSES_COLOR_WHITE" u="NCURSES_COLOR_WHITE - ">white</s><s c="NCURSES_COLOR_RED" u="NCURSES_COLOR_RED - ">red - supported when terminal is in color mode</s><s c="NCURSES_COLOR_GREEN" u="NCURSES_COLOR_GREEN - ">green - supported when terminal is in color mod</s><s c="NCURSES_COLOR_YELLOW" u="NCURSES_COLOR_YELLOW - ">yellow - supported when terminal is in color mod</s><s c="NCURSES_COLOR_BLUE" u="NCURSES_COLOR_BLUE - ">blue - supported when terminal is in color mod</s><s c="NCURSES_COLOR_CYAN" u="NCURSES_COLOR_CYAN - ">cyan - supported when terminal is in color mod</s><s c="NCURSES_COLOR_MAGENTA" u="NCURSES_COLOR_MAGENTA - ">magenta - supported when terminal is in color mod</s><s c="NCURSES_KEY_DOWN" u="NCURSES_KEY_DOWN - ">down arrow</s><s c="NCURSES_KEY_UP" u="NCURSES_KEY_UP - ">up arrow</s><s c="NCURSES_KEY_LEFT" u="NCURSES_KEY_LEFT - ">left arrow</s><s c="NCURSES_KEY_RIGHT" u="NCURSES_KEY_RIGHT - ">right arrow</s><s c="NCURSES_KEY_HOME" u="NCURSES_KEY_HOME - ">home key (upward+left arrow)</s><s c="NCURSES_KEY_BACKSPACE" u="NCURSES_KEY_BACKSPACE - ">backspace</s><s c="NCURSES_KEY_DL" u="NCURSES_KEY_DL - ">delete line</s><s c="NCURSES_KEY_IL" u="NCURSES_KEY_IL - ">insert line</s><s c="NCURSES_KEY_DC" u="NCURSES_KEY_DC - ">delete character</s><s c="NCURSES_KEY_IC" u="NCURSES_KEY_IC - ">insert char or enter insert mode</s><s c="NCURSES_KEY_EIC" u="NCURSES_KEY_EIC - ">exit insert char mode</s><s c="NCURSES_KEY_CLEAR" u="NCURSES_KEY_CLEAR - ">clear screen</s><s c="NCURSES_KEY_EOS" u="NCURSES_KEY_EOS - ">clear to end of screen</s><s c="NCURSES_KEY_EOL" u="NCURSES_KEY_EOL - ">clear to end of line</s><s c="NCURSES_KEY_SF" u="NCURSES_KEY_SF - ">scroll one line forward</s><s c="NCURSES_KEY_SR" u="NCURSES_KEY_SR - ">scroll one line backward</s><s c="NCURSES_KEY_NPAGE" u="NCURSES_KEY_NPAGE - ">next page</s><s c="NCURSES_KEY_PPAGE" u="NCURSES_KEY_PPAGE - ">previous page</s><s c="NCURSES_KEY_STAB" u="NCURSES_KEY_STAB - ">set tab</s><s c="NCURSES_KEY_CTAB" u="NCURSES_KEY_CTAB - ">clear tab</s><s c="NCURSES_KEY_CATAB" u="NCURSES_KEY_CATAB - ">clear all tabs</s><s c="NCURSES_KEY_SRESET" u="NCURSES_KEY_SRESET - ">soft (partial) reset</s><s c="NCURSES_KEY_RESET" u="NCURSES_KEY_RESET - ">reset or hard reset</s><s c="NCURSES_KEY_PRINT" u="NCURSES_KEY_PRINT - ">print</s><s c="NCURSES_KEY_LL" u="NCURSES_KEY_LL - ">lower left</s><s c="NCURSES_KEY_A1" u="NCURSES_KEY_A1 - ">upper left of keypad</s><s c="NCURSES_KEY_A3" u="NCURSES_KEY_A3 - ">upper right of keypad</s><s c="NCURSES_KEY_B2" u="NCURSES_KEY_B2 - ">center of keypad</s><s c="NCURSES_KEY_C1" u="NCURSES_KEY_C1 - ">lower left of keypad</s><s c="NCURSES_KEY_C3" u="NCURSES_KEY_C3 - ">lower right of keypad</s><s c="NCURSES_KEY_BTAB" u="NCURSES_KEY_BTAB - ">back tab</s><s c="NCURSES_KEY_BEG" u="NCURSES_KEY_BEG - ">beginning</s><s c="NCURSES_KEY_CANCEL" u="NCURSES_KEY_CANCEL - ">cancel</s><s c="NCURSES_KEY_CLOSE" u="NCURSES_KEY_CLOSE - ">close</s><s c="NCURSES_KEY_COMMAND" u="NCURSES_KEY_COMMAND - ">cmd (command)</s><s c="NCURSES_KEY_COPY" u="NCURSES_KEY_COPY - ">copy</s><s c="NCURSES_KEY_CREATE" u="NCURSES_KEY_CREATE - ">create</s><s c="NCURSES_KEY_END" u="NCURSES_KEY_END - ">end</s><s c="NCURSES_KEY_EXIT" u="NCURSES_KEY_EXIT - ">exit</s><s c="NCURSES_KEY_FIND" u="NCURSES_KEY_FIND - ">find</s><s c="NCURSES_KEY_HELP" u="NCURSES_KEY_HELP - ">help</s><s c="NCURSES_KEY_MARK" u="NCURSES_KEY_MARK - ">mark</s><s c="NCURSES_KEY_MESSAGE" u="NCURSES_KEY_MESSAGE - ">message</s><s c="NCURSES_KEY_MOVE" u="NCURSES_KEY_MOVE - ">move</s><s c="NCURSES_KEY_NEXT" u="NCURSES_KEY_NEXT - ">next</s><s c="NCURSES_KEY_OPEN" u="NCURSES_KEY_OPEN - ">open</s><s c="NCURSES_KEY_OPTIONS" u="NCURSES_KEY_OPTIONS - ">options</s><s c="NCURSES_KEY_PREVIOUS" u="NCURSES_KEY_PREVIOUS - ">previous</s><s c="NCURSES_KEY_REDO" u="NCURSES_KEY_REDO - ">redo</s><s c="NCURSES_KEY_REFERENCE" u="NCURSES_KEY_REFERENCE - ">ref (reference)</s><s c="NCURSES_KEY_REFRESH" u="NCURSES_KEY_REFRESH - ">refresh</s><s c="NCURSES_KEY_REPLACE" u="NCURSES_KEY_REPLACE - ">replace</s><s c="NCURSES_KEY_RESTART" u="NCURSES_KEY_RESTART - ">restart</s><s c="NCURSES_KEY_RESUME" u="NCURSES_KEY_RESUME - ">resume</s><s c="NCURSES_KEY_SAVE" u="NCURSES_KEY_SAVE - ">save</s><s c="NCURSES_KEY_SBEG" u="NCURSES_KEY_SBEG - ">shiftet beg (beginning)</s><s c="NCURSES_KEY_SCANCEL" u="NCURSES_KEY_SCANCEL - ">shifted cancel</s><s c="NCURSES_KEY_SCOMMAND" u="NCURSES_KEY_SCOMMAND - ">shifted command</s><s c="NCURSES_KEY_SCOPY" u="NCURSES_KEY_SCOPY - ">shifted copy</s><s c="NCURSES_KEY_SCREATE" u="NCURSES_KEY_SCREATE - ">shifted create</s><s c="NCURSES_KEY_SDC" u="NCURSES_KEY_SDC - ">shifted delete char</s><s c="NCURSES_KEY_SDL" u="NCURSES_KEY_SDL - ">shifted delete line</s><s c="NCURSES_KEY_SELECT" u="NCURSES_KEY_SELECT - ">select</s><s c="NCURSES_KEY_SEND" u="NCURSES_KEY_SEND - ">shifted end</s><s c="NCURSES_KEY_SEOL" u="NCURSES_KEY_SEOL - ">shifted end of line</s><s c="NCURSES_KEY_SEXIT" u="NCURSES_KEY_SEXIT - ">shifted exit</s><s c="NCURSES_KEY_SFIND" u="NCURSES_KEY_SFIND - ">shifted find</s><s c="NCURSES_KEY_SHELP" u="NCURSES_KEY_SHELP - ">shifted help</s><s c="NCURSES_KEY_SHOME" u="NCURSES_KEY_SHOME - ">shifted home</s><s c="NCURSES_KEY_SIC" u="NCURSES_KEY_SIC - ">shifted input</s><s c="NCURSES_KEY_SLEFT" u="NCURSES_KEY_SLEFT - ">shifted left arrow</s><s c="NCURSES_KEY_SMESSAGE" u="NCURSES_KEY_SMESSAGE - ">shifted message</s><s c="NCURSES_KEY_SMOVE" u="NCURSES_KEY_SMOVE - ">shifted move</s><s c="NCURSES_KEY_SNEXT" u="NCURSES_KEY_SNEXT - ">shifted next</s><s c="NCURSES_KEY_SOPTIONS" u="NCURSES_KEY_SOPTIONS - ">shifted options</s><s c="NCURSES_KEY_SPREVIOUS" u="NCURSES_KEY_SPREVIOUS - ">shifted previous</s><s c="NCURSES_KEY_SPRINT" u="NCURSES_KEY_SPRINT - ">shifted print</s><s c="NCURSES_KEY_SREDO" u="NCURSES_KEY_SREDO - ">shifted redo</s><s c="NCURSES_KEY_SREPLACE" u="NCURSES_KEY_SREPLACE - ">shifted replace</s><s c="NCURSES_KEY_SRIGHT" u="NCURSES_KEY_SRIGHT - ">shifted right arrow</s><s c="NCURSES_KEY_SRSUME" u="NCURSES_KEY_SRSUME - ">shifted resume</s><s c="NCURSES_KEY_SSAVE" u="NCURSES_KEY_SSAVE - ">shifted save</s><s c="NCURSES_KEY_SSUSPEND" u="NCURSES_KEY_SSUSPEND - ">shifted suspend</s><s c="NCURSES_KEY_UNDO" u="NCURSES_KEY_UNDO - ">undo</s><s c="NCURSES_KEY_MOUSE" u="NCURSES_KEY_MOUSE - ">mouse event has occurred</s><s c="NCURSES_KEY_MAX" u="NCURSES_KEY_MAX - ">maximum key value</s><s c="NCURSES_BUTTON_CTRL" u="NCURSES_BUTTON_CTRL - ">ctrl pressed during click</s><s c="NCURSES_BUTTON_SHIFT" u="NCURSES_BUTTON_SHIFT - ">shift pressed during click</s><s c="NCURSES_BUTTON_ALT" u="NCURSES_BUTTON_ALT - ">alt pressed during click</s><s c="NCURSES_ALL_MOUSE_EVENTS" u="NCURSES_ALL_MOUSE_EVENTS - ">report all mouse events</s><s c="NCURSES_REPORT_MOUSE_POSITION" u="NCURSES_REPORT_MOUSE_POSITION - ">report mouse position</s><s c="LOG_CONS" u="LOG_CONS - ">if there is an error while sending data to the system logger,
       write directly to the system console</s><s c="LOG_NDELAY" u="LOG_NDELAY - ">open the connection to the logger immediately</s><s c="LOG_ODELAY" u="LOG_ODELAY - ">(default) delay opening the connection until the first
       message is logged</s><s c="LOG_NOWAIT" u="LOG_NOWAIT - "></s><s c="LOG_PERROR" u="LOG_PERROR - ">print log message also to standard error</s><s c="LOG_PID" u="LOG_PID - ">include PID with each message</s><s c="LOG_AUTH" u="LOG_AUTH - ">security/authorization messages (use LOG_AUTHPRIV instead
       in systems where that constant is defined)</s><s c="LOG_AUTHPRIV" u="LOG_AUTHPRIV - ">security/authorization messages (private)</s><s c="LOG_CRON" u="LOG_CRON - ">clock daemon (cron and at)</s><s c="LOG_DAEMON" u="LOG_DAEMON - ">other system daemons</s><s c="LOG_KERN" u="LOG_KERN - ">kernel messages</s><s c="LOG_LPR" u="LOG_LPR - ">line printer subsystem</s><s c="LOG_MAIL" u="LOG_MAIL - ">mail subsystem</s><s c="LOG_NEWS" u="LOG_NEWS - ">USENET news subsystem</s><s c="LOG_SYSLOG" u="LOG_SYSLOG - ">messages generated internally by syslogd</s><s c="LOG_USER" u="LOG_USER - ">generic user-level messages</s><s c="LOG_UUCP" u="LOG_UUCP - ">UUCP subsystem</s><s c="LOG_EMERG" u="LOG_EMERG - ">system is unusable</s><s c="LOG_ALERT" u="LOG_ALERT - ">action must be taken immediately</s><s c="LOG_CRIT" u="LOG_CRIT - ">critical conditions</s><s c="LOG_ERR" u="LOG_ERR - ">error conditions</s><s c="LOG_WARNING" u="LOG_WARNING - ">warning conditions</s><s c="LOG_NOTICE" u="LOG_NOTICE - ">normal, but significant, condition</s><s c="LOG_INFO" u="LOG_INFO - ">informational message</s><s c="LOG_DEBUG" u="LOG_DEBUG - ">debug-level message</s><s c="DNS_A" u="DNS_A - ">IPv4 Address Resource</s><s c="DNS_MX" u="DNS_MX - ">Mail Exchanger Resource</s><s c="DNS_CNAME" u="DNS_CNAME - ">Alias (Canonical Name) Resource</s><s c="DNS_NS" u="DNS_NS - ">Authoritative Name Server Resource</s><s c="DNS_PTR" u="DNS_PTR - ">Pointer Resource</s><s c="DNS_HINFO" u="DNS_HINFO - ">Host Info Resource (See IANA's
        Operating System Names
        for the meaning of these values)</s><s c="DNS_SOA" u="DNS_SOA - ">Start of Authority Resource</s><s c="DNS_TXT" u="DNS_TXT - ">Text Resource</s><s c="DNS_ANY" u="DNS_ANY - ">Any Resource Record.  On most systems
        this returns all resource records, however
        it should not be counted upon for critical
	uses.  Try DNS_ALL instead.</s><s c="DNS_AAAA" u="DNS_AAAA - ">IPv6 Address Resource</s><s c="DNS_ALL" u="DNS_ALL - ">Iteratively query the name server for
        each available record type.</s><s c="YPERR_BADARGS" u="YPERR_BADARGS - "></s><s c="YPERR_BADDB" u="YPERR_BADDB - "></s><s c="YPERR_BUSY" u="YPERR_BUSY - "></s><s c="YPERR_DOMAIN" u="YPERR_DOMAIN - "></s><s c="YPERR_KEY" u="YPERR_KEY - "></s><s c="YPERR_MAP" u="YPERR_MAP - "></s><s c="YPERR_NODOM" u="YPERR_NODOM - "></s><s c="YPERR_NOMORE" u="YPERR_NOMORE - "></s><s c="YPERR_PMAP" u="YPERR_PMAP - "></s><s c="YPERR_RESRC" u="YPERR_RESRC - "></s><s c="YPERR_RPC" u="YPERR_RPC - "></s><s c="YPERR_YPBIND" u="YPERR_YPBIND - "></s><s c="YPERR_YPERR" u="YPERR_YPERR - "></s><s c="YPERR_YPSERV" u="YPERR_YPSERV - "></s><s c="YPERR_VERS" u="YPERR_VERS - "></s><s c="OCI_DEFAULT" u="OCI_DEFAULT - "></s><s c="OCI_DESCRIBE_ONLY" u="OCI_DESCRIBE_ONLY - "></s><s c="OCI_COMMIT_ON_SUCCESS" u="OCI_COMMIT_ON_SUCCESS - "></s><s c="OCI_EXACT_FETCH" u="OCI_EXACT_FETCH - "></s><s c="OCI_SYSDATE" u="OCI_SYSDATE - "></s><s c="OCI_B_BFILE" u="OCI_B_BFILE - "></s><s c="OCI_B_CFILEE" u="OCI_B_CFILEE - "></s><s c="OCI_B_CLOB" u="OCI_B_CLOB - "></s><s c="OCI_B_BLOB" u="OCI_B_BLOB - "></s><s c="OCI_B_ROWID" u="OCI_B_ROWID - "></s><s c="OCI_B_CURSOR" u="OCI_B_CURSOR - "></s><s c="OCI_B_NTY" u="OCI_B_NTY - "></s><s c="OCI_B_BIN" u="OCI_B_BIN - "></s><s c="SQLT_BFILEE" u="SQLT_BFILEE - "></s><s c="SQLT_CFILEE" u="SQLT_CFILEE - "></s><s c="SQLT_CLOB" u="SQLT_CLOB - "></s><s c="SQLT_BLOB" u="SQLT_BLOB - "></s><s c="SQLT_RDD" u="SQLT_RDD - "></s><s c="SQLT_NTY" u="SQLT_NTY - "></s><s c="OCI_FETCHSTATEMENT_BY_COLUMN" u="OCI_FETCHSTATEMENT_BY_COLUMN - "></s><s c="OCI_FETCHSTATEMENT_BY_ROW" u="OCI_FETCHSTATEMENT_BY_ROW - "></s><s c="OCI_ASSOC" u="OCI_ASSOC - "></s><s c="OCI_NUM" u="OCI_NUM - "></s><s c="OCI_BOTH" u="OCI_BOTH - "></s><s c="OCI_RETURN_NULLS" u="OCI_RETURN_NULLS - "></s><s c="OCI_RETURN_LOBS" u="OCI_RETURN_LOBS - "></s><s c="OCI_DTYPE_FILE" u="OCI_DTYPE_FILE - "></s><s c="OCI_DTYPE_LOB" u="OCI_DTYPE_LOB - "></s><s c="OCI_DTYPE_ROWID" u="OCI_DTYPE_ROWID - "></s><s c="OCI_D_FILE" u="OCI_D_FILE - "></s><s c="OCI_D_LOB" u="OCI_D_LOB - "></s><s c="OCI_D_ROWID" u="OCI_D_ROWID - "></s><s c="PKCS7_TEXT" u="PKCS7_TEXT - ">Adds text/plain content type headers to encrypted/signed
         message. If decrypting or verifying, it strips those headers from
         the output - if the decrypted or verified message is not of MIME type
         text/plain then an error will occur.</s><s c="PKCS7_BINARY" u="PKCS7_BINARY - ">Normally the input message is converted to "canonical" format
         which is effectively using CR and LF as end of line: as required by
         the S/MIME specification.  When this options is present, no
         translation occurs.  This is useful when handling binary data which
         may not be in MIME format.</s><s c="PKCS7_NOINTERN" u="PKCS7_NOINTERN - ">When verifying a message, certificates (if
           any) included in the message are normally searched for the
           signing certificate. With this option only the
           certificates specified in the extracerts
           parameter of openssl_pkcs7_verify are
           used.  The supplied certificates can still be used as
           untrusted CAs however.</s><s c="PKCS7_NOVERIFY" u="PKCS7_NOVERIFY - ">Do not verify the signers certificate of a signed
         message.</s><s c="PKCS7_NOCHAIN" u="PKCS7_NOCHAIN - ">Do not chain verification of signers certificates: that is
         don't use the certificates in the signed message as untrusted CAs.</s><s c="PKCS7_NOCERTS" u="PKCS7_NOCERTS - ">When signing a message the signer's certificate is normally
         included - with this option it is excluded.  This will reduce the
         size of the signed message but the verifier must have a copy of the
         signers certificate available locally (passed using the
         extracerts to
         openssl_pkcs7_verify for example).</s><s c="PKCS7_NOATTR" u="PKCS7_NOATTR - ">Normally when a message is signed, a set of attributes are
         included which include the signing time and the supported symmetric
         algorithms.  With this option they are not included.</s><s c="PKCS7_DETACHED" u="PKCS7_DETACHED - ">When signing a message, use cleartext signing with the MIME
         type multipart/signed.  This is the default
         if you do not specify any flags to
         openssl_pkcs7_sign.
         If you turn this option off, the message will be signed using
         opaque signing, which is more resistant to translation by mail relays
         but cannot be read by mail agents that do not support S/MIME.</s><s c="PKCS7_NOSIGS" u="PKCS7_NOSIGS - ">Don't try and verify the signatures on a message</s><s c="ORA_BIND_INOUT" u="ORA_BIND_INOUT - "></s><s c="ORA_BIND_IN" u="ORA_BIND_IN - "></s><s c="ORA_BIND_OUT" u="ORA_BIND_OUT - "></s><s c="ORA_FETCHINTO_ASSOC" u="ORA_FETCHINTO_ASSOC - "></s><s c="ORA_FETCHINTO_NULLS" u="ORA_FETCHINTO_NULLS - "></s><s c="WNOHANG" u="WNOHANG - "></s><s c="WUNTRACED" u="WUNTRACED - "></s><s c="SIG_IGN" u="SIG_IGN - "></s><s c="SIG_DFL" u="SIG_DFL - "></s><s c="SIG_ERR" u="SIG_ERR - "></s><s c="SIGHUP" u="SIGHUP - "></s><s c="SIGINT" u="SIGINT - "></s><s c="SIGQUIT" u="SIGQUIT - "></s><s c="SIGILL" u="SIGILL - "></s><s c="SIGTRAP" u="SIGTRAP - "></s><s c="SIGABRT" u="SIGABRT - "></s><s c="SIGIOT" u="SIGIOT - "></s><s c="SIGBUS" u="SIGBUS - "></s><s c="SIGFPE" u="SIGFPE - "></s><s c="SIGKILL" u="SIGKILL - "></s><s c="SIGUSR1" u="SIGUSR1 - "></s><s c="SIGSEGV" u="SIGSEGV - "></s><s c="SIGUSR2" u="SIGUSR2 - "></s><s c="SIGPIPE" u="SIGPIPE - "></s><s c="SIGALRM" u="SIGALRM - "></s><s c="SIGTERM" u="SIGTERM - "></s><s c="SIGSTKFLT" u="SIGSTKFLT - "></s><s c="SIGCLD" u="SIGCLD - "></s><s c="SIGCHLD" u="SIGCHLD - "></s><s c="SIGCONT" u="SIGCONT - "></s><s c="SIGSTOP" u="SIGSTOP - "></s><s c="SIGTSTP" u="SIGTSTP - "></s><s c="SIGTTIN" u="SIGTTIN - "></s><s c="SIGTTOU" u="SIGTTOU - "></s><s c="SIGURG" u="SIGURG - "></s><s c="SIGXCPU" u="SIGXCPU - "></s><s c="SIGXFSZ" u="SIGXFSZ - "></s><s c="SIGVTALRM" u="SIGVTALRM - "></s><s c="SIGPROF" u="SIGPROF - "></s><s c="SIGWINCH" u="SIGWINCH - "></s><s c="SIGPOLL" u="SIGPOLL - "></s><s c="SIGIO" u="SIGIO - "></s><s c="SIGPWR" u="SIGPWR - "></s><s c="SIGSYS" u="SIGSYS - "></s><s c="SIGBABY" u="SIGBABY - "></s><s c="PREG_PATTERN_ORDER" u="PREG_PATTERN_ORDER - ">Orders results so that $matches[0] is an array of full pattern
      matches, $matches[1] is an array of strings matched by the first
      parenthesized subpattern, and so on. This flag is only used with
      preg_match_all.</s><s c="PREG_SET_ORDER" u="PREG_SET_ORDER - ">Orders results so that $matches[0] is an array of first set of
      matches, $matches[1] is an array of second set of matches, and so
      on. This flag is only used with preg_match_all.</s><s c="PREG_OFFSET_CAPTURE" u="PREG_OFFSET_CAPTURE - ">See the description of
      PREG_SPLIT_OFFSET_CAPTURE.  This flag is
      available since PHP 4.3.0.</s><s c="PREG_SPLIT_NO_EMPTY" u="PREG_SPLIT_NO_EMPTY - ">This flag tells preg_split to return only non-empty
      pieces.</s><s c="PREG_SPLIT_DELIM_CAPTURE" u="PREG_SPLIT_DELIM_CAPTURE - ">This flag tells preg_split to capture
      parenthesized expression in the delimiter pattern as well. This flag
      is available since PHP 4.0.5.</s><s c="PREG_SPLIT_OFFSET_CAPTURE" u="PREG_SPLIT_OFFSET_CAPTURE - ">If this flag is set, for every occurring match the appendant string
      offset will also be returned. Note that this changes the return
      values in an array where every element is an array consisting of the
      matched string at offset 0 and its string offset within subject at
      offset 1. This flag is available since PHP 4.3.0
      and is only used for preg_split.</s><s c="PGSQL_ASSOC" u="PGSQL_ASSOC - "></s><s c="PGSQL_NUM" u="PGSQL_NUM - "></s><s c="PGSQL_BOTH" u="PGSQL_BOTH - "></s><s c="PGSQL_CONNECTION_BAD" u="PGSQL_CONNECTION_BAD - "></s><s c="PGSQL_CONNECTION_OK" u="PGSQL_CONNECTION_OK - "></s><s c="PGSQL_SEEK_SET" u="PGSQL_SEEK_SET - "></s><s c="PGSQL_SEEK_CUR" u="PGSQL_SEEK_CUR - "></s><s c="PGSQL_SEEK_END" u="PGSQL_SEEK_END - "></s><s c="PGSQL_ESCAPE_STRING" u="PGSQL_ESCAPE_STRING - "></s><s c="PGSQL_ESCAPE_BYTEA" u="PGSQL_ESCAPE_BYTEA - "></s><s c="PGSQL_EMPTY_QUERY" u="PGSQL_EMPTY_QUERY - "></s><s c="PGSQL_COMMAND_OK" u="PGSQL_COMMAND_OK - "></s><s c="PGSQL_TUPLES_OK" u="PGSQL_TUPLES_OK - "></s><s c="PGSQL_COPY_OUT" u="PGSQL_COPY_OUT - "></s><s c="PGSQL_COPY_IN" u="PGSQL_COPY_IN - "></s><s c="PGSQL_BAD_RESPONSE" u="PGSQL_BAD_RESPONSE - "></s><s c="PGSQL_NONFATAL_ERROR" u="PGSQL_NONFATAL_ERROR - "></s><s c="PGSQL_FATAL_ERROR" u="PGSQL_FATAL_ERROR - "></s><s c="PSPELL_FAST" u="PSPELL_FAST - "></s><s c="PSPELL_NORMAL" u="PSPELL_NORMAL - "></s><s c="PSPELL_BAD_SPELLERS" u="PSPELL_BAD_SPELLERS - "></s><s c="PSPELL_RUN_TOGETHER" u="PSPELL_RUN_TOGETHER - "></s><s c="MSG_IPC_NOWAIT" u="MSG_IPC_NOWAIT - ">integer</s><s c="MSG_NOERROR" u="MSG_NOERROR - ">integer</s><s c="MSG_EXCEPT" u="MSG_EXCEPT - ">integer</s><s c="SID" u="SID - "></s><s c="SNMP_VALUE_LIBRARY" u="SNMP_VALUE_LIBRARY - "></s><s c="SNMP_VALUE_PLAIN" u="SNMP_VALUE_PLAIN - "></s><s c="SNMP_VALUE_OBJECT" u="SNMP_VALUE_OBJECT - "></s><s c="SNMP_BIT_STR" u="SNMP_BIT_STR - "></s><s c="SNMP_OCTET_STR" u="SNMP_OCTET_STR - "></s><s c="SNMP_OPAQUE" u="SNMP_OPAQUE - "></s><s c="SNMP_NULL" u="SNMP_NULL - "></s><s c="SNMP_OBJECT_ID" u="SNMP_OBJECT_ID - "></s><s c="SNMP_IPADDRESS" u="SNMP_IPADDRESS - "></s><s c="SNMP_COUNTER" u="SNMP_COUNTER - "></s><s c="SNMP_UNSIGNED" u="SNMP_UNSIGNED - "></s><s c="SNMP_TIMETICKS" u="SNMP_TIMETICKS - "></s><s c="SNMP_UINTEGER" u="SNMP_UINTEGER - "></s><s c="SNMP_INTEGER" u="SNMP_INTEGER - "></s><s c="SNMP_COUNTER64" u="SNMP_COUNTER64 - "></s><s c="SOAP_1_1" u="SOAP_1_1 - "></s><s c="SOAP_1_2" u="SOAP_1_2 - "></s><s c="SOAP_PERSISTENCE_SESSION" u="SOAP_PERSISTENCE_SESSION - "></s><s c="SOAP_PERSISTENCE_REQUEST" u="SOAP_PERSISTENCE_REQUEST - "></s><s c="SOAP_FUNCTIONS_ALL" u="SOAP_FUNCTIONS_ALL - "></s><s c="SOAP_ENCODED" u="SOAP_ENCODED - "></s><s c="SOAP_LITERAL" u="SOAP_LITERAL - "></s><s c="SOAP_RPC" u="SOAP_RPC - "></s><s c="SOAP_DOCUMENT" u="SOAP_DOCUMENT - "></s><s c="SOAP_ACTOR_NEXT" u="SOAP_ACTOR_NEXT - "></s><s c="SOAP_ACTOR_NONE" u="SOAP_ACTOR_NONE - "></s><s c="SOAP_ACTOR_UNLIMATERECEIVER" u="SOAP_ACTOR_UNLIMATERECEIVER - "></s><s c="UNKNOWN_TYPE" u="UNKNOWN_TYPE - "></s><s c="XSD_STRING" u="XSD_STRING - "></s><s c="XSD_BOOLEAN" u="XSD_BOOLEAN - "></s><s c="XSD_DECIMAL" u="XSD_DECIMAL - "></s><s c="XSD_FLOAT" u="XSD_FLOAT - "></s><s c="XSD_DOUBLE" u="XSD_DOUBLE - "></s><s c="XSD_DURATION" u="XSD_DURATION - "></s><s c="XSD_DATETIME" u="XSD_DATETIME - "></s><s c="XSD_TIME" u="XSD_TIME - "></s><s c="XSD_DATE" u="XSD_DATE - "></s><s c="XSD_GYEARMONTH" u="XSD_GYEARMONTH - "></s><s c="XSD_GYEAR" u="XSD_GYEAR - "></s><s c="XSD_GMONTHDAY" u="XSD_GMONTHDAY - "></s><s c="XSD_GDAY" u="XSD_GDAY - "></s><s c="XSD_GMONTH" u="XSD_GMONTH - "></s><s c="XSD_HEXBINARY" u="XSD_HEXBINARY - "></s><s c="XSD_BASE64BINARY" u="XSD_BASE64BINARY - "></s><s c="XSD_ANYURI" u="XSD_ANYURI - "></s><s c="XSD_QNAME" u="XSD_QNAME - "></s><s c="XSD_NOTATION" u="XSD_NOTATION - "></s><s c="XSD_NORMALIZEDSTRING" u="XSD_NORMALIZEDSTRING - "></s><s c="XSD_TOKEN" u="XSD_TOKEN - "></s><s c="XSD_LANGUAGE" u="XSD_LANGUAGE - "></s><s c="XSD_NMTOKEN" u="XSD_NMTOKEN - "></s><s c="XSD_NAME" u="XSD_NAME - "></s><s c="XSD_NCNAME" u="XSD_NCNAME - "></s><s c="XSD_ID" u="XSD_ID - "></s><s c="XSD_IDREF" u="XSD_IDREF - "></s><s c="XSD_IDREFS" u="XSD_IDREFS - "></s><s c="XSD_ENTITY" u="XSD_ENTITY - "></s><s c="XSD_ENTITIES" u="XSD_ENTITIES - "></s><s c="XSD_INTEGER" u="XSD_INTEGER - "></s><s c="XSD_NONPOSITIVEINTEGER" u="XSD_NONPOSITIVEINTEGER - "></s><s c="XSD_NEGATIVEINTEGER" u="XSD_NEGATIVEINTEGER - "></s><s c="XSD_LONG" u="XSD_LONG - "></s><s c="XSD_INT" u="XSD_INT - "></s><s c="XSD_SHORT" u="XSD_SHORT - "></s><s c="XSD_BYTE" u="XSD_BYTE - "></s><s c="XSD_NONNEGATIVEINTEGER" u="XSD_NONNEGATIVEINTEGER - "></s><s c="XSD_UNSIGNEDLONG" u="XSD_UNSIGNEDLONG - "></s><s c="XSD_UNSIGNEDINT" u="XSD_UNSIGNEDINT - "></s><s c="XSD_UNSIGNEDSHORT" u="XSD_UNSIGNEDSHORT - "></s><s c="XSD_UNSIGNEDBYTE" u="XSD_UNSIGNEDBYTE - "></s><s c="XSD_POSITIVEINTEGER" u="XSD_POSITIVEINTEGER - "></s><s c="XSD_NMTOKENS" u="XSD_NMTOKENS - "></s><s c="XSD_ANYTYPE" u="XSD_ANYTYPE - "></s><s c="SOAP_ENC_OBJECT" u="SOAP_ENC_OBJECT - "></s><s c="SOAP_ENC_ARRAY" u="SOAP_ENC_ARRAY - "></s><s c="XSD_1999_TIMEINSTANT" u="XSD_1999_TIMEINSTANT - "></s><s c="XSD_NAMESPACE" u="XSD_NAMESPACE - "></s><s c="XSD_1999_NAMESPACE" u="XSD_1999_NAMESPACE - "></s><s c="AF_UNIX" u="AF_UNIX - "></s><s c="AF_INET" u="AF_INET - "></s><s c="AF_INET6" u="AF_INET6 - "></s><s c="SOCK_STREAM" u="SOCK_STREAM - "></s><s c="SOCK_DGRAM" u="SOCK_DGRAM - "></s><s c="SOCK_RAW" u="SOCK_RAW - "></s><s c="SOCK_SEQPACKET" u="SOCK_SEQPACKET - "></s><s c="SOCK_RDM" u="SOCK_RDM - "></s><s c="MSG_OOB" u="MSG_OOB - "></s><s c="MSG_WAITALL" u="MSG_WAITALL - "></s><s c="MSG_PEEK" u="MSG_PEEK - "></s><s c="MSG_DONTROUTE" u="MSG_DONTROUTE - "></s><s c="SO_DEBUG" u="SO_DEBUG - "></s><s c="SO_REUSEADDR" u="SO_REUSEADDR - "></s><s c="SO_KEEPALIVE" u="SO_KEEPALIVE - "></s><s c="SO_DONTROUTE" u="SO_DONTROUTE - "></s><s c="SO_LINGER" u="SO_LINGER - "></s><s c="SO_BROADCAST" u="SO_BROADCAST - "></s><s c="SO_OOBINLINE" u="SO_OOBINLINE - "></s><s c="SO_SNDBUF" u="SO_SNDBUF - "></s><s c="SO_RCVBUF" u="SO_RCVBUF - "></s><s c="SO_SNDLOWAT" u="SO_SNDLOWAT - "></s><s c="SO_RCVLOWAT" u="SO_RCVLOWAT - "></s><s c="SO_SNDTIMEO" u="SO_SNDTIMEO - "></s><s c="SO_RCVTIMEO" u="SO_RCVTIMEO - "></s><s c="SO_TYPE" u="SO_TYPE - "></s><s c="SO_ERROR" u="SO_ERROR - "></s><s c="SOL_SOCKET" u="SOL_SOCKET - "></s><s c="PHP_NORMAL_READ" u="PHP_NORMAL_READ - "></s><s c="PHP_BINARY_READ" u="PHP_BINARY_READ - "></s><s c="SOL_TCP" u="SOL_TCP - "></s><s c="SOL_UDP" u="SOL_UDP - "></s><s c="RIT_LEAVES_ONLY" u="RIT_LEAVES_ONLY - "></s><s c="RIT_SELF_FIRST" u="RIT_SELF_FIRST - "></s><s c="RIT_CHILD_FIRST" u="RIT_CHILD_FIRST - "></s><s c="CIT_CALL_TOSTRING" u="CIT_CALL_TOSTRING - "></s><s c="CIT_CATCH_GET_CHILD" u="CIT_CATCH_GET_CHILD - "></s><s c="SQLITE_ASSOC" u="SQLITE_ASSOC - ">Columns are returned into the array having the fieldname as the array
      index.</s><s c="SQLITE_BOTH" u="SQLITE_BOTH - ">Columns are returned into the array having both a numerical index
       and the fieldname as the array index.</s><s c="SQLITE_NUM" u="SQLITE_NUM - ">Columns are returned into the array having a numerical index to the
       fields. This index starts with 0, the first field in the result.</s><s c="STREAM_FILTER_READ" u="STREAM_FILTER_READ - ">Used with stream_filter_append and
       stream_filter_prepend to indicate
       that the specified filter should only be applied when
       reading</s><s c="STREAM_FILTER_WRITE" u="STREAM_FILTER_WRITE - ">Used with stream_filter_append and
       stream_filter_prepend to indicate
       that the specified filter should only be applied when
       writing</s><s c="STREAM_FILTER_ALL" u="STREAM_FILTER_ALL - ">This constant is equivalent to
       STREAM_FILTER_READ |
       STREAM_FILTER_WRITE</s><s c="PSFS_PASS_ON" u="PSFS_PASS_ON - ">Return Code indicating that the
       userspace filter returned buckets in $out.</s><s c="PSFS_FEED_ME" u="PSFS_FEED_ME - ">Return Code indicating that the
       userspace filter did not return buckets in $out
       (i.e. No data available).</s><s c="PSFS_ERR_FATAL" u="PSFS_ERR_FATAL - ">Return Code indicating that the
       userspace filter encountered an unrecoverable error
       (i.e. Invalid data received).</s><s c="STREAM_USE_PATH" u="STREAM_USE_PATH - ">Flag indicating if the stream
       used the include path.</s><s c="STREAM_REPORT_ERRORS" u="STREAM_REPORT_ERRORS - ">Flag indicating if the wrapper
       is responsible for raising errors using trigger_error
       during opening of the stream.  If this flag is not set, you
       should not raise any errors.</s><s c="STREAM_CLIENT_ASYNC_CONNECT" u="STREAM_CLIENT_ASYNC_CONNECT - ">Open client socket asynchronously.  Used with
       stream_socket_client.</s><s c="STREAM_CLIENT_PERSISTENT" u="STREAM_CLIENT_PERSISTENT - ">Client socket opened with stream_socket_client
       should remain persistent between page loads.</s><s c="STREAM_SERVER_BIND" u="STREAM_SERVER_BIND - ">Tells a stream created with stream_socket_server
       to bind to the specified target.  Server sockets should always include this flag.</s><s c="STREAM_SERVER_LISTEN" u="STREAM_SERVER_LISTEN - ">Tells a stream created with stream_socket_server
       and bound using the STREAM_SERVER_BIND flag to start
       listening on the socket.  Server sockets should always include this flag.</s><s c="STREAM_NOTIFY_RESOLVE" u="STREAM_NOTIFY_RESOLVE - ">A remote address required for this stream has been resolved, or the resolution
       failed.  See severity for an indication of which happened.</s><s c="STREAM_NOTIFY_CONNECT" u="STREAM_NOTIFY_CONNECT - ">A connection with an external resource has been established.</s><s c="STREAM_NOTIFY_AUTH_REQUIRED" u="STREAM_NOTIFY_AUTH_REQUIRED - ">Additional authorization is required to access the specified resource.
       Typical issued with severity level of
       STREAM_NOTIFY_SEVERITY_ERR.</s><s c="STREAM_NOTIFY_MIME_TYPE_IS" u="STREAM_NOTIFY_MIME_TYPE_IS - ">The mime-type of resource has been identified,
       refer to message for a description of the
       discovered type.</s><s c="STREAM_NOTIFY_FILE_SIZE_IS" u="STREAM_NOTIFY_FILE_SIZE_IS - ">The size of the resource has been discovered.</s><s c="STREAM_NOTIFY_REDIRECTED" u="STREAM_NOTIFY_REDIRECTED - ">The external resource has redirected the stream to an alternate
       location.  Refer to message.</s><s c="STREAM_NOTIFY_PROGRESS" u="STREAM_NOTIFY_PROGRESS - ">Indicates current progress of the stream transfer in
       bytes_transferred and possibly
       bytes_max as well.</s><s c="STREAM_NOTIFY_COMPLETED" u="STREAM_NOTIFY_COMPLETED - ">There is no more data available on the stream.</s><s c="STREAM_NOTIFY_FAILURE" u="STREAM_NOTIFY_FAILURE - ">A generic error occurred on the stream, consult
       message and message_code
       for details.</s><s c="STREAM_NOTIFY_AUTH_RESULT" u="STREAM_NOTIFY_AUTH_RESULT - ">Authorization has been completed (with or without success).</s><s c="STREAM_NOTIFY_SEVERITY_INFO" u="STREAM_NOTIFY_SEVERITY_INFO - ">Normal, non-error related, notification.</s><s c="STREAM_NOTIFY_SEVERITY_WARN" u="STREAM_NOTIFY_SEVERITY_WARN - ">Non critical error condition.  Processing may continue.</s><s c="STREAM_NOTIFY_SEVERITY_ERR" u="STREAM_NOTIFY_SEVERITY_ERR - ">A critical error occurred.  Processing cannot continue.</s><s c="CRYPT_SALT_LENGTH" u="CRYPT_SALT_LENGTH - "></s><s c="CRYPT_STD_DES" u="CRYPT_STD_DES - "></s><s c="CRYPT_EXT_DES" u="CRYPT_EXT_DES - "></s><s c="CRYPT_MD5" u="CRYPT_MD5 - "></s><s c="CRYPT_BLOWFISH" u="CRYPT_BLOWFISH - "></s><s c="HTML_SPECIALCHARS" u="HTML_SPECIALCHARS - "></s><s c="HTML_ENTITIES" u="HTML_ENTITIES - "></s><s c="ENT_COMPAT" u="ENT_COMPAT - "></s><s c="ENT_QUOTES" u="ENT_QUOTES - "></s><s c="ENT_NOQUOTES" u="ENT_NOQUOTES - "></s><s c="CHAR_MAX" u="CHAR_MAX - "></s><s c="LC_CTYPE" u="LC_CTYPE - "></s><s c="LC_NUMERIC" u="LC_NUMERIC - "></s><s c="LC_TIME" u="LC_TIME - "></s><s c="LC_COLLATE" u="LC_COLLATE - "></s><s c="LC_MONETARY" u="LC_MONETARY - "></s><s c="LC_ALL" u="LC_ALL - "></s><s c="LC_MESSAGES" u="LC_MESSAGES - "></s><s c="STR_PAD_LEFT" u="STR_PAD_LEFT - "></s><s c="STR_PAD_RIGHT" u="STR_PAD_RIGHT - "></s><s c="STR_PAD_BOTH" u="STR_PAD_BOTH - "></s><s c="MOD_COLOR" u="MOD_COLOR - "></s><s c="MOD_MATRIX" u="MOD_MATRIX - "></s><s c="TYPE_PUSHBUTTON" u="TYPE_PUSHBUTTON - "></s><s c="TYPE_MENUBUTTON" u="TYPE_MENUBUTTON - "></s><s c="BSHitTest" u="BSHitTest - "></s><s c="BSDown" u="BSDown - "></s><s c="BSOver" u="BSOver - "></s><s c="BSUp" u="BSUp - "></s><s c="OverDowntoIdle" u="OverDowntoIdle - "></s><s c="IdletoOverDown" u="IdletoOverDown - "></s><s c="OutDowntoIdle" u="OutDowntoIdle - "></s><s c="OutDowntoOverDown" u="OutDowntoOverDown - "></s><s c="OverDowntoOutDown" u="OverDowntoOutDown - "></s><s c="OverUptoOverDown" u="OverUptoOverDown - "></s><s c="OverUptoIdle" u="OverUptoIdle - "></s><s c="IdletoOverUp" u="IdletoOverUp - "></s><s c="ButtonEnter" u="ButtonEnter - "></s><s c="ButtonExit" u="ButtonExit - "></s><s c="MenuEnter" u="MenuEnter - "></s><s c="MenuExit" u="MenuExit - "></s><s c="TIDY_TAG_UNKNOWN" u="TIDY_TAG_UNKNOWN - "></s><s c="TIDY_TAG_A" u="TIDY_TAG_A - "></s><s c="TIDY_TAG_ABBR" u="TIDY_TAG_ABBR - "></s><s c="TIDY_TAG_ACRONYM" u="TIDY_TAG_ACRONYM - "></s><s c="TIDY_TAG_ALIGN" u="TIDY_TAG_ALIGN - "></s><s c="TIDY_TAG_APPLET" u="TIDY_TAG_APPLET - "></s><s c="TIDY_TAG_AREA" u="TIDY_TAG_AREA - "></s><s c="TIDY_TAG_B" u="TIDY_TAG_B - "></s><s c="TIDY_TAG_BASE" u="TIDY_TAG_BASE - "></s><s c="TIDY_TAG_BASEFONT" u="TIDY_TAG_BASEFONT - "></s><s c="TIDY_TAG_BDO" u="TIDY_TAG_BDO - "></s><s c="TIDY_TAG_BGSOUND" u="TIDY_TAG_BGSOUND - "></s><s c="TIDY_TAG_BIG" u="TIDY_TAG_BIG - "></s><s c="TIDY_TAG_BLINK" u="TIDY_TAG_BLINK - "></s><s c="TIDY_TAG_BLOCKQUOTE" u="TIDY_TAG_BLOCKQUOTE - "></s><s c="TIDY_TAG_BODY" u="TIDY_TAG_BODY - "></s><s c="TIDY_TAG_BR" u="TIDY_TAG_BR - "></s><s c="TIDY_TAG_BUTTON" u="TIDY_TAG_BUTTON - "></s><s c="TIDY_TAG_CAPTION" u="TIDY_TAG_CAPTION - "></s><s c="TIDY_TAG_CENTER" u="TIDY_TAG_CENTER - "></s><s c="TIDY_TAG_CITE" u="TIDY_TAG_CITE - "></s><s c="TIDY_TAG_CODE" u="TIDY_TAG_CODE - "></s><s c="TIDY_TAG_COL" u="TIDY_TAG_COL - "></s><s c="TIDY_TAG_COLGROUP" u="TIDY_TAG_COLGROUP - "></s><s c="TIDY_TAG_COMMENT" u="TIDY_TAG_COMMENT - "></s><s c="TIDY_TAG_DD" u="TIDY_TAG_DD - "></s><s c="TIDY_TAG_DEL" u="TIDY_TAG_DEL - "></s><s c="TIDY_TAG_DFN" u="TIDY_TAG_DFN - "></s><s c="TIDY_TAG_DIR" u="TIDY_TAG_DIR - "></s><s c="TIDY_TAG_DIV" u="TIDY_TAG_DIV - "></s><s c="TIDY_TAG_DL" u="TIDY_TAG_DL - "></s><s c="TIDY_TAG_DT" u="TIDY_TAG_DT - "></s><s c="TIDY_TAG_EM" u="TIDY_TAG_EM - "></s><s c="TIDY_TAG_EMBED" u="TIDY_TAG_EMBED - "></s><s c="TIDY_TAG_FIELDSET" u="TIDY_TAG_FIELDSET - "></s><s c="TIDY_TAG_FONT" u="TIDY_TAG_FONT - "></s><s c="TIDY_TAG_FORM" u="TIDY_TAG_FORM - "></s><s c="TIDY_TAG_FRAME" u="TIDY_TAG_FRAME - "></s><s c="TIDY_TAG_FRAMESET" u="TIDY_TAG_FRAMESET - "></s><s c="TIDY_TAG_H1" u="TIDY_TAG_H1 - "></s><s c="TIDY_TAG_H2" u="TIDY_TAG_H2 - "></s><s c="TIDY_TAG_H3" u="TIDY_TAG_H3 - "></s><s c="TIDY_TAG_H4" u="TIDY_TAG_H4 - "></s><s c="TIDY_TAG_H5" u="TIDY_TAG_H5 - "></s><s c="TIDY_TAG_6" u="TIDY_TAG_6 - "></s><s c="TIDY_TAG_HEAD" u="TIDY_TAG_HEAD - "></s><s c="TIDY_TAG_HR" u="TIDY_TAG_HR - "></s><s c="TIDY_TAG_HTML" u="TIDY_TAG_HTML - "></s><s c="TIDY_TAG_I" u="TIDY_TAG_I - "></s><s c="TIDY_TAG_IFRAME" u="TIDY_TAG_IFRAME - "></s><s c="TIDY_TAG_ILAYER" u="TIDY_TAG_ILAYER - "></s><s c="TIDY_TAG_IMG" u="TIDY_TAG_IMG - "></s><s c="TIDY_TAG_INPUT" u="TIDY_TAG_INPUT - "></s><s c="TIDY_TAG_INS" u="TIDY_TAG_INS - "></s><s c="TIDY_TAG_ISINDEX" u="TIDY_TAG_ISINDEX - "></s><s c="TIDY_TAG_KBD" u="TIDY_TAG_KBD - "></s><s c="TIDY_TAG_KEYGEN" u="TIDY_TAG_KEYGEN - "></s><s c="TIDY_TAG_LABEL" u="TIDY_TAG_LABEL - "></s><s c="TIDY_TAG_LAYER" u="TIDY_TAG_LAYER - "></s><s c="TIDY_TAG_LEGEND" u="TIDY_TAG_LEGEND - "></s><s c="TIDY_TAG_LI" u="TIDY_TAG_LI - "></s><s c="TIDY_TAG_LINK" u="TIDY_TAG_LINK - "></s><s c="TIDY_TAG_LISTING" u="TIDY_TAG_LISTING - "></s><s c="TIDY_TAG_MAP" u="TIDY_TAG_MAP - "></s><s c="TIDY_TAG_MARQUEE" u="TIDY_TAG_MARQUEE - "></s><s c="TIDY_TAG_MENU" u="TIDY_TAG_MENU - "></s><s c="TIDY_TAG_META" u="TIDY_TAG_META - "></s><s c="TIDY_TAG_MULTICOL" u="TIDY_TAG_MULTICOL - "></s><s c="TIDY_TAG_NOBR" u="TIDY_TAG_NOBR - "></s><s c="TIDY_TAG_NOEMBED" u="TIDY_TAG_NOEMBED - "></s><s c="TIDY_TAG_NOFRAMES" u="TIDY_TAG_NOFRAMES - "></s><s c="TIDY_TAG_NOLAYER" u="TIDY_TAG_NOLAYER - "></s><s c="TIDY_TAG_NOSAFE" u="TIDY_TAG_NOSAFE - "></s><s c="TIDY_TAG_NOSCRIPT" u="TIDY_TAG_NOSCRIPT - "></s><s c="TIDY_TAG_OBJECT" u="TIDY_TAG_OBJECT - "></s><s c="TIDY_TAG_OL" u="TIDY_TAG_OL - "></s><s c="TIDY_TAG_OPTGROUP" u="TIDY_TAG_OPTGROUP - "></s><s c="TIDY_TAG_OPTION" u="TIDY_TAG_OPTION - "></s><s c="TIDY_TAG_P" u="TIDY_TAG_P - "></s><s c="TIDY_TAG_PARAM" u="TIDY_TAG_PARAM - "></s><s c="TIDY_TAG_PLAINTEXT" u="TIDY_TAG_PLAINTEXT - "></s><s c="TIDY_TAG_PRE" u="TIDY_TAG_PRE - "></s><s c="TIDY_TAG_Q" u="TIDY_TAG_Q - "></s><s c="TIDY_TAG_RP" u="TIDY_TAG_RP - "></s><s c="TIDY_TAG_RT" u="TIDY_TAG_RT - "></s><s c="TIDY_TAG_RTC" u="TIDY_TAG_RTC - "></s><s c="TIDY_TAG_RUBY" u="TIDY_TAG_RUBY - "></s><s c="TIDY_TAG_S" u="TIDY_TAG_S - "></s><s c="TIDY_TAG_SAMP" u="TIDY_TAG_SAMP - "></s><s c="TIDY_TAG_SCRIPT" u="TIDY_TAG_SCRIPT - "></s><s c="TIDY_TAG_SELECT" u="TIDY_TAG_SELECT - "></s><s c="TIDY_TAG_SERVER" u="TIDY_TAG_SERVER - "></s><s c="TIDY_TAG_SERVLET" u="TIDY_TAG_SERVLET - "></s><s c="TIDY_TAG_SMALL" u="TIDY_TAG_SMALL - "></s><s c="TIDY_TAG_SPACER" u="TIDY_TAG_SPACER - "></s><s c="TIDY_TAG_SPAN" u="TIDY_TAG_SPAN - "></s><s c="TIDY_TAG_STRIKE" u="TIDY_TAG_STRIKE - "></s><s c="TIDY_TAG_STRONG" u="TIDY_TAG_STRONG - "></s><s c="TIDY_TAG_STYLE" u="TIDY_TAG_STYLE - "></s><s c="TIDY_TAG_SUB" u="TIDY_TAG_SUB - "></s><s c="TIDY_TAG_TABLE" u="TIDY_TAG_TABLE - "></s><s c="TIDY_TAG_TBODY" u="TIDY_TAG_TBODY - "></s><s c="TIDY_TAG_TD" u="TIDY_TAG_TD - "></s><s c="TIDY_TAG_TEXTAREA" u="TIDY_TAG_TEXTAREA - "></s><s c="TIDY_TAG_TFOOT" u="TIDY_TAG_TFOOT - "></s><s c="TIDY_TAG_TH" u="TIDY_TAG_TH - "></s><s c="TIDY_TAG_THEAD" u="TIDY_TAG_THEAD - "></s><s c="TIDY_TAG_TITLE" u="TIDY_TAG_TITLE - "></s><s c="TIDY_TAG_TR" u="TIDY_TAG_TR - "></s><s c="TIDY_TAG_TR" u="TIDY_TAG_TR - "></s><s c="TIDY_TAG_TT" u="TIDY_TAG_TT - "></s><s c="TIDY_TAG_U" u="TIDY_TAG_U - "></s><s c="TIDY_TAG_UL" u="TIDY_TAG_UL - "></s><s c="TIDY_TAG_VAR" u="TIDY_TAG_VAR - "></s><s c="TIDY_TAG_WBR" u="TIDY_TAG_WBR - "></s><s c="TIDY_TAG_XMP" u="TIDY_TAG_XMP - "></s><s c="TIDY_ATTR_UNKNOWN" u="TIDY_ATTR_UNKNOWN - "></s><s c="TIDY_ATTR_ABBR" u="TIDY_ATTR_ABBR - "></s><s c="TIDY_ATTR_ACCEPT" u="TIDY_ATTR_ACCEPT - "></s><s c="TIDY_ATTR_ACCEPT_CHARSET" u="TIDY_ATTR_ACCEPT_CHARSET - "></s><s c="TIDY_ATTR_ACCESSKEY" u="TIDY_ATTR_ACCESSKEY - "></s><s c="TIDY_ATTR_ACTION" u="TIDY_ATTR_ACTION - "></s><s c="TIDY_ATTR_ADD_DATE" u="TIDY_ATTR_ADD_DATE - "></s><s c="TIDY_ATTR_ALIGN" u="TIDY_ATTR_ALIGN - "></s><s c="TIDY_ATTR_ALINK" u="TIDY_ATTR_ALINK - "></s><s c="TIDY_ATTR_ALT" u="TIDY_ATTR_ALT - "></s><s c="TIDY_ATTR_ARCHIVE" u="TIDY_ATTR_ARCHIVE - "></s><s c="TIDY_ATTR_AXIS" u="TIDY_ATTR_AXIS - "></s><s c="TIDY_ATTR_BACKGROUND" u="TIDY_ATTR_BACKGROUND - "></s><s c="TIDY_ATTR_BGCOLOR" u="TIDY_ATTR_BGCOLOR - "></s><s c="TIDY_ATTR_BGPROPERTIES" u="TIDY_ATTR_BGPROPERTIES - "></s><s c="TIDY_ATTR_BORDER" u="TIDY_ATTR_BORDER - "></s><s c="TIDY_ATTR_BORDERCOLOR" u="TIDY_ATTR_BORDERCOLOR - "></s><s c="TIDY_ATTR_BOTTOMMARGIN" u="TIDY_ATTR_BOTTOMMARGIN - "></s><s c="TIDY_ATTR_CELLPADDING" u="TIDY_ATTR_CELLPADDING - "></s><s c="TIDY_ATTR_CELLSPACING" u="TIDY_ATTR_CELLSPACING - "></s><s c="TIDY_ATTR_CHAR" u="TIDY_ATTR_CHAR - "></s><s c="TIDY_ATTR_CHAROFF" u="TIDY_ATTR_CHAROFF - "></s><s c="TIDY_ATTR_CHARSET" u="TIDY_ATTR_CHARSET - "></s><s c="TIDY_ATTR_CHECKED" u="TIDY_ATTR_CHECKED - "></s><s c="TIDY_ATTR_CITE" u="TIDY_ATTR_CITE - "></s><s c="TIDY_ATTR_CLASS" u="TIDY_ATTR_CLASS - "></s><s c="TIDY_ATTR_CLASSID" u="TIDY_ATTR_CLASSID - "></s><s c="TIDY_ATTR_CLEAR" u="TIDY_ATTR_CLEAR - "></s><s c="TIDY_ATTR_CODE" u="TIDY_ATTR_CODE - "></s><s c="TIDY_ATTR_CODEBASE" u="TIDY_ATTR_CODEBASE - "></s><s c="TIDY_ATTR_CODETYPE" u="TIDY_ATTR_CODETYPE - "></s><s c="TIDY_ATTR_COLOR" u="TIDY_ATTR_COLOR - "></s><s c="TIDY_ATTR_COLS" u="TIDY_ATTR_COLS - "></s><s c="TIDY_ATTR_COLSPAN" u="TIDY_ATTR_COLSPAN - "></s><s c="TIDY_ATTR_COMPACT" u="TIDY_ATTR_COMPACT - "></s><s c="TIDY_ATTR_CONTENT" u="TIDY_ATTR_CONTENT - "></s><s c="TIDY_ATTR_COORDS" u="TIDY_ATTR_COORDS - "></s><s c="TIDY_ATTR_DATA" u="TIDY_ATTR_DATA - "></s><s c="TIDY_ATTR_DATAFLD" u="TIDY_ATTR_DATAFLD - "></s><s c="TIDY_ATTR_DATAPAGESIZE" u="TIDY_ATTR_DATAPAGESIZE - "></s><s c="TIDY_ATTR_DATASRC" u="TIDY_ATTR_DATASRC - "></s><s c="TIDY_ATTR_DATETIME" u="TIDY_ATTR_DATETIME - "></s><s c="TIDY_ATTR_DECLARE" u="TIDY_ATTR_DECLARE - "></s><s c="TIDY_ATTR_DEFER" u="TIDY_ATTR_DEFER - "></s><s c="TIDY_ATTR_DIR" u="TIDY_ATTR_DIR - "></s><s c="TIDY_ATTR_DISABLED" u="TIDY_ATTR_DISABLED - "></s><s c="TIDY_ATTR_ENCODING" u="TIDY_ATTR_ENCODING - "></s><s c="TIDY_ATTR_ENCTYPE" u="TIDY_ATTR_ENCTYPE - "></s><s c="TIDY_ATTR_FACE" u="TIDY_ATTR_FACE - "></s><s c="TIDY_ATTR_FOR" u="TIDY_ATTR_FOR - "></s><s c="TIDY_ATTR_FRAME" u="TIDY_ATTR_FRAME - "></s><s c="TIDY_ATTR_FRAMEBORDER" u="TIDY_ATTR_FRAMEBORDER - "></s><s c="TIDY_ATTR_FRAMESPACING" u="TIDY_ATTR_FRAMESPACING - "></s><s c="TIDY_ATTR_GRIDX" u="TIDY_ATTR_GRIDX - "></s><s c="TIDY_ATTR_GRIDY" u="TIDY_ATTR_GRIDY - "></s><s c="TIDY_ATTR_HEADERS" u="TIDY_ATTR_HEADERS - "></s><s c="TIDY_ATTR_HEIGHT" u="TIDY_ATTR_HEIGHT - "></s><s c="TIDY_ATTR_HREF" u="TIDY_ATTR_HREF - "></s><s c="TIDY_ATTR_HREFLANG" u="TIDY_ATTR_HREFLANG - "></s><s c="TIDY_ATTR_HSPACE" u="TIDY_ATTR_HSPACE - "></s><s c="TIDY_ATTR_HTTP_EQUIV" u="TIDY_ATTR_HTTP_EQUIV - "></s><s c="TIDY_ATTR_ID" u="TIDY_ATTR_ID - "></s><s c="TIDY_ATTR_ISMAP" u="TIDY_ATTR_ISMAP - "></s><s c="TIDY_ATTR_LABEL" u="TIDY_ATTR_LABEL - "></s><s c="TIDY_ATTR_LANG" u="TIDY_ATTR_LANG - "></s><s c="TIDY_ATTR_LANGUAGE" u="TIDY_ATTR_LANGUAGE - "></s><s c="TIDY_ATTR_LAST_MODIFIED" u="TIDY_ATTR_LAST_MODIFIED - "></s><s c="TIDY_ATTR_LAST_VISIT" u="TIDY_ATTR_LAST_VISIT - "></s><s c="TIDY_ATTR_LEFTMARGIN" u="TIDY_ATTR_LEFTMARGIN - "></s><s c="TIDY_ATTR_LINK" u="TIDY_ATTR_LINK - "></s><s c="TIDY_ATTR_LONGDESC" u="TIDY_ATTR_LONGDESC - "></s><s c="TIDY_ATTR_LOWSRC" u="TIDY_ATTR_LOWSRC - "></s><s c="TIDY_ATTR_MARGINHEIGHT" u="TIDY_ATTR_MARGINHEIGHT - "></s><s c="TIDY_ATTR_MARGINWIDTH" u="TIDY_ATTR_MARGINWIDTH - "></s><s c="TIDY_ATTR_MAXLENGTH" u="TIDY_ATTR_MAXLENGTH - "></s><s c="TIDY_ATTR_MEDIA" u="TIDY_ATTR_MEDIA - "></s><s c="TIDY_ATTR_METHOD" u="TIDY_ATTR_METHOD - "></s><s c="TIDY_ATTR_MULTIPLE" u="TIDY_ATTR_MULTIPLE - "></s><s c="TIDY_ATTR_NAME" u="TIDY_ATTR_NAME - "></s><s c="TIDY_ATTR_NOHREF" u="TIDY_ATTR_NOHREF - "></s><s c="TIDY_ATTR_NORESIZE" u="TIDY_ATTR_NORESIZE - "></s><s c="TIDY_ATTR_NOSHADE" u="TIDY_ATTR_NOSHADE - "></s><s c="TIDY_ATTR_NOWRAP" u="TIDY_ATTR_NOWRAP - "></s><s c="TIDY_ATTR_OBJECT" u="TIDY_ATTR_OBJECT - "></s><s c="TIDY_ATTR_PROFILE" u="TIDY_ATTR_PROFILE - "></s><s c="TIDY_ATTR_PROMPT" u="TIDY_ATTR_PROMPT - "></s><s c="TIDY_ATTR_RBSPAN" u="TIDY_ATTR_RBSPAN - "></s><s c="TIDY_ATTR_READONLY" u="TIDY_ATTR_READONLY - "></s><s c="TIDY_ATTR_REL" u="TIDY_ATTR_REL - "></s><s c="TIDY_ATTR_REV" u="TIDY_ATTR_REV - "></s><s c="TIDY_ATTR_RIGHTMARGIN" u="TIDY_ATTR_RIGHTMARGIN - "></s><s c="TIDY_ATTR_ROWS" u="TIDY_ATTR_ROWS - "></s><s c="TIDY_ATTR_ROWSPAN" u="TIDY_ATTR_ROWSPAN - "></s><s c="TIDY_ATTR_RULES" u="TIDY_ATTR_RULES - "></s><s c="TIDY_ATTR_SCHEME" u="TIDY_ATTR_SCHEME - "></s><s c="TIDY_ATTR_SCOPE" u="TIDY_ATTR_SCOPE - "></s><s c="TIDY_ATTR_SCROLLING" u="TIDY_ATTR_SCROLLING - "></s><s c="TIDY_ATTR_SELECTED" u="TIDY_ATTR_SELECTED - "></s><s c="TIDY_ATTR_SHAPE" u="TIDY_ATTR_SHAPE - "></s><s c="TIDY_ATTR_SHOWGRID" u="TIDY_ATTR_SHOWGRID - "></s><s c="TIDY_ATTR_SHOWGRIDX" u="TIDY_ATTR_SHOWGRIDX - "></s><s c="TIDY_ATTR_SHOWGRIDY" u="TIDY_ATTR_SHOWGRIDY - "></s><s c="TIDY_ATTR_SIZE" u="TIDY_ATTR_SIZE - "></s><s c="TIDY_ATTR_SPAN" u="TIDY_ATTR_SPAN - "></s><s c="TIDY_ATTR_SRC" u="TIDY_ATTR_SRC - "></s><s c="TIDY_ATTR_STANDBY" u="TIDY_ATTR_STANDBY - "></s><s c="TIDY_ATTR_START" u="TIDY_ATTR_START - "></s><s c="TIDY_ATTR_STYLE" u="TIDY_ATTR_STYLE - "></s><s c="TIDY_ATTR_SUMMARY" u="TIDY_ATTR_SUMMARY - "></s><s c="TIDY_ATTR_TABINDEX" u="TIDY_ATTR_TABINDEX - "></s><s c="TIDY_ATTR_TARGET" u="TIDY_ATTR_TARGET - "></s><s c="TIDY_ATTR_TEXT" u="TIDY_ATTR_TEXT - "></s><s c="TIDY_ATTR_TITLE" u="TIDY_ATTR_TITLE - "></s><s c="TIDY_ATTR_TOPMARGIN" u="TIDY_ATTR_TOPMARGIN - "></s><s c="TIDY_ATTR_TYPE" u="TIDY_ATTR_TYPE - "></s><s c="TIDY_ATTR_USEMAP" u="TIDY_ATTR_USEMAP - "></s><s c="TIDY_ATTR_VALIGN" u="TIDY_ATTR_VALIGN - "></s><s c="TIDY_ATTR_VALUE" u="TIDY_ATTR_VALUE - "></s><s c="TIDY_ATTR_VALUETYPE" u="TIDY_ATTR_VALUETYPE - "></s><s c="TIDY_ATTR_VERSION" u="TIDY_ATTR_VERSION - "></s><s c="TIDY_ATTR_VLINK" u="TIDY_ATTR_VLINK - "></s><s c="TIDY_ATTR_VSPACE" u="TIDY_ATTR_VSPACE - "></s><s c="TIDY_ATTR_WIDTH" u="TIDY_ATTR_WIDTH - "></s><s c="TIDY_ATTR_WRAP" u="TIDY_ATTR_WRAP - "></s><s c="TIDY_ATTR_XML_LANG" u="TIDY_ATTR_XML_LANG - "></s><s c="TIDY_ATTR_XML_SPACE" u="TIDY_ATTR_XML_SPACE - "></s><s c="TIDY_ATTR_XMLNS" u="TIDY_ATTR_XMLNS - "></s><s c="TIDY_NODETYPE_ROOT" u="TIDY_NODETYPE_ROOT - "></s><s c="TIDY_NODETYPE_DOCTYPE" u="TIDY_NODETYPE_DOCTYPE - "></s><s c="TIDY_NODETYPE_COMMENT" u="TIDY_NODETYPE_COMMENT - "></s><s c="TIDY_NODETYPE_PROCINS" u="TIDY_NODETYPE_PROCINS - "></s><s c="TIDY_NODETYPE_TEXT" u="TIDY_NODETYPE_TEXT - "></s><s c="TIDY_NODETYPE_START" u="TIDY_NODETYPE_START - "></s><s c="TIDY_NODETYPE_END" u="TIDY_NODETYPE_END - "></s><s c="TIDY_NODETYPE_STARTEND" u="TIDY_NODETYPE_STARTEND - "></s><s c="TIDY_NODETYPE_CDATA" u="TIDY_NODETYPE_CDATA - "></s><s c="TIDY_NODETYPE_SECTION" u="TIDY_NODETYPE_SECTION - "></s><s c="TIDY_NODETYPE_ASP" u="TIDY_NODETYPE_ASP - "></s><s c="TIDY_NODETYPE_JSTE" u="TIDY_NODETYPE_JSTE - "></s><s c="TIDY_NODETYPE_PHP" u="TIDY_NODETYPE_PHP - "></s><s c="TIDY_NODETYPE_XMLDECL" u="TIDY_NODETYPE_XMLDECL - "></s><s c="T_INCLUDE" u="T_INCLUDE - "></s><s c="T_INCLUDE_ONCE" u="T_INCLUDE_ONCE - "></s><s c="T_EVAL" u="T_EVAL - "></s><s c="T_REQUIRE" u="T_REQUIRE - "></s><s c="T_REQUIRE_ONCE" u="T_REQUIRE_ONCE - "></s><s c="T_LOGICAL_OR" u="T_LOGICAL_OR - "></s><s c="T_LOGICAL_XOR" u="T_LOGICAL_XOR - "></s><s c="T_LOGICAL_AND" u="T_LOGICAL_AND - "></s><s c="T_PRINT" u="T_PRINT - "></s><s c="T_PLUS_EQUAL" u="T_PLUS_EQUAL - "></s><s c="T_MINUS_EQUAL" u="T_MINUS_EQUAL - "></s><s c="T_MUL_EQUAL" u="T_MUL_EQUAL - "></s><s c="T_DIV_EQUAL" u="T_DIV_EQUAL - "></s><s c="T_CONCAT_EQUAL" u="T_CONCAT_EQUAL - "></s><s c="T_MOD_EQUAL" u="T_MOD_EQUAL - "></s><s c="T_AND_EQUAL" u="T_AND_EQUAL - "></s><s c="T_OR_EQUAL" u="T_OR_EQUAL - "></s><s c="T_XOR_EQUAL" u="T_XOR_EQUAL - "></s><s c="T_SL_EQUAL" u="T_SL_EQUAL - "></s><s c="T_SR_EQUAL" u="T_SR_EQUAL - "></s><s c="T_BOOLEAN_OR" u="T_BOOLEAN_OR - "></s><s c="T_BOOLEAN_AND" u="T_BOOLEAN_AND - "></s><s c="T_IS_EQUAL" u="T_IS_EQUAL - "></s><s c="T_IS_NOT_EQUAL" u="T_IS_NOT_EQUAL - "></s><s c="T_IS_IDENTICAL" u="T_IS_IDENTICAL - "></s><s c="T_IS_NOT_IDENTICAL" u="T_IS_NOT_IDENTICAL - "></s><s c="T_IS_SMALLER_OR_EQUAL" u="T_IS_SMALLER_OR_EQUAL - "></s><s c="T_IS_GREATER_OR_EQUAL" u="T_IS_GREATER_OR_EQUAL - "></s><s c="T_SL" u="T_SL - "></s><s c="T_SR" u="T_SR - "></s><s c="T_INC" u="T_INC - "></s><s c="T_DEC" u="T_DEC - "></s><s c="T_INT_CAST" u="T_INT_CAST - "></s><s c="T_DOUBLE_CAST" u="T_DOUBLE_CAST - "></s><s c="T_STRING_CAST" u="T_STRING_CAST - "></s><s c="T_ARRAY_CAST" u="T_ARRAY_CAST - "></s><s c="T_OBJECT_CAST" u="T_OBJECT_CAST - "></s><s c="T_BOOL_CAST" u="T_BOOL_CAST - "></s><s c="T_UNSET_CAST" u="T_UNSET_CAST - "></s><s c="T_NEW" u="T_NEW - "></s><s c="T_EXIT" u="T_EXIT - "></s><s c="T_IF" u="T_IF - "></s><s c="T_ELSEIF" u="T_ELSEIF - "></s><s c="T_ELSE" u="T_ELSE - "></s><s c="T_ENDIF" u="T_ENDIF - "></s><s c="T_LNUMBER" u="T_LNUMBER - "></s><s c="T_DNUMBER" u="T_DNUMBER - "></s><s c="T_STRING" u="T_STRING - "></s><s c="T_STRING_VARNAME" u="T_STRING_VARNAME - "></s><s c="T_VARIABLE" u="T_VARIABLE - "></s><s c="T_NUM_STRING" u="T_NUM_STRING - "></s><s c="T_INLINE_HTML" u="T_INLINE_HTML - "></s><s c="T_CHARACTER" u="T_CHARACTER - "></s><s c="T_BAD_CHARACTER" u="T_BAD_CHARACTER - "></s><s c="T_ENCAPSED_AND_WHITESPACE" u="T_ENCAPSED_AND_WHITESPACE - "></s><s c="T_CONSTANT_ENCAPSED_STRING" u="T_CONSTANT_ENCAPSED_STRING - "></s><s c="T_ECHO" u="T_ECHO - "></s><s c="T_DO" u="T_DO - "></s><s c="T_WHILE" u="T_WHILE - "></s><s c="T_ENDWHILE" u="T_ENDWHILE - "></s><s c="T_FOR" u="T_FOR - "></s><s c="T_ENDFOR" u="T_ENDFOR - "></s><s c="T_FOREACH" u="T_FOREACH - "></s><s c="T_ENDFOREACH" u="T_ENDFOREACH - "></s><s c="T_DECLARE" u="T_DECLARE - "></s><s c="T_ENDDECLARE" u="T_ENDDECLARE - "></s><s c="T_AS" u="T_AS - "></s><s c="T_SWITCH" u="T_SWITCH - "></s><s c="T_ENDSWITCH" u="T_ENDSWITCH - "></s><s c="T_CASE" u="T_CASE - "></s><s c="T_DEFAULT" u="T_DEFAULT - "></s><s c="T_BREAK" u="T_BREAK - "></s><s c="T_CONTINUE" u="T_CONTINUE - "></s><s c="T_OLD_FUNCTION" u="T_OLD_FUNCTION - "></s><s c="T_FUNCTION" u="T_FUNCTION - "></s><s c="T_CONST" u="T_CONST - "></s><s c="T_RETURN" u="T_RETURN - "></s><s c="T_USE" u="T_USE - "></s><s c="T_GLOBAL" u="T_GLOBAL - "></s><s c="T_STATIC" u="T_STATIC - "></s><s c="T_VAR" u="T_VAR - "></s><s c="T_UNSET" u="T_UNSET - "></s><s c="T_ISSET" u="T_ISSET - "></s><s c="T_EMPTY" u="T_EMPTY - "></s><s c="T_CLASS" u="T_CLASS - "></s><s c="T_EXTENDS" u="T_EXTENDS - "></s><s c="T_OBJECT_OPERATOR" u="T_OBJECT_OPERATOR - "></s><s c="T_DOUBLE_ARROW" u="T_DOUBLE_ARROW - "></s><s c="T_LIST" u="T_LIST - "></s><s c="T_ARRAY" u="T_ARRAY - "></s><s c="T_LINE" u="T_LINE - "></s><s c="T_FILE" u="T_FILE - "></s><s c="T_COMMENT" u="T_COMMENT - "></s><s c="T_ML_COMMENT" u="T_ML_COMMENT - "></s><s c="T_DOC_COMMENT" u="T_DOC_COMMENT - "></s><s c="T_OPEN_TAG" u="T_OPEN_TAG - "></s><s c="T_OPEN_TAG_WITH_ECHO" u="T_OPEN_TAG_WITH_ECHO - "></s><s c="T_CLOSE_TAG" u="T_CLOSE_TAG - "></s><s c="T_WHITESPACE" u="T_WHITESPACE - "></s><s c="T_START_HEREDOC" u="T_START_HEREDOC - "></s><s c="T_END_HEREDOC" u="T_END_HEREDOC - "></s><s c="T_DOLLAR_OPEN_CURLY_BRACES" u="T_DOLLAR_OPEN_CURLY_BRACES - "></s><s c="T_CURLY_OPEN" u="T_CURLY_OPEN - "></s><s c="T_PAAMAYIM_NEKUDOTAYIM" u="T_PAAMAYIM_NEKUDOTAYIM - "></s><s c="T_DOUBLE_COLON" u="T_DOUBLE_COLON - "></s><s c="ODBC_TYPE" u="ODBC_TYPE - "></s><s c="ODBC_BINMODE_PASSTHRU" u="ODBC_BINMODE_PASSTHRU - "></s><s c="ODBC_BINMODE_RETURN" u="ODBC_BINMODE_RETURN - "></s><s c="ODBC_BINMODE_CONVERT" u="ODBC_BINMODE_CONVERT - "></s><s c="SQL_ODBC_CURSORS" u="SQL_ODBC_CURSORS - "></s><s c="SQL_CUR_USE_DRIVER" u="SQL_CUR_USE_DRIVER - "></s><s c="SQL_CUR_USE_IF_NEEDED" u="SQL_CUR_USE_IF_NEEDED - "></s><s c="SQL_CUR_USE_ODBC" u="SQL_CUR_USE_ODBC - "></s><s c="SQL_CONCURRENCY" u="SQL_CONCURRENCY - "></s><s c="SQL_CONCUR_READ_ONLY" u="SQL_CONCUR_READ_ONLY - "></s><s c="SQL_CONCUR_LOCK" u="SQL_CONCUR_LOCK - "></s><s c="SQL_CONCUR_ROWVER" u="SQL_CONCUR_ROWVER - "></s><s c="SQL_CONCUR_VALUES" u="SQL_CONCUR_VALUES - "></s><s c="SQL_CURSOR_TYPE" u="SQL_CURSOR_TYPE - "></s><s c="SQL_CURSOR_FORWARD_ONLY" u="SQL_CURSOR_FORWARD_ONLY - "></s><s c="SQL_CURSOR_KEYSET_DRIVEN" u="SQL_CURSOR_KEYSET_DRIVEN - "></s><s c="SQL_CURSOR_DYNAMIC" u="SQL_CURSOR_DYNAMIC - "></s><s c="SQL_CURSOR_STATIC" u="SQL_CURSOR_STATIC - "></s><s c="SQL_KEYSET_SIZE" u="SQL_KEYSET_SIZE - "></s><s c="SQL_CHAR" u="SQL_CHAR - "></s><s c="SQL_VARCHAR" u="SQL_VARCHAR - "></s><s c="SQL_LONGVARCHAR" u="SQL_LONGVARCHAR - "></s><s c="SQL_DECIMAL" u="SQL_DECIMAL - "></s><s c="SQL_NUMERIC" u="SQL_NUMERIC - "></s><s c="SQL_BIT" u="SQL_BIT - "></s><s c="SQL_TINYINT" u="SQL_TINYINT - "></s><s c="SQL_SMALLINT" u="SQL_SMALLINT - "></s><s c="SQL_INTEGER" u="SQL_INTEGER - "></s><s c="SQL_BIGINT" u="SQL_BIGINT - "></s><s c="SQL_REAL" u="SQL_REAL - "></s><s c="SQL_FLOAT" u="SQL_FLOAT - "></s><s c="SQL_DOUBLE" u="SQL_DOUBLE - "></s><s c="SQL_BINARY" u="SQL_BINARY - "></s><s c="SQL_VARBINARY" u="SQL_VARBINARY - "></s><s c="SQL_LONGVARBINARY" u="SQL_LONGVARBINARY - "></s><s c="SQL_DATE" u="SQL_DATE - "></s><s c="SQL_TIME" u="SQL_TIME - "></s><s c="SQL_TIMESTAMP" u="SQL_TIMESTAMP - "></s><s c="SQL_TYPE_DATE" u="SQL_TYPE_DATE - "></s><s c="SQL_TYPE_TIME" u="SQL_TYPE_TIME - "></s><s c="SQL_TYPE_TIMESTAMP" u="SQL_TYPE_TIMESTAMP - "></s><s c="SQL_BEST_ROWID" u="SQL_BEST_ROWID - "></s><s c="SQL_ROWVER" u="SQL_ROWVER - "></s><s c="SQL_SCOPE_CURROW" u="SQL_SCOPE_CURROW - "></s><s c="SQL_SCOPE_TRANSACTION" u="SQL_SCOPE_TRANSACTION - "></s><s c="SQL_SCOPE_SESSION" u="SQL_SCOPE_SESSION - "></s><s c="SQL_NO_NULLS" u="SQL_NO_NULLS - "></s><s c="SQL_NULLABLE" u="SQL_NULLABLE - "></s><s c="SQL_INDEX_UNIQUE" u="SQL_INDEX_UNIQUE - "></s><s c="SQL_INDEX_ALL" u="SQL_INDEX_ALL - "></s><s c="SQL_ENSURE" u="SQL_ENSURE - "></s><s c="SQL_QUICK" u="SQL_QUICK - "></s><s c="DC_MICROSOFT" u="DC_MICROSOFT - "></s><s c="DC_BORLAND" u="DC_BORLAND - "></s><s c="DC_CALL_CDECL" u="DC_CALL_CDECL - "></s><s c="DC_CALL_STD" u="DC_CALL_STD - "></s><s c="DC_RETVAL_MATH4" u="DC_RETVAL_MATH4 - "></s><s c="DC_RETVAL_MATH8" u="DC_RETVAL_MATH8 - "></s><s c="DC_CALL_STD_BO" u="DC_CALL_STD_BO - "></s><s c="DC_CALL_STD_MS" u="DC_CALL_STD_MS - "></s><s c="DC_CALL_STD_M8" u="DC_CALL_STD_M8 - "></s><s c="DC_FLAG_ARGPTR" u="DC_FLAG_ARGPTR - "></s><s c="XDIFF_PATCH_NORMAL" u="XDIFF_PATCH_NORMAL - "></s><s c="XDIFF_PATCH_REVERSE" u="XDIFF_PATCH_REVERSE - "></s><s c="XML_ERROR_NONE" u="XML_ERROR_NONE - "></s><s c="XML_ERROR_NO_MEMORY" u="XML_ERROR_NO_MEMORY - "></s><s c="XML_ERROR_SYNTAX" u="XML_ERROR_SYNTAX - "></s><s c="XML_ERROR_NO_ELEMENTS" u="XML_ERROR_NO_ELEMENTS - "></s><s c="XML_ERROR_INVALID_TOKEN" u="XML_ERROR_INVALID_TOKEN - "></s><s c="XML_ERROR_UNCLOSED_TOKEN" u="XML_ERROR_UNCLOSED_TOKEN - "></s><s c="XML_ERROR_PARTIAL_CHAR" u="XML_ERROR_PARTIAL_CHAR - "></s><s c="XML_ERROR_TAG_MISMATCH" u="XML_ERROR_TAG_MISMATCH - "></s><s c="XML_ERROR_DUPLICATE_ATTRIBUTE" u="XML_ERROR_DUPLICATE_ATTRIBUTE - "></s><s c="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" u="XML_ERROR_JUNK_AFTER_DOC_ELEMENT - "></s><s c="XML_ERROR_PARAM_ENTITY_REF" u="XML_ERROR_PARAM_ENTITY_REF - "></s><s c="XML_ERROR_UNDEFINED_ENTITY" u="XML_ERROR_UNDEFINED_ENTITY - "></s><s c="XML_ERROR_RECURSIVE_ENTITY_REF" u="XML_ERROR_RECURSIVE_ENTITY_REF - "></s><s c="XML_ERROR_ASYNC_ENTITY" u="XML_ERROR_ASYNC_ENTITY - "></s><s c="XML_ERROR_BAD_CHAR_REF" u="XML_ERROR_BAD_CHAR_REF - "></s><s c="XML_ERROR_BINARY_ENTITY_REF" u="XML_ERROR_BINARY_ENTITY_REF - "></s><s c="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" u="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF - "></s><s c="XML_ERROR_MISPLACED_XML_PI" u="XML_ERROR_MISPLACED_XML_PI - "></s><s c="XML_ERROR_UNKNOWN_ENCODING" u="XML_ERROR_UNKNOWN_ENCODING - "></s><s c="XML_ERROR_INCORRECT_ENCODING" u="XML_ERROR_INCORRECT_ENCODING - "></s><s c="XML_ERROR_UNCLOSED_CDATA_SECTION" u="XML_ERROR_UNCLOSED_CDATA_SECTION - "></s><s c="XML_ERROR_EXTERNAL_ENTITY_HANDLING" u="XML_ERROR_EXTERNAL_ENTITY_HANDLING - "></s><s c="XML_OPTION_CASE_FOLDING" u="XML_OPTION_CASE_FOLDING - "></s><s c="XML_OPTION_TARGET_ENCODING" u="XML_OPTION_TARGET_ENCODING - "></s><s c="XML_OPTION_SKIP_TAGSTART" u="XML_OPTION_SKIP_TAGSTART - "></s><s c="XML_OPTION_SKIP_WHITE" u="XML_OPTION_SKIP_WHITE - "></s><s c="XSLT_OPT_SILENT" u="XSLT_OPT_SILENT - "></s><s c="XSLT_SABOPT_PARSE_PUBLIC_ENTITIES" u="XSLT_SABOPT_PARSE_PUBLIC_ENTITIES - "></s><s c="XSLT_SABOPT_DISABLE_ADDING_META" u="XSLT_SABOPT_DISABLE_ADDING_META - "></s><s c="XSLT_SABOPT_DISABLE_STRIPPING" u="XSLT_SABOPT_DISABLE_STRIPPING - "></s><s c="XSLT_SABOPT_IGNORE_DOC_NOT_FOUND" u="XSLT_SABOPT_IGNORE_DOC_NOT_FOUND - "></s><s c="XSLT_ERR_UNSUPPORTED_SCHEME" u="XSLT_ERR_UNSUPPORTED_SCHEME - "></s><s c="FORCE_GZIP" u="FORCE_GZIP - "></s><s c="FORCE_DEFLATE" u="FORCE_DEFLATE - "></s></PHPStandardSyntax>